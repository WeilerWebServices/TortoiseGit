<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect2 lang="en" id="gitignore(5)">
    <title>gitignore(5)</title>
<indexterm>
<primary>gitignore(5)</primary>
</indexterm>
<simplesect id="gitignore(5)__name">
<title>NAME</title>
<simpara>gitignore - Specifies intentionally untracked files to ignore</simpara>
</simplesect>
<simplesect id="gitignore(5)__synopsis">
<title>SYNOPSIS</title>
<simpara>$HOME/.config/git/ignore, $GIT_DIR/info/exclude, .gitignore</simpara>
</simplesect>
<simplesect id="gitignore(5)__description">
<title>DESCRIPTION</title>
<simpara>A <emphasis>gitignore</emphasis> file specifies intentionally untracked files that
Git should ignore.
Files already tracked by Git are not affected; see the NOTES
below for details.</simpara>
<simpara>Each line in a <emphasis>gitignore</emphasis> file specifies a pattern.
When deciding whether to ignore a path, Git normally checks
<emphasis>gitignore</emphasis> patterns from multiple sources, with the following
order of precedence, from highest to lowest (within one level of
precedence, the last matching pattern decides the outcome):</simpara>
<itemizedlist>
<listitem>
<simpara>
Patterns read from the command line for those commands that support
   them.
</simpara>
</listitem>
<listitem>
<simpara>
Patterns read from a <emphasis>.gitignore</emphasis> file in the same directory
   as the path, or in any parent directory, with patterns in the
   higher level files (up to the toplevel of the work tree) being overridden
   by those in lower level files down to the directory containing the file.
   These patterns match relative to the location of the
   <emphasis>.gitignore</emphasis> file.  A project normally includes such
   <emphasis>.gitignore</emphasis> files in its repository, containing patterns for
   files generated as part of the project build.
</simpara>
</listitem>
<listitem>
<simpara>
Patterns read from <emphasis>$GIT_DIR/info/exclude</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
Patterns read from the file specified by the configuration
   variable <emphasis>core.excludesFile</emphasis>.
</simpara>
</listitem>
</itemizedlist>
<simpara>Which file to place a pattern in depends on how the pattern is meant to
be used.</simpara>
<itemizedlist>
<listitem>
<simpara>
Patterns which should be version-controlled and distributed to
   other repositories via clone (i.e., files that all developers will want
   to ignore) should go into a <emphasis>.gitignore</emphasis> file.
</simpara>
</listitem>
<listitem>
<simpara>
Patterns which are
   specific to a particular repository but which do not need to be shared
   with other related repositories (e.g., auxiliary files that live inside
   the repository but are specific to one user's workflow) should go into
   the <emphasis>$GIT_DIR/info/exclude</emphasis> file.
</simpara>
</listitem>
<listitem>
<simpara>
Patterns which a user wants Git to
   ignore in all situations (e.g., backup or temporary files generated by
   the user's editor of choice) generally go into a file specified by
   <emphasis>core.excludesFile</emphasis> in the user's <emphasis>~/.gitconfig</emphasis>. Its default value is
   $XDG_CONFIG_HOME/git/ignore. If $XDG_CONFIG_HOME is either not set or
   empty, $HOME/.config/git/ignore is used instead.
</simpara>
</listitem>
</itemizedlist>
<simpara>The underlying Git plumbing tools, such as
<emphasis>git ls-files</emphasis> and <emphasis>git read-tree</emphasis>, read
<emphasis>gitignore</emphasis> patterns specified by command-line options, or from
files specified by command-line options.  Higher-level Git
tools, such as <emphasis>git status</emphasis> and <emphasis>git add</emphasis>,
use patterns from the sources specified above.</simpara>
</simplesect>
<simplesect id="gitignore(5)__pattern_format">
<title>PATTERN FORMAT</title>
<itemizedlist>
<listitem>
<simpara>
A blank line matches no files, so it can serve as a separator
   for readability.
</simpara>
</listitem>
<listitem>
<simpara>
A line starting with # serves as a comment.
   Put a backslash ("<emphasis>\</emphasis>") in front of the first hash for patterns
   that begin with a hash.
</simpara>
</listitem>
<listitem>
<simpara>
Trailing spaces are ignored unless they are quoted with backslash
   ("<emphasis>\</emphasis>").
</simpara>
</listitem>
<listitem>
<simpara>
An optional prefix "<emphasis>!</emphasis>" which negates the pattern; any
   matching file excluded by a previous pattern will become
   included again. It is not possible to re-include a file if a parent
   directory of that file is excluded. Git doesn't list excluded
   directories for performance reasons, so any patterns on contained
   files have no effect, no matter where they are defined.
   Put a backslash ("<emphasis>\</emphasis>") in front of the first "<emphasis>!</emphasis>" for patterns
   that begin with a literal "<emphasis>!</emphasis>", for example, "<emphasis>\!important!.txt</emphasis>".
</simpara>
</listitem>
<listitem>
<simpara>
If the pattern ends with a slash, it is removed for the
   purpose of the following description, but it would only find
   a match with a directory.  In other words, <emphasis>foo/</emphasis> will match a
   directory <emphasis>foo</emphasis> and paths underneath it, but will not match a
   regular file or a symbolic link <emphasis>foo</emphasis> (this is consistent
   with the way how pathspec works in general in Git).
</simpara>
</listitem>
<listitem>
<simpara>
If the pattern does not contain a slash <emphasis>/</emphasis>, Git treats it as
   a shell glob pattern and checks for a match against the
   pathname relative to the location of the <emphasis>.gitignore</emphasis> file
   (relative to the toplevel of the work tree if not from a
   <emphasis>.gitignore</emphasis> file).
</simpara>
</listitem>
<listitem>
<simpara>
Otherwise, Git treats the pattern as a shell glob suitable
   for consumption by fnmatch(3) with the FNM_PATHNAME flag:
   wildcards in the pattern will not match a / in the pathname.
   For example, "Documentation/&#42;.html" matches
   "Documentation/git.html" but not "Documentation/ppc/ppc.html"
   or "tools/perf/Documentation/perf.html".
</simpara>
</listitem>
<listitem>
<simpara>
A leading slash matches the beginning of the pathname.
   For example, "/&#42;.c" matches "cat-file.c" but not
   "mozilla-sha1/sha1.c".
</simpara>
</listitem>
</itemizedlist>
<simpara>Two consecutive asterisks ("<emphasis>**</emphasis>") in patterns matched against
full pathname may have special meaning:</simpara>
<itemizedlist>
<listitem>
<simpara>
A leading "<emphasis>**</emphasis>" followed by a slash means match in all
   directories. For example, "<emphasis>**/foo</emphasis>" matches file or directory
   "<emphasis>foo</emphasis>" anywhere, the same as pattern "<emphasis>foo</emphasis>". "<emphasis>**/foo/bar</emphasis>"
   matches file or directory "<emphasis>bar</emphasis>" anywhere that is directly
   under directory "<emphasis>foo</emphasis>".
</simpara>
</listitem>
<listitem>
<simpara>
A trailing "<emphasis>/**</emphasis>" matches everything inside. For example,
   "<emphasis>abc/**</emphasis>" matches all files inside directory "<emphasis>abc</emphasis>", relative
   to the location of the <emphasis>.gitignore</emphasis> file, with infinite depth.
</simpara>
</listitem>
<listitem>
<simpara>
A slash followed by two consecutive asterisks then a slash
   matches zero or more directories. For example, "<emphasis>a/**/b</emphasis>"
   matches "<emphasis>a/b</emphasis>", "<emphasis>a/x/b</emphasis>", "<emphasis>a/x/y/b</emphasis>" and so on.
</simpara>
</listitem>
<listitem>
<simpara>
Other consecutive asterisks are considered invalid.
</simpara>
</listitem>
</itemizedlist>
</simplesect>
<simplesect id="gitignore(5)__notes">
<title>NOTES</title>
<simpara>The purpose of gitignore files is to ensure that certain files
not tracked by Git remain untracked.</simpara>
<simpara>To stop tracking a file that is currently tracked, use
<emphasis>git rm --cached</emphasis>.</simpara>
</simplesect>
<simplesect id="gitignore(5)__examples">
<title>EXAMPLES</title>
<screen>    $ git status
    [...]
    # Untracked files:
    [...]
    #       Documentation/foo.html
    #       Documentation/gitignore.html
    #       file.o
    #       lib.a
    #       src/internal.o
    [...]
    $ cat .git/info/exclude
    # ignore objects and archives, anywhere in the tree.
    *.[oa]
    $ cat Documentation/.gitignore
    # ignore generated html files,
    *.html
    # except foo.html which is maintained by hand
    !foo.html
    $ git status
    [...]
    # Untracked files:
    [...]
    #       Documentation/foo.html
    [...]</screen>
<simpara>Another example:</simpara>
<screen>    $ cat .gitignore
    vmlinux*
    $ ls arch/foo/kernel/vm*
    arch/foo/kernel/vmlinux.lds.S
    $ echo '!/vmlinux*' &gt;arch/foo/kernel/.gitignore</screen>
<simpara>The second .gitignore prevents Git from ignoring
<emphasis>arch/foo/kernel/vmlinux.lds.S</emphasis>.</simpara>
<simpara>Example to exclude everything except a specific directory <emphasis>foo/bar</emphasis>
(note the <emphasis>/*</emphasis> - without the slash, the wildcard would also exclude
everything within <emphasis>foo/bar</emphasis>):</simpara>
<screen>    $ cat .gitignore
    # exclude everything except directory foo/bar
    /*
    !/foo
    /foo/*
    !/foo/bar</screen>
</simplesect>
<simplesect id="gitignore(5)__see_also">
<title>SEE ALSO</title>
<simpara><xref linkend="git-rm(1)" />,
<xref linkend="gitrepository-layout(5)" />,
<xref linkend="git-check-ignore(1)" /></simpara>
</simplesect>
<simplesect id="gitignore(5)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
