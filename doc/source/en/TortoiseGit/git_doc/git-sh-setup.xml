<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect2 lang="en" id="git-sh-setup(1)">
    <title>git-sh-setup(1)</title>
<indexterm>
<primary>git-sh-setup(1)</primary>
</indexterm>
<simplesect id="git-sh-setup(1)__name">
<title>NAME</title>
<simpara>git-sh-setup - Common Git shell script setup code</simpara>
</simplesect>
<simplesect id="git-sh-setup(1)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>. "$(git --exec-path)/git-sh-setup"</emphasis></literallayout>
</blockquote>
</simplesect>
<simplesect id="git-sh-setup(1)__description">
<title>DESCRIPTION</title>
<simpara>This is not a command the end user would want to run.  Ever.
This documentation is meant for people who are studying the
Porcelain-ish scripts and/or are writing new ones.</simpara>
<simpara>The <emphasis>git sh-setup</emphasis> scriptlet is designed to be sourced (using
<emphasis>.</emphasis>) by other shell scripts to set up some variables pointing at
the normal Git directories and a few helper shell functions.</simpara>
<simpara>Before sourcing it, your script should set up a few variables;
<emphasis>USAGE</emphasis> (and <emphasis>LONG_USAGE</emphasis>, if any) is used to define message
given by <emphasis>usage()</emphasis> shell function.  <emphasis>SUBDIRECTORY_OK</emphasis> can be set
if the script can run from a subdirectory of the working tree
(some commands do not).</simpara>
<simpara>The scriptlet sets <emphasis>GIT_DIR</emphasis> and <emphasis>GIT_OBJECT_DIRECTORY</emphasis> shell
variables, but does <emphasis role="strong">not</emphasis> export them to the environment.</simpara>
</simplesect>
<simplesect id="git-sh-setup(1)__functions">
<title>FUNCTIONS</title>
<variablelist>
<varlistentry>
<term>
die
</term>
<listitem>
<simpara>
        exit after emitting the supplied error message to the
        standard error stream.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
usage
</term>
<listitem>
<simpara>
        die with the usage message.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
set_reflog_action
</term>
<listitem>
<simpara>
        Set GIT_REFLOG_ACTION environment to a given string (typically
        the name of the program) unless it is already set.  Whenever
        the script runs a <emphasis>git</emphasis> command that updates refs, a reflog
        entry is created using the value of this string to leave the
        record of what command updated the ref.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
git_editor
</term>
<listitem>
<simpara>
        runs an editor of user's choice (GIT_EDITOR, core.editor, VISUAL or
        EDITOR) on a given file, but error out if no editor is specified
        and the terminal is dumb.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
is_bare_repository
</term>
<listitem>
<simpara>
        outputs <emphasis>true</emphasis> or <emphasis>false</emphasis> to the standard output stream
        to indicate if the repository is a bare repository
        (i.e. without an associated working tree).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
cd_to_toplevel
</term>
<listitem>
<simpara>
        runs chdir to the toplevel of the working tree.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
require_work_tree
</term>
<listitem>
<simpara>
        checks if the current directory is within the working tree
        of the repository, and otherwise dies.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
require_work_tree_exists
</term>
<listitem>
<simpara>
        checks if the working tree associated with the repository
        exists, and otherwise dies.  Often done before calling
        cd_to_toplevel, which is impossible to do if there is no
        working tree.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
require_clean_work_tree &lt;action&gt; [&lt;hint&gt;]
</term>
<listitem>
<simpara>
        checks that the working tree and index associated with the
        repository have no uncommitted changes to tracked files.
        Otherwise it emits an error message of the form <emphasis>Cannot
        &lt;action&gt;: &lt;reason&gt;. &lt;hint&gt;</emphasis>, and dies.  Example:
</simpara>
<screen>require_clean_work_tree rebase "Please commit or stash them."</screen>
</listitem>
</varlistentry>
<varlistentry>
<term>
get_author_ident_from_commit
</term>
<listitem>
<simpara>
        outputs code for use with eval to set the GIT_AUTHOR_NAME,
        GIT_AUTHOR_EMAIL and GIT_AUTHOR_DATE variables for a given commit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
create_virtual_base
</term>
<listitem>
<simpara>
        modifies the first file so only lines in common with the
        second file remain. If there is insufficient common material,
        then the first file is left empty. The result is suitable
        as a virtual base input for a 3-way merge.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-sh-setup(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
