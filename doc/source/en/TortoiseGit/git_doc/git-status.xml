<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect2 lang="en" id="git-status(1)">
    <title>git-status(1)</title>
<indexterm>
<primary>git-status(1)</primary>
</indexterm>
<simplesect id="git-status(1)__name">
<title>NAME</title>
<simpara>git-status - Show the working tree status</simpara>
</simplesect>
<simplesect id="git-status(1)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>git status</emphasis> [&lt;options&gt;&#8230;] [--] [&lt;pathspec&gt;&#8230;]</literallayout>
</blockquote>
</simplesect>
<simplesect id="git-status(1)__description">
<title>DESCRIPTION</title>
<simpara>Displays paths that have differences between the index file and the
current HEAD commit, paths that have differences between the working
tree and the index file, and paths in the working tree that are not
tracked by Git (and are not ignored by <xref linkend="gitignore(5)" />). The first
are what you <emphasis>would</emphasis> commit by running <emphasis>git commit</emphasis>; the second and
third are what you <emphasis>could</emphasis> commit by running <emphasis>git add</emphasis> before running
<emphasis>git commit</emphasis>.</simpara>
</simplesect>
<simplesect id="git-status(1)__options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-s
</term>
<term>
--short
</term>
<listitem>
<simpara>
        Give the output in the short-format.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-b
</term>
<term>
--branch
</term>
<listitem>
<simpara>
        Show the branch and tracking info even in short-format.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--porcelain
</term>
<listitem>
<simpara>
        Give the output in an easy-to-parse format for scripts.
        This is similar to the short output, but will remain stable
        across Git versions and regardless of user configuration. See
        below for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--long
</term>
<listitem>
<simpara>
        Give the output in the long-format. This is the default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        In addition to the names of files that have been changed, also
        show the textual changes that are staged to be committed
        (i.e., like the output of <emphasis>git diff --cached</emphasis>). If <emphasis>-v</emphasis> is specified
        twice, then also show the changes in the working tree that
        have not yet been staged (i.e., like the output of <emphasis>git diff</emphasis>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-u[&lt;mode&gt;]
</term>
<term>
--untracked-files[=&lt;mode&gt;]
</term>
<listitem>
<simpara>
        Show untracked files.
</simpara>
<simpara>The mode parameter is used to specify the handling of untracked files.
It is optional: it defaults to <emphasis>all</emphasis>, and if specified, it must be
stuck to the option (e.g. <emphasis>-uno</emphasis>, but not <emphasis>-u no</emphasis>).</simpara>
<simpara>The possible options are:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>no</emphasis>     - Show no untracked files.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>normal</emphasis> - Shows untracked files and directories.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>all</emphasis>    - Also shows individual files in untracked directories.
</simpara>
<simpara>When <emphasis>-u</emphasis> option is not used, untracked files and directories are
shown (i.e. the same as specifying <emphasis>normal</emphasis>), to help you avoid
forgetting to add newly created files.  Because it takes extra work
to find untracked files in the filesystem, this mode may take some
time in a large working tree.
Consider enabling untracked cache and split index if supported (see
<emphasis>git update-index --untracked-cache</emphasis> and <emphasis>git update-index
--split-index</emphasis>), Otherwise you can use <emphasis>no</emphasis> to have <emphasis>git status</emphasis>
return more quickly without showing untracked files.</simpara>
<simpara>The default can be changed using the status.showUntrackedFiles
configuration variable documented in <xref linkend="git-config(1)" />.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
--ignore-submodules[=&lt;when&gt;]
</term>
<listitem>
<simpara>
        Ignore changes to submodules when looking for changes. &lt;when&gt; can be
        either "none", "untracked", "dirty" or "all", which is the default.
        Using "none" will consider the submodule modified when it either contains
        untracked or modified files or its HEAD differs from the commit recorded
        in the superproject and can be used to override any settings of the
        <emphasis>ignore</emphasis> option in <xref linkend="git-config(1)" /> or <xref linkend="gitmodules(5)" />. When
        "untracked" is used submodules are not considered dirty when they only
        contain untracked content (but they are still scanned for modified
        content). Using "dirty" ignores all changes to the work tree of submodules,
        only changes to the commits stored in the superproject are shown (this was
        the behavior before 1.7.0). Using "all" hides all changes to submodules
        (and suppresses the output of submodule summaries when the config option
        <emphasis>status.submoduleSummary</emphasis> is set).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--ignored
</term>
<listitem>
<simpara>
        Show ignored files as well.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-z
</term>
<listitem>
<simpara>
        Terminate entries with NUL, instead of LF.  This implies
        the <emphasis>--porcelain</emphasis> output format if no other format is given.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--column[=&lt;options&gt;]
</term>
<term>
--no-column
</term>
<listitem>
<simpara>
        Display untracked files in columns. See configuration variable
        column.status for option syntax.<emphasis>--column</emphasis> and <emphasis>--no-column</emphasis>
        without options are equivalent to <emphasis>always</emphasis> and <emphasis>never</emphasis>
        respectively.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-status(1)__output">
<title>OUTPUT</title>
<simpara>The output from this command is designed to be used as a commit
template comment.
The default, long format, is designed to be human readable,
verbose and descriptive.  Its contents and format are subject to change
at any time.</simpara>
<simpara>The paths mentioned in the output, unlike many other Git commands, are
made relative to the current directory if you are working in a
subdirectory (this is on purpose, to help cutting and pasting). See
the status.relativePaths config option below.</simpara>
<section id="git-status(1)__short_format">
<title>Short Format</title>
<simpara>In the short-format, the status of each path is shown as</simpara>
<literallayout class="monospaced">XY PATH1 -&gt; PATH2</literallayout>
<simpara>where <emphasis>PATH1</emphasis> is the path in the <emphasis>HEAD</emphasis>, and the " <emphasis>-&gt; PATH2</emphasis>" part is
shown only when <emphasis>PATH1</emphasis> corresponds to a different path in the
index/worktree (i.e. the file is renamed). The <emphasis>XY</emphasis> is a two-letter
status code.</simpara>
<simpara>The fields (including the <emphasis>-&gt;</emphasis>) are separated from each other by a
single space. If a filename contains whitespace or other nonprintable
characters, that field will be quoted in the manner of a C string
literal: surrounded by ASCII double quote (34) characters, and with
interior special characters backslash-escaped.</simpara>
<simpara>For paths with merge conflicts, <emphasis>X</emphasis> and <emphasis>Y</emphasis> show the modification
states of each side of the merge. For paths that do not have merge
conflicts, <emphasis>X</emphasis> shows the status of the index, and <emphasis>Y</emphasis> shows the status
of the work tree.  For untracked paths, <emphasis>XY</emphasis> are <emphasis>??</emphasis>.  Other status
codes can be interpreted as follows:</simpara>
<itemizedlist>
<listitem>
<simpara>
' ' = unmodified
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>M</emphasis> = modified
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>A</emphasis> = added
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>D</emphasis> = deleted
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>R</emphasis> = renamed
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>C</emphasis> = copied
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>U</emphasis> = updated but unmerged
</simpara>
</listitem>
</itemizedlist>
<simpara>Ignored files are not listed, unless <emphasis>--ignored</emphasis> option is in effect,
in which case <emphasis>XY</emphasis> are <emphasis>!!</emphasis>.</simpara>
<literallayout class="monospaced">X          Y     Meaning
-------------------------------------------------
          [MD]   not updated
M        [ MD]   updated in index
A        [ MD]   added to index
D         [ M]   deleted from index
R        [ MD]   renamed in index
C        [ MD]   copied in index
[MARC]           index and work tree matches
[ MARC]     M    work tree changed since index
[ MARC]     D    deleted in work tree
-------------------------------------------------
D           D    unmerged, both deleted
A           U    unmerged, added by us
U           D    unmerged, deleted by them
U           A    unmerged, added by them
D           U    unmerged, deleted by us
A           A    unmerged, both added
U           U    unmerged, both modified
-------------------------------------------------
?           ?    untracked
!           !    ignored
-------------------------------------------------</literallayout>
<simpara>If -b is used the short-format status is preceded by a line</simpara>
<simpara>## branchname tracking info</simpara>
</section>
<section id="git-status(1)__porcelain_format">
<title>Porcelain Format</title>
<simpara>The porcelain format is similar to the short format, but is guaranteed
not to change in a backwards-incompatible way between Git versions or
based on user configuration. This makes it ideal for parsing by scripts.
The description of the short format above also describes the porcelain
format, with a few exceptions:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
The user's color.status configuration is not respected; color will
   always be off.
</simpara>
</listitem>
<listitem>
<simpara>
The user's status.relativePaths configuration is not respected; paths
   shown will always be relative to the repository root.
</simpara>
</listitem>
</orderedlist>
<simpara>There is also an alternate -z format recommended for machine parsing. In
that format, the status field is the same, but some other things
change.  First, the <emphasis>-&gt;</emphasis> is omitted from rename entries and the field
order is reversed (e.g <emphasis>from -&gt; to</emphasis> becomes <emphasis>to from</emphasis>). Second, a NUL
(ASCII 0) follows each filename, replacing space as a field separator
and the terminating newline (but a space still separates the status
field from the first filename).  Third, filenames containing special
characters are not specially formatted; no quoting or
backslash-escaping is performed.</simpara>
</section>
</simplesect>
<simplesect id="git-status(1)__configuration">
<title>CONFIGURATION</title>
<simpara>The command honors <emphasis>color.status</emphasis> (or <emphasis>status.color</emphasis> -- they
mean the same thing and the latter is kept for backward
compatibility) and <emphasis>color.status.&lt;slot&gt;</emphasis> configuration variables
to colorize its output.</simpara>
<simpara>If the config variable <emphasis>status.relativePaths</emphasis> is set to false, then all
paths shown are relative to the repository root, not to the current
directory.</simpara>
<simpara>If <emphasis>status.submoduleSummary</emphasis> is set to a non zero number or true (identical
to -1 or an unlimited number), the submodule summary will be enabled for
the long format and a summary of commits for modified submodules will be
shown (see --summary-limit option of <xref linkend="git-submodule(1)" />). Please note
that the summary output from the status command will be suppressed for all
submodules when <emphasis>diff.ignoreSubmodules</emphasis> is set to <emphasis>all</emphasis> or only for those
submodules where <emphasis>submodule.&lt;name&gt;.ignore=all</emphasis>. To also view the summary for
ignored submodules you can either use the --ignore-submodules=dirty command
line option or the <emphasis>git submodule summary</emphasis> command, which shows a similar
output but does not honor these settings.</simpara>
</simplesect>
<simplesect id="git-status(1)__see_also">
<title>SEE ALSO</title>
<simpara><xref linkend="gitignore(5)" /></simpara>
</simplesect>
<simplesect id="git-status(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
