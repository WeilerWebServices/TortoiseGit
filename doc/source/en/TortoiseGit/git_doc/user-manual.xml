<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect2 lang="en" id="git_user-manual">
    <title>Git User Manual</title>
<simpara>Git is a fast distributed revision control system.</simpara>
<simpara>This manual is designed to be readable by someone with basic UNIX
command-line skills, but no previous knowledge of Git.</simpara>
<simpara><xref linkend="Git User Manual_repositories-and-branches"/> and <xref linkend="Git User Manual_exploring-git-history"/> explain how
to fetch and study a project using git--read these chapters to learn how
to build and test a particular version of a software project, search for
regressions, and so on.</simpara>
<simpara>People needing to do actual development will also want to read
<xref linkend="Git User Manual_Developing-With-git"/> and <xref linkend="Git User Manual_sharing-development"/>.</simpara>
<simpara>Further chapters cover more specialized topics.</simpara>
<simpara>Comprehensive reference documentation is available through the man
pages, or <xref linkend="git-help(1)" /> command.  For example, for the command
<emphasis>git clone &lt;repo&gt;</emphasis>, you can either use:</simpara>
<literallayout>$ man git-clone</literallayout>
<simpara>or:</simpara>
<literallayout>$ git help clone</literallayout>
<simpara>With the latter, you can use the manual viewer of your choice; see
<xref linkend="git-help(1)" /> for more information.</simpara>
<simpara>See also <xref linkend="Git User Manual_git-quick-start"/> for a brief overview of Git commands,
without any explanation.</simpara>
<simpara>Finally, see <xref linkend="Git User Manual_todo"/> for ways that you can help make this manual more
complete.</simpara>
<section id="Git User Manual_repositories-and-branches">
<title>Repositories and Branches</title>
<section id="Git User Manual_how-to-get-a-git-repository">
<title>How to get a Git repository</title>
<simpara>It will be useful to have a Git repository to experiment with as you
read this manual.</simpara>
<simpara>The best way to get one is by using the <xref linkend="git-clone(1)" /> command to
download a copy of an existing repository.  If you don't already have a
project in mind, here are some interesting examples:</simpara>
<literallayout>        # Git itself (approx. 40MB download):
$ git clone git://git.kernel.org/pub/scm/git/git.git
        # the Linux kernel (approx. 640MB download):
$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git</literallayout>
<simpara>The initial clone may be time-consuming for a large project, but you
will only need to clone once.</simpara>
<simpara>The clone command creates a new directory named after the project
(<emphasis>git</emphasis> or <emphasis>linux</emphasis> in the examples above).  After you cd into this
directory, you will see that it contains a copy of the project files,
called the <link linkend="Git User Manual_def_working_tree">working tree</link>, together with a special
top-level directory named <emphasis>.git</emphasis>, which contains all the information
about the history of the project.</simpara>
</section>
<section id="Git User Manual_how-to-check-out">
<title>How to check out a different version of a project</title>
<simpara>Git is best thought of as a tool for storing the history of a collection
of files.  It stores the history as a compressed collection of
interrelated snapshots of the project's contents.  In Git each such
version is called a <link linkend="Git User Manual_def_commit">commit</link>.</simpara>
<simpara>Those snapshots aren't necessarily all arranged in a single line from
oldest to newest; instead, work may simultaneously proceed along
parallel lines of development, called <link linkend="Git User Manual_def_branch">branches</link>, which may
merge and diverge.</simpara>
<simpara>A single Git repository can track development on multiple branches.  It
does this by keeping a list of <link linkend="Git User Manual_def_head">heads</link> which reference the
latest commit on each branch; the <xref linkend="git-branch(1)" /> command shows
you the list of branch heads:</simpara>
<literallayout>$ git branch
* master</literallayout>
<simpara>A freshly cloned repository contains a single branch head, by default
named "master", with the working directory initialized to the state of
the project referred to by that branch head.</simpara>
<simpara>Most projects also use <link linkend="Git User Manual_def_tag">tags</link>.  Tags, like heads, are
references into the project's history, and can be listed using the
<xref linkend="git-tag(1)" /> command:</simpara>
<literallayout>$ git tag -l
v2.6.11
v2.6.11-tree
v2.6.12
v2.6.12-rc2
v2.6.12-rc3
v2.6.12-rc4
v2.6.12-rc5
v2.6.12-rc6
v2.6.13
...</literallayout>
<simpara>Tags are expected to always point at the same version of a project,
while heads are expected to advance as development progresses.</simpara>
<simpara>Create a new branch head pointing to one of these versions and check it
out using <xref linkend="git-checkout(1)" />:</simpara>
<literallayout>$ git checkout -b new v2.6.13</literallayout>
<simpara>The working directory then reflects the contents that the project had
when it was tagged v2.6.13, and <xref linkend="git-branch(1)" /> shows two
branches, with an asterisk marking the currently checked-out branch:</simpara>
<literallayout>$ git branch
  master
* new</literallayout>
<simpara>If you decide that you'd rather see version 2.6.17, you can modify
the current branch to point at v2.6.17 instead, with</simpara>
<literallayout>$ git reset --hard v2.6.17</literallayout>
<simpara>Note that if the current branch head was your only reference to a
particular point in history, then resetting that branch may leave you
with no way to find the history it used to point to; so use this command
carefully.</simpara>
</section>
<section id="Git User Manual_understanding-commits">
<title>Understanding History: Commits</title>
<simpara>Every change in the history of a project is represented by a commit.
The <xref linkend="git-show(1)" /> command shows the most recent commit on the
current branch:</simpara>
<literallayout>$ git show
commit 17cf781661e6d38f737f15f53ab552f1e95960d7
Author: Linus Torvalds &lt;torvalds@ppc970.osdl.org.(none)&gt;
Date:   Tue Apr 19 14:11:06 2005 -0700

    Remove duplicate getenv(DB_ENVIRONMENT) call

    Noted by Tony Luck.

diff --git a/init-db.c b/init-db.c
index 65898fa..b002dc6 100644
--- a/init-db.c
+++ b/init-db.c
@@ -7,7 +7,7 @@

 int main(int argc, char **argv)
 {
-       char *sha1_dir = getenv(DB_ENVIRONMENT), *path;
+       char *sha1_dir, *path;
        int len, i;

        if (mkdir(".git", 0755) &lt; 0) {</literallayout>
<simpara>As you can see, a commit shows who made the latest change, what they
did, and why.</simpara>
<simpara>Every commit has a 40-hexdigit id, sometimes called the "object name" or the
"SHA-1 id", shown on the first line of the <emphasis>git show</emphasis> output.  You can usually
refer to a commit by a shorter name, such as a tag or a branch name, but this
longer name can also be useful.  Most importantly, it is a globally unique
name for this commit: so if you tell somebody else the object name (for
example in email), then you are guaranteed that name will refer to the same
commit in their repository that it does in yours (assuming their repository
has that commit at all).  Since the object name is computed as a hash over the
contents of the commit, you are guaranteed that the commit can never change
without its name also changing.</simpara>
<simpara>In fact, in <xref linkend="Git User Manual_git-concepts"/> we shall see that everything stored in Git
history, including file data and directory contents, is stored in an object
with a name that is a hash of its contents.</simpara>
<section id="Git User Manual_understanding-reachability">
<title>Understanding history: commits, parents, and reachability</title>
<simpara>Every commit (except the very first commit in a project) also has a
parent commit which shows what happened before this commit.
Following the chain of parents will eventually take you back to the
beginning of the project.</simpara>
<simpara>However, the commits do not form a simple list; Git allows lines of
development to diverge and then reconverge, and the point where two
lines of development reconverge is called a "merge".  The commit
representing a merge can therefore have more than one parent, with
each parent representing the most recent commit on one of the lines
of development leading to that point.</simpara>
<simpara>The best way to see how this works is using the <xref linkend="gitk(1)" />
command; running gitk now on a Git repository and looking for merge
commits will help understand how Git organizes history.</simpara>
<simpara>In the following, we say that commit X is "reachable" from commit Y
if commit X is an ancestor of commit Y.  Equivalently, you could say
that Y is a descendant of X, or that there is a chain of parents
leading from commit Y to commit X.</simpara>
</section>
<section id="Git User Manual_history-diagrams">
<title>Understanding history: History diagrams</title>
<simpara>We will sometimes represent Git history using diagrams like the one
below.  Commits are shown as "o", and the links between them with
lines drawn with - / and \.  Time goes left to right:</simpara>
<literallayout class="monospaced">         o--o--o &lt;-- Branch A
        /
 o--o--o &lt;-- master
        \
         o--o--o &lt;-- Branch B</literallayout>
<simpara>If we need to talk about a particular commit, the character "o" may
be replaced with another letter or number.</simpara>
</section>
<section id="Git User Manual_what-is-a-branch">
<title>Understanding history: What is a branch?</title>
<simpara>When we need to be precise, we will use the word "branch" to mean a line
of development, and "branch head" (or just "head") to mean a reference
to the most recent commit on a branch.  In the example above, the branch
head named "A" is a pointer to one particular commit, but we refer to
the line of three commits leading up to that point as all being part of
"branch A".</simpara>
<simpara>However, when no confusion will result, we often just use the term
"branch" both for branches and for branch heads.</simpara>
</section>
</section>
<section id="Git User Manual_manipulating-branches">
<title>Manipulating branches</title>
<simpara>Creating, deleting, and modifying branches is quick and easy; here's
a summary of the commands:</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>git branch</emphasis>
</term>
<listitem>
<simpara>
        list all branches.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git branch &lt;branch&gt;</emphasis>
</term>
<listitem>
<simpara>
        create a new branch named <emphasis>&lt;branch&gt;</emphasis>, referencing the same
        point in history as the current branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git branch &lt;branch&gt; &lt;start-point&gt;</emphasis>
</term>
<listitem>
<simpara>
        create a new branch named <emphasis>&lt;branch&gt;</emphasis>, referencing
        <emphasis>&lt;start-point&gt;</emphasis>, which may be specified any way you like,
        including using a branch name or a tag name.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git branch -d &lt;branch&gt;</emphasis>
</term>
<listitem>
<simpara>
        delete the branch <emphasis>&lt;branch&gt;</emphasis>; if the branch is not fully
        merged in its upstream branch or contained in the current branch,
        this command will fail with a warning.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git branch -D &lt;branch&gt;</emphasis>
</term>
<listitem>
<simpara>
        delete the branch <emphasis>&lt;branch&gt;</emphasis> irrespective of its merged status.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git checkout &lt;branch&gt;</emphasis>
</term>
<listitem>
<simpara>
        make the current branch <emphasis>&lt;branch&gt;</emphasis>, updating the working
        directory to reflect the version referenced by <emphasis>&lt;branch&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git checkout -b &lt;new&gt; &lt;start-point&gt;</emphasis>
</term>
<listitem>
<simpara>
        create a new branch <emphasis>&lt;new&gt;</emphasis> referencing <emphasis>&lt;start-point&gt;</emphasis>, and
        check it out.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The special symbol "HEAD" can always be used to refer to the current
branch.  In fact, Git uses a file named <emphasis>HEAD</emphasis> in the <emphasis>.git</emphasis> directory
to remember which branch is current:</simpara>
<literallayout>$ cat .git/HEAD
ref: refs/heads/master</literallayout>
</section>
<section id="Git User Manual_detached-head">
<title>Examining an old version without creating a new branch</title>
<simpara>The <emphasis>git checkout</emphasis> command normally expects a branch head, but will also
accept an arbitrary commit; for example, you can check out the commit
referenced by a tag:</simpara>
<literallayout>$ git checkout v2.6.17
Note: checking out 'v2.6.17'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 427abfa... Linux v2.6.17</literallayout>
<simpara>The HEAD then refers to the SHA-1 of the commit instead of to a branch,
and git branch shows that you are no longer on a branch:</simpara>
<literallayout>$ cat .git/HEAD
427abfa28afedffadfca9dd8b067eb6d36bac53f
$ git branch
* (detached from v2.6.17)
  master</literallayout>
<simpara>In this case we say that the HEAD is "detached".</simpara>
<simpara>This is an easy way to check out a particular version without having to
make up a name for the new branch.   You can still create a new branch
(or tag) for this version later if you decide to.</simpara>
</section>
<section id="Git User Manual_examining-remote-branches">
<title>Examining branches from a remote repository</title>
<simpara>The "master" branch that was created at the time you cloned is a copy
of the HEAD in the repository that you cloned from.  That repository
may also have had other branches, though, and your local repository
keeps branches which track each of those remote branches, called
remote-tracking branches, which you
can view using the <emphasis>-r</emphasis> option to <xref linkend="git-branch(1)" />:</simpara>
<literallayout>$ git branch -r
  origin/HEAD
  origin/html
  origin/maint
  origin/man
  origin/master
  origin/next
  origin/pu
  origin/todo</literallayout>
<simpara>In this example, "origin" is called a remote repository, or "remote"
for short. The branches of this repository are called "remote
branches" from our point of view. The remote-tracking branches listed
above were created based on the remote branches at clone time and will
be updated by <emphasis>git fetch</emphasis> (hence <emphasis>git pull</emphasis>) and <emphasis>git push</emphasis>. See
<xref linkend="Git User Manual_Updating-a-repository-With-git-fetch"/> for details.</simpara>
<simpara>You might want to build on one of these remote-tracking branches
on a branch of your own, just as you would for a tag:</simpara>
<literallayout>$ git checkout -b my-todo-copy origin/todo</literallayout>
<simpara>You can also check out <emphasis>origin/todo</emphasis> directly to examine it or
write a one-off patch.  See <link linkend="Git User Manual_detached-head">detached head</link>.</simpara>
<simpara>Note that the name "origin" is just the name that Git uses by default
to refer to the repository that you cloned from.</simpara>
</section>
<section id="Git User Manual_how-git-stores-references">
<title>Naming branches, tags, and other references</title>
<simpara>Branches, remote-tracking branches, and tags are all references to
commits.  All references are named with a slash-separated path name
starting with <emphasis>refs</emphasis>; the names we've been using so far are actually
shorthand:</simpara>
<itemizedlist>
<listitem>
<simpara>
The branch <emphasis>test</emphasis> is short for <emphasis>refs/heads/test</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
The tag <emphasis>v2.6.18</emphasis> is short for <emphasis>refs/tags/v2.6.18</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>origin/master</emphasis> is short for <emphasis>refs/remotes/origin/master</emphasis>.
</simpara>
</listitem>
</itemizedlist>
<simpara>The full name is occasionally useful if, for example, there ever
exists a tag and a branch with the same name.</simpara>
<simpara>(Newly created refs are actually stored in the <emphasis>.git/refs</emphasis> directory,
under the path given by their name.  However, for efficiency reasons
they may also be packed together in a single file; see
<xref linkend="git-pack-refs(1)" />).</simpara>
<simpara>As another useful shortcut, the "HEAD" of a repository can be referred
to just using the name of that repository.  So, for example, "origin"
is usually a shortcut for the HEAD branch in the repository "origin".</simpara>
<simpara>For the complete list of paths which Git checks for references, and
the order it uses to decide which to choose when there are multiple
references with the same shorthand name, see the "SPECIFYING
REVISIONS" section of <xref linkend="gitrevisions(7)" />.</simpara>
</section>
<section id="Git User Manual_Updating-a-repository-With-git-fetch">
<title>Updating a repository with git fetch</title>
<simpara>After you clone a repository and commit a few changes of your own, you
may wish to check the original repository for updates.</simpara>
<simpara>The <emphasis>git-fetch</emphasis> command, with no arguments, will update all of the
remote-tracking branches to the latest version found in the original
repository.  It will not touch any of your own branches--not even the
"master" branch that was created for you on clone.</simpara>
</section>
<section id="Git User Manual_fetching-branches">
<title>Fetching branches from other repositories</title>
<simpara>You can also track branches from repositories other than the one you
cloned from, using <xref linkend="git-remote(1)" />:</simpara>
<literallayout>$ git remote add staging git://git.kernel.org/.../gregkh/staging.git
$ git fetch staging
...
From git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging
 * [new branch]      master     -&gt; staging/master
 * [new branch]      staging-linus -&gt; staging/staging-linus
 * [new branch]      staging-next -&gt; staging/staging-next</literallayout>
<simpara>New remote-tracking branches will be stored under the shorthand name
that you gave <emphasis>git remote add</emphasis>, in this case <emphasis>staging</emphasis>:</simpara>
<literallayout>$ git branch -r
  origin/HEAD -&gt; origin/master
  origin/master
  staging/master
  staging/staging-linus
  staging/staging-next</literallayout>
<simpara>If you run <emphasis>git fetch &lt;remote&gt;</emphasis> later, the remote-tracking branches
for the named <emphasis>&lt;remote&gt;</emphasis> will be updated.</simpara>
<simpara>If you examine the file <emphasis>.git/config</emphasis>, you will see that Git has added
a new stanza:</simpara>
<literallayout>$ cat .git/config
...
[remote "staging"]
        url = git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging.git
        fetch = +refs/heads/*:refs/remotes/staging/*
...</literallayout>
<simpara>This is what causes Git to track the remote's branches; you may modify
or delete these configuration options by editing <emphasis>.git/config</emphasis> with a
text editor.  (See the "CONFIGURATION FILE" section of
<xref linkend="git-config(1)" /> for details.)</simpara>
</section>
</section>
<section id="Git User Manual_exploring-git-history">
<title>Exploring Git history</title>
<simpara>Git is best thought of as a tool for storing the history of a
collection of files.  It does this by storing compressed snapshots of
the contents of a file hierarchy, together with "commits" which show
the relationships between these snapshots.</simpara>
<simpara>Git provides extremely flexible and fast tools for exploring the
history of a project.</simpara>
<simpara>We start with one specialized tool that is useful for finding the
commit that introduced a bug into a project.</simpara>
<section id="Git User Manual_using-bisect">
<title>How to use bisect to find a regression</title>
<simpara>Suppose version 2.6.18 of your project worked, but the version at
"master" crashes.  Sometimes the best way to find the cause of such a
regression is to perform a brute-force search through the project's
history to find the particular commit that caused the problem.  The
<xref linkend="git-bisect(1)" /> command can help you do this:</simpara>
<literallayout>$ git bisect start
$ git bisect good v2.6.18
$ git bisect bad master
Bisecting: 3537 revisions left to test after this
[65934a9a028b88e83e2b0f8b36618fe503349f8e] BLOCK: Make USB storage depend on SCSI rather than selecting it [try #6]</literallayout>
<simpara>If you run <emphasis>git branch</emphasis> at this point, you'll see that Git has
temporarily moved you in "(no branch)". HEAD is now detached from any
branch and points directly to a commit (with commit id 65934&#8230;) that
is reachable from "master" but not from v2.6.18. Compile and test it,
and see whether it crashes. Assume it does crash. Then:</simpara>
<literallayout>$ git bisect bad
Bisecting: 1769 revisions left to test after this
[7eff82c8b1511017ae605f0c99ac275a7e21b867] i2c-core: Drop useless bitmaskings</literallayout>
<simpara>checks out an older version.  Continue like this, telling Git at each
stage whether the version it gives you is good or bad, and notice
that the number of revisions left to test is cut approximately in
half each time.</simpara>
<simpara>After about 13 tests (in this case), it will output the commit id of
the guilty commit.  You can then examine the commit with
<xref linkend="git-show(1)" />, find out who wrote it, and mail them your bug
report with the commit id.  Finally, run</simpara>
<literallayout>$ git bisect reset</literallayout>
<simpara>to return you to the branch you were on before.</simpara>
<simpara>Note that the version which <emphasis>git bisect</emphasis> checks out for you at each
point is just a suggestion, and you're free to try a different
version if you think it would be a good idea.  For example,
occasionally you may land on a commit that broke something unrelated;
run</simpara>
<literallayout>$ git bisect visualize</literallayout>
<simpara>which will run gitk and label the commit it chose with a marker that
says "bisect".  Choose a safe-looking commit nearby, note its commit
id, and check it out with:</simpara>
<literallayout>$ git reset --hard fb47ddb2db...</literallayout>
<simpara>then test, run <emphasis>bisect good</emphasis> or <emphasis>bisect bad</emphasis> as appropriate, and
continue.</simpara>
<simpara>Instead of <emphasis>git bisect visualize</emphasis> and then <emphasis>git reset --hard
fb47ddb2db...</emphasis>, you might just want to tell Git that you want to skip
the current commit:</simpara>
<literallayout>$ git bisect skip</literallayout>
<simpara>In this case, though, Git may not eventually be able to tell the first
bad one between some first skipped commits and a later bad commit.</simpara>
<simpara>There are also ways to automate the bisecting process if you have a
test script that can tell a good from a bad commit. See
<xref linkend="git-bisect(1)" /> for more information about this and other <emphasis>git
bisect</emphasis> features.</simpara>
</section>
<section id="Git User Manual_naming-commits">
<title>Naming commits</title>
<simpara>We have seen several ways of naming commits already:</simpara>
<itemizedlist>
<listitem>
<simpara>
40-hexdigit object name
</simpara>
</listitem>
<listitem>
<simpara>
branch name: refers to the commit at the head of the given
          branch
</simpara>
</listitem>
<listitem>
<simpara>
tag name: refers to the commit pointed to by the given tag
          (we've seen branches and tags are special cases of
          <link linkend="Git User Manual_how-git-stores-references">references</link>).
</simpara>
</listitem>
<listitem>
<simpara>
HEAD: refers to the head of the current branch
</simpara>
</listitem>
</itemizedlist>
<simpara>There are many more; see the "SPECIFYING REVISIONS" section of the
<xref linkend="gitrevisions(7)" /> man page for the complete list of ways to
name revisions.  Some examples:</simpara>
<literallayout>$ git show fb47ddb2 # the first few characters of the object name
                    # are usually enough to specify it uniquely
$ git show HEAD^    # the parent of the HEAD commit
$ git show HEAD^^   # the grandparent
$ git show HEAD~4   # the great-great-grandparent</literallayout>
<simpara>Recall that merge commits may have more than one parent; by default,
<emphasis>^</emphasis> and <emphasis>~</emphasis> follow the first parent listed in the commit, but you can
also choose:</simpara>
<literallayout>$ git show HEAD^1   # show the first parent of HEAD
$ git show HEAD^2   # show the second parent of HEAD</literallayout>
<simpara>In addition to HEAD, there are several other special names for
commits:</simpara>
<simpara>Merges (to be discussed later), as well as operations such as
<emphasis>git reset</emphasis>, which change the currently checked-out commit, generally
set ORIG_HEAD to the value HEAD had before the current operation.</simpara>
<simpara>The <emphasis>git fetch</emphasis> operation always stores the head of the last fetched
branch in FETCH_HEAD.  For example, if you run <emphasis>git fetch</emphasis> without
specifying a local branch as the target of the operation</simpara>
<literallayout>$ git fetch git://example.com/proj.git theirbranch</literallayout>
<simpara>the fetched commits will still be available from FETCH_HEAD.</simpara>
<simpara>When we discuss merges we'll also see the special name MERGE_HEAD,
which refers to the other branch that we're merging in to the current
branch.</simpara>
<simpara>The <xref linkend="git-rev-parse(1)" /> command is a low-level command that is
occasionally useful for translating some name for a commit to the object
name for that commit:</simpara>
<literallayout>$ git rev-parse origin
e05db0fd4f31dde7005f075a84f96b360d05984b</literallayout>
</section>
<section id="Git User Manual_creating-tags">
<title>Creating tags</title>
<simpara>We can also create a tag to refer to a particular commit; after
running</simpara>
<literallayout>$ git tag stable-1 1b2e1d63ff</literallayout>
<simpara>You can use <emphasis>stable-1</emphasis> to refer to the commit 1b2e1d63ff.</simpara>
<simpara>This creates a "lightweight" tag.  If you would also like to include a
comment with the tag, and possibly sign it cryptographically, then you
should create a tag object instead; see the <xref linkend="git-tag(1)" /> man page
for details.</simpara>
</section>
<section id="Git User Manual_browsing-revisions">
<title>Browsing revisions</title>
<simpara>The <xref linkend="git-log(1)" /> command can show lists of commits.  On its
own, it shows all commits reachable from the parent commit; but you
can also make more specific requests:</simpara>
<literallayout>$ git log v2.5..        # commits since (not reachable from) v2.5
$ git log test..master  # commits reachable from master but not test
$ git log master..test  # ...reachable from test but not master
$ git log master...test # ...reachable from either test or master,
                        #    but not both
$ git log --since="2 weeks ago" # commits from the last 2 weeks
$ git log Makefile      # commits which modify Makefile
$ git log fs/           # ... which modify any file under fs/
$ git log -S'foo()'     # commits which add or remove any file data
                        # matching the string 'foo()'</literallayout>
<simpara>And of course you can combine all of these; the following finds
commits since v2.5 which touch the <emphasis>Makefile</emphasis> or any file under <emphasis>fs</emphasis>:</simpara>
<literallayout>$ git log v2.5.. Makefile fs/</literallayout>
<simpara>You can also ask git log to show patches:</simpara>
<literallayout>$ git log -p</literallayout>
<simpara>See the <emphasis>--pretty</emphasis> option in the <xref linkend="git-log(1)" /> man page for more
display options.</simpara>
<simpara>Note that git log starts with the most recent commit and works
backwards through the parents; however, since Git history can contain
multiple independent lines of development, the particular order that
commits are listed in may be somewhat arbitrary.</simpara>
</section>
<section id="Git User Manual_generating-diffs">
<title>Generating diffs</title>
<simpara>You can generate diffs between any two versions using
<xref linkend="git-diff(1)" />:</simpara>
<literallayout>$ git diff master..test</literallayout>
<simpara>That will produce the diff between the tips of the two branches.  If
you'd prefer to find the diff from their common ancestor to test, you
can use three dots instead of two:</simpara>
<literallayout>$ git diff master...test</literallayout>
<simpara>Sometimes what you want instead is a set of patches; for this you can
use <xref linkend="git-format-patch(1)" />:</simpara>
<literallayout>$ git format-patch master..test</literallayout>
<simpara>will generate a file with a patch for each commit reachable from test
but not from master.</simpara>
</section>
<section id="Git User Manual_viewing-old-file-versions">
<title>Viewing old file versions</title>
<simpara>You can always view an old version of a file by just checking out the
correct revision first.  But sometimes it is more convenient to be
able to view an old version of a single file without checking
anything out; this command does that:</simpara>
<literallayout>$ git show v2.5:fs/locks.c</literallayout>
<simpara>Before the colon may be anything that names a commit, and after it
may be any path to a file tracked by Git.</simpara>
</section>
<section id="Git User Manual_history-examples">
<title>Examples</title>
<section id="Git User Manual_counting-commits-on-a-branch">
<title>Counting the number of commits on a branch</title>
<simpara>Suppose you want to know how many commits you've made on <emphasis>mybranch</emphasis>
since it diverged from <emphasis>origin</emphasis>:</simpara>
<literallayout>$ git log --pretty=oneline origin..mybranch | wc -l</literallayout>
<simpara>Alternatively, you may often see this sort of thing done with the
lower-level command <xref linkend="git-rev-list(1)" />, which just lists the SHA-1's
of all the given commits:</simpara>
<literallayout>$ git rev-list origin..mybranch | wc -l</literallayout>
</section>
<section id="Git User Manual_checking-for-equal-branches">
<title>Check whether two branches point at the same history</title>
<simpara>Suppose you want to check whether two branches point at the same point
in history.</simpara>
<literallayout>$ git diff origin..master</literallayout>
<simpara>will tell you whether the contents of the project are the same at the
two branches; in theory, however, it's possible that the same project
contents could have been arrived at by two different historical
routes.  You could compare the object names:</simpara>
<literallayout>$ git rev-list origin
e05db0fd4f31dde7005f075a84f96b360d05984b
$ git rev-list master
e05db0fd4f31dde7005f075a84f96b360d05984b</literallayout>
<simpara>Or you could recall that the <emphasis>...</emphasis> operator selects all commits
reachable from either one reference or the other but not
both; so</simpara>
<literallayout>$ git log origin...master</literallayout>
<simpara>will return no commits when the two branches are equal.</simpara>
</section>
<section id="Git User Manual_finding-tagged-descendants">
<title>Find first tagged version including a given fix</title>
<simpara>Suppose you know that the commit e05db0fd fixed a certain problem.
You'd like to find the earliest tagged release that contains that
fix.</simpara>
<simpara>Of course, there may be more than one answer--if the history branched
after commit e05db0fd, then there could be multiple "earliest" tagged
releases.</simpara>
<simpara>You could just visually inspect the commits since e05db0fd:</simpara>
<literallayout>$ gitk e05db0fd..</literallayout>
<simpara>or you can use <xref linkend="git-name-rev(1)" />, which will give the commit a
name based on any tag it finds pointing to one of the commit's
descendants:</simpara>
<literallayout>$ git name-rev --tags e05db0fd
e05db0fd tags/v1.5.0-rc1^0~23</literallayout>
<simpara>The <xref linkend="git-describe(1)" /> command does the opposite, naming the
revision using a tag on which the given commit is based:</simpara>
<literallayout>$ git describe e05db0fd
v1.5.0-rc0-260-ge05db0f</literallayout>
<simpara>but that may sometimes help you guess which tags might come after the
given commit.</simpara>
<simpara>If you just want to verify whether a given tagged version contains a
given commit, you could use <xref linkend="git-merge-base(1)" />:</simpara>
<literallayout>$ git merge-base e05db0fd v1.5.0-rc1
e05db0fd4f31dde7005f075a84f96b360d05984b</literallayout>
<simpara>The merge-base command finds a common ancestor of the given commits,
and always returns one or the other in the case where one is a
descendant of the other; so the above output shows that e05db0fd
actually is an ancestor of v1.5.0-rc1.</simpara>
<simpara>Alternatively, note that</simpara>
<literallayout>$ git log v1.5.0-rc1..e05db0fd</literallayout>
<simpara>will produce empty output if and only if v1.5.0-rc1 includes e05db0fd,
because it outputs only commits that are not reachable from v1.5.0-rc1.</simpara>
<simpara>As yet another alternative, the <xref linkend="git-show-branch(1)" /> command lists
the commits reachable from its arguments with a display on the left-hand
side that indicates which arguments that commit is reachable from.
So, if you run something like</simpara>
<literallayout>$ git show-branch e05db0fd v1.5.0-rc0 v1.5.0-rc1 v1.5.0-rc2
! [e05db0fd] Fix warnings in sha1_file.c - use C99 printf format if
available
 ! [v1.5.0-rc0] GIT v1.5.0 preview
  ! [v1.5.0-rc1] GIT v1.5.0-rc1
   ! [v1.5.0-rc2] GIT v1.5.0-rc2
...</literallayout>
<simpara>then a line like</simpara>
<literallayout>+ ++ [e05db0fd] Fix warnings in sha1_file.c - use C99 printf format if
available</literallayout>
<simpara>shows that e05db0fd is reachable from itself, from v1.5.0-rc1,
and from v1.5.0-rc2, and not from v1.5.0-rc0.</simpara>
</section>
<section id="Git User Manual_showing-commits-unique-to-a-branch">
<title>Showing commits unique to a given branch</title>
<simpara>Suppose you would like to see all the commits reachable from the branch
head named <emphasis>master</emphasis> but not from any other head in your repository.</simpara>
<simpara>We can list all the heads in this repository with
<xref linkend="git-show-ref(1)" />:</simpara>
<literallayout>$ git show-ref --heads
bf62196b5e363d73353a9dcf094c59595f3153b7 refs/heads/core-tutorial
db768d5504c1bb46f63ee9d6e1772bd047e05bf9 refs/heads/maint
a07157ac624b2524a059a3414e99f6f44bebc1e7 refs/heads/master
24dbc180ea14dc1aebe09f14c8ecf32010690627 refs/heads/tutorial-2
1e87486ae06626c2f31eaa63d26fc0fd646c8af2 refs/heads/tutorial-fixes</literallayout>
<simpara>We can get just the branch-head names, and remove <emphasis>master</emphasis>, with
the help of the standard utilities cut and grep:</simpara>
<literallayout>$ git show-ref --heads | cut -d' ' -f2 | grep -v '^refs/heads/master'
refs/heads/core-tutorial
refs/heads/maint
refs/heads/tutorial-2
refs/heads/tutorial-fixes</literallayout>
<simpara>And then we can ask to see all the commits reachable from master
but not from these other heads:</simpara>
<literallayout>$ gitk master --not $( git show-ref --heads | cut -d' ' -f2 |
                                grep -v '^refs/heads/master' )</literallayout>
<simpara>Obviously, endless variations are possible; for example, to see all
commits reachable from some head but not from any tag in the repository:</simpara>
<literallayout>$ gitk $( git show-ref --heads ) --not  $( git show-ref --tags )</literallayout>
<simpara>(See <xref linkend="gitrevisions(7)" /> for explanations of commit-selecting
syntax such as <emphasis>--not</emphasis>.)</simpara>
</section>
<section id="Git User Manual_making-a-release">
<title>Creating a changelog and tarball for a software release</title>
<simpara>The <xref linkend="git-archive(1)" /> command can create a tar or zip archive from
any version of a project; for example:</simpara>
<literallayout>$ git archive -o latest.tar.gz --prefix=project/ HEAD</literallayout>
<simpara>will use HEAD to produce a gzipped tar archive in which each filename
is preceded by <emphasis>project/</emphasis>.  The output file format is inferred from
the output file extension if possible, see <xref linkend="git-archive(1)" /> for
details.</simpara>
<simpara>Versions of Git older than 1.7.7 don't know about the <emphasis>tar.gz</emphasis> format,
you'll need to use gzip explicitly:</simpara>
<literallayout>$ git archive --format=tar --prefix=project/ HEAD | gzip &gt;latest.tar.gz</literallayout>
<simpara>If you're releasing a new version of a software project, you may want
to simultaneously make a changelog to include in the release
announcement.</simpara>
<simpara>Linus Torvalds, for example, makes new kernel releases by tagging them,
then running:</simpara>
<literallayout>$ release-script 2.6.12 2.6.13-rc6 2.6.13-rc7</literallayout>
<simpara>where release-script is a shell script that looks like:</simpara>
<literallayout>#!/bin/sh
stable="$1"
last="$2"
new="$3"
echo "# git tag v$new"
echo "git archive --prefix=linux-$new/ v$new | gzip -9 &gt; ../linux-$new.tar.gz"
echo "git diff v$stable v$new | gzip -9 &gt; ../patch-$new.gz"
echo "git log --no-merges v$new ^v$last &gt; ../ChangeLog-$new"
echo "git shortlog --no-merges v$new ^v$last &gt; ../ShortLog"
echo "git diff --stat --summary -M v$last v$new &gt; ../diffstat-$new"</literallayout>
<simpara>and then he just cut-and-pastes the output commands after verifying that
they look OK.</simpara>
</section>
<section id="Git User Manual_Finding-commits-With-given-Content">
<title>Finding commits referencing a file with given content</title>
<simpara>Somebody hands you a copy of a file, and asks which commits modified a
file such that it contained the given content either before or after the
commit.  You can find out with this:</simpara>
<literallayout>$  git log --raw --abbrev=40 --pretty=oneline |
        grep -B 1 `git hash-object filename`</literallayout>
<simpara>Figuring out why this works is left as an exercise to the (advanced)
student.  The <xref linkend="git-log(1)" />, <xref linkend="git-diff-tree(1)" />, and
<xref linkend="git-hash-object(1)" /> man pages may prove helpful.</simpara>
</section>
</section>
</section>
<section id="Git User Manual_Developing-With-git">
<title>Developing with Git</title>
<section id="Git User Manual_telling-git-your-name">
<title>Telling Git your name</title>
<simpara>Before creating any commits, you should introduce yourself to Git.
The easiest way to do so is to use <xref linkend="git-config(1)" />:</simpara>
<literallayout>$ git config --global user.name 'Your Name Comes Here'
$ git config --global user.email 'you@yourdomain.example.com'</literallayout>
<simpara>Which will add the following to a file named <emphasis>.gitconfig</emphasis> in your
home directory:</simpara>
<literallayout>[user]
        name = Your Name Comes Here
        email = you@yourdomain.example.com</literallayout>
<simpara>See the "CONFIGURATION FILE" section of <xref linkend="git-config(1)" /> for
details on the configuration file.  The file is plain text, so you can
also edit it with your favorite editor.</simpara>
</section>
<section id="Git User Manual_creating-a-new-repository">
<title>Creating a new repository</title>
<simpara>Creating a new repository from scratch is very easy:</simpara>
<literallayout>$ mkdir project
$ cd project
$ git init</literallayout>
<simpara>If you have some initial content (say, a tarball):</simpara>
<literallayout>$ tar xzvf project.tar.gz
$ cd project
$ git init
$ git add . # include everything below ./ in the first commit:
$ git commit</literallayout>
</section>
<section id="Git User Manual_how-to-make-a-commit">
<title>How to make a commit</title>
<simpara>Creating a new commit takes three steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Making some changes to the working directory using your
           favorite editor.
</simpara>
</listitem>
<listitem>
<simpara>
Telling Git about your changes.
</simpara>
</listitem>
<listitem>
<simpara>
Creating the commit using the content you told Git about
           in step 2.
</simpara>
</listitem>
</orderedlist>
<simpara>In practice, you can interleave and repeat steps 1 and 2 as many
times as you want: in order to keep track of what you want committed
at step 3, Git maintains a snapshot of the tree's contents in a
special staging area called "the index."</simpara>
<simpara>At the beginning, the content of the index will be identical to
that of the HEAD.  The command <emphasis>git diff --cached</emphasis>, which shows
the difference between the HEAD and the index, should therefore
produce no output at that point.</simpara>
<simpara>Modifying the index is easy:</simpara>
<simpara>To update the index with the contents of a new or modified file, use</simpara>
<literallayout>$ git add path/to/file</literallayout>
<simpara>To remove a file from the index and from the working tree, use</simpara>
<literallayout>$ git rm path/to/file</literallayout>
<simpara>After each step you can verify that</simpara>
<literallayout>$ git diff --cached</literallayout>
<simpara>always shows the difference between the HEAD and the index file--this
is what you'd commit if you created the commit now--and that</simpara>
<literallayout>$ git diff</literallayout>
<simpara>shows the difference between the working tree and the index file.</simpara>
<simpara>Note that <emphasis>git add</emphasis> always adds just the current contents of a file
to the index; further changes to the same file will be ignored unless
you run <emphasis>git add</emphasis> on the file again.</simpara>
<simpara>When you're ready, just run</simpara>
<literallayout>$ git commit</literallayout>
<simpara>and Git will prompt you for a commit message and then create the new
commit.  Check to make sure it looks like what you expected with</simpara>
<literallayout>$ git show</literallayout>
<simpara>As a special shortcut,</simpara>
<literallayout>$ git commit -a</literallayout>
<simpara>will update the index with any files that you've modified or removed
and create a commit, all in one step.</simpara>
<simpara>A number of commands are useful for keeping track of what you're
about to commit:</simpara>
<literallayout>$ git diff --cached # difference between HEAD and the index; what
                    # would be committed if you ran "commit" now.
$ git diff          # difference between the index file and your
                    # working directory; changes that would not
                    # be included if you ran "commit" now.
$ git diff HEAD     # difference between HEAD and working tree; what
                    # would be committed if you ran "commit -a" now.
$ git status        # a brief per-file summary of the above.</literallayout>
<simpara>You can also use <xref linkend="git-gui(1)" /> to create commits, view changes in
the index and the working tree files, and individually select diff hunks
for inclusion in the index (by right-clicking on the diff hunk and
choosing "Stage Hunk For Commit").</simpara>
</section>
<section id="Git User Manual_creating-good-commit-messages">
<title>Creating good commit messages</title>
<simpara>Though not required, it's a good idea to begin the commit message
with a single short (less than 50 character) line summarizing the
change, followed by a blank line and then a more thorough
description.  The text up to the first blank line in a commit
message is treated as the commit title, and that title is used
throughout Git.  For example, <xref linkend="git-format-patch(1)" /> turns a
commit into email, and it uses the title on the Subject line and the
rest of the commit in the body.</simpara>
</section>
<section id="Git User Manual_ignoring-files">
<title>Ignoring files</title>
<simpara>A project will often generate files that you do <emphasis>not</emphasis> want to track with Git.
This typically includes files generated by a build process or temporary
backup files made by your editor. Of course, <emphasis>not</emphasis> tracking files with Git
is just a matter of <emphasis>not</emphasis> calling <emphasis>git add</emphasis> on them. But it quickly becomes
annoying to have these untracked files lying around; e.g. they make
<emphasis>git add .</emphasis> practically useless, and they keep showing up in the output of
<emphasis>git status</emphasis>.</simpara>
<simpara>You can tell Git to ignore certain files by creating a file called
<emphasis>.gitignore</emphasis> in the top level of your working directory, with contents
such as:</simpara>
<literallayout># Lines starting with '#' are considered comments.
# Ignore any file named foo.txt.
foo.txt
# Ignore (generated) html files,
*.html
# except foo.html which is maintained by hand.
!foo.html
# Ignore objects and archives.
*.[oa]</literallayout>
<simpara>See <xref linkend="gitignore(5)" /> for a detailed explanation of the syntax.  You can
also place .gitignore files in other directories in your working tree, and they
will apply to those directories and their subdirectories.  The <emphasis>.gitignore</emphasis>
files can be added to your repository like any other files (just run <emphasis>git add
.gitignore</emphasis> and <emphasis>git commit</emphasis>, as usual), which is convenient when the exclude
patterns (such as patterns matching build output files) would also make sense
for other users who clone your repository.</simpara>
<simpara>If you wish the exclude patterns to affect only certain repositories
(instead of every repository for a given project), you may instead put
them in a file in your repository named <emphasis>.git/info/exclude</emphasis>, or in any
file specified by the <emphasis>core.excludesFile</emphasis> configuration variable.
Some Git commands can also take exclude patterns directly on the
command line.  See <xref linkend="gitignore(5)" /> for the details.</simpara>
</section>
<section id="Git User Manual_how-to-merge">
<title>How to merge</title>
<simpara>You can rejoin two diverging branches of development using
<xref linkend="git-merge(1)" />:</simpara>
<literallayout>$ git merge branchname</literallayout>
<simpara>merges the development in the branch <emphasis>branchname</emphasis> into the current
branch.</simpara>
<simpara>A merge is made by combining the changes made in <emphasis>branchname</emphasis> and the
changes made up to the latest commit in your current branch since
their histories forked. The work tree is overwritten by the result of
the merge when this combining is done cleanly, or overwritten by a
half-merged results when this combining results in conflicts.
Therefore, if you have uncommitted changes touching the same files as
the ones impacted by the merge, Git will refuse to proceed. Most of
the time, you will want to commit your changes before you can merge,
and if you don't, then <xref linkend="git-stash(1)" /> can take these changes
away while you're doing the merge, and reapply them afterwards.</simpara>
<simpara>If the changes are independent enough, Git will automatically complete
the merge and commit the result (or reuse an existing commit in case
of <link linkend="Git User Manual_fast-forwards">fast-forward</link>, see below). On the other hand,
if there are conflicts--for example, if the same file is
modified in two different ways in the remote branch and the local
branch--then you are warned; the output may look something like this:</simpara>
<literallayout>$ git merge next
 100% (4/4) done
Auto-merged file.txt
CONFLICT (content): Merge conflict in file.txt
Automatic merge failed; fix conflicts and then commit the result.</literallayout>
<simpara>Conflict markers are left in the problematic files, and after
you resolve the conflicts manually, you can update the index
with the contents and run Git commit, as you normally would when
creating a new file.</simpara>
<simpara>If you examine the resulting commit using gitk, you will see that it
has two parents, one pointing to the top of the current branch, and
one to the top of the other branch.</simpara>
</section>
<section id="Git User Manual_resolving-a-merge">
<title>Resolving a merge</title>
<simpara>When a merge isn't resolved automatically, Git leaves the index and
the working tree in a special state that gives you all the
information you need to help resolve the merge.</simpara>
<simpara>Files with conflicts are marked specially in the index, so until you
resolve the problem and update the index, <xref linkend="git-commit(1)" /> will
fail:</simpara>
<literallayout>$ git commit
file.txt: needs merge</literallayout>
<simpara>Also, <xref linkend="git-status(1)" /> will list those files as "unmerged", and the
files with conflicts will have conflict markers added, like this:</simpara>
<literallayout>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:file.txt
Hello world
=======
Goodbye
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 77976da35a11db4580b80ae27e8d65caf5208086:file.txt</literallayout>
<simpara>All you need to do is edit the files to resolve the conflicts, and then</simpara>
<literallayout>$ git add file.txt
$ git commit</literallayout>
<simpara>Note that the commit message will already be filled in for you with
some information about the merge.  Normally you can just use this
default message unchanged, but you may add additional commentary of
your own if desired.</simpara>
<simpara>The above is all you need to know to resolve a simple merge.  But Git
also provides more information to help resolve conflicts:</simpara>
<section id="Git User Manual_conflict-resolution">
<title>Getting conflict-resolution help during a merge</title>
<simpara>All of the changes that Git was able to merge automatically are
already added to the index file, so <xref linkend="git-diff(1)" /> shows only
the conflicts.  It uses an unusual syntax:</simpara>
<literallayout>$ git diff
diff --cc file.txt
index 802992c,2b60207..0000000
--- a/file.txt
+++ b/file.txt
@@@ -1,1 -1,1 +1,5 @@@
++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:file.txt
 +Hello world
++=======
+ Goodbye
++&gt;&gt;&gt;&gt;&gt;&gt;&gt; 77976da35a11db4580b80ae27e8d65caf5208086:file.txt</literallayout>
<simpara>Recall that the commit which will be committed after we resolve this
conflict will have two parents instead of the usual one: one parent
will be HEAD, the tip of the current branch; the other will be the
tip of the other branch, which is stored temporarily in MERGE_HEAD.</simpara>
<simpara>During the merge, the index holds three versions of each file.  Each of
these three "file stages" represents a different version of the file:</simpara>
<literallayout>$ git show :1:file.txt  # the file in a common ancestor of both branches
$ git show :2:file.txt  # the version from HEAD.
$ git show :3:file.txt  # the version from MERGE_HEAD.</literallayout>
<simpara>When you ask <xref linkend="git-diff(1)" /> to show the conflicts, it runs a
three-way diff between the conflicted merge results in the work tree with
stages 2 and 3 to show only hunks whose contents come from both sides,
mixed (in other words, when a hunk's merge results come only from stage 2,
that part is not conflicting and is not shown.  Same for stage 3).</simpara>
<simpara>The diff above shows the differences between the working-tree version of
file.txt and the stage 2 and stage 3 versions.  So instead of preceding
each line by a single <emphasis>+</emphasis> or <emphasis>-</emphasis>, it now uses two columns: the first
column is used for differences between the first parent and the working
directory copy, and the second for differences between the second parent
and the working directory copy.  (See the "COMBINED DIFF FORMAT" section
of <xref linkend="git-diff-files(1)" /> for a details of the format.)</simpara>
<simpara>After resolving the conflict in the obvious way (but before updating the
index), the diff will look like:</simpara>
<literallayout>$ git diff
diff --cc file.txt
index 802992c,2b60207..0000000
--- a/file.txt
+++ b/file.txt
@@@ -1,1 -1,1 +1,1 @@@
- Hello world
 -Goodbye
++Goodbye world</literallayout>
<simpara>This shows that our resolved version deleted "Hello world" from the
first parent, deleted "Goodbye" from the second parent, and added
"Goodbye world", which was previously absent from both.</simpara>
<simpara>Some special diff options allow diffing the working directory against
any of these stages:</simpara>
<literallayout>$ git diff -1 file.txt          # diff against stage 1
$ git diff --base file.txt      # same as the above
$ git diff -2 file.txt          # diff against stage 2
$ git diff --ours file.txt      # same as the above
$ git diff -3 file.txt          # diff against stage 3
$ git diff --theirs file.txt    # same as the above.</literallayout>
<simpara>The <xref linkend="git-log(1)" /> and <xref linkend="gitk(1)" /> commands also provide special help
for merges:</simpara>
<literallayout>$ git log --merge
$ gitk --merge</literallayout>
<simpara>These will display all commits which exist only on HEAD or on
MERGE_HEAD, and which touch an unmerged file.</simpara>
<simpara>You may also use <xref linkend="git-mergetool(1)" />, which lets you merge the
unmerged files using external tools such as Emacs or kdiff3.</simpara>
<simpara>Each time you resolve the conflicts in a file and update the index:</simpara>
<literallayout>$ git add file.txt</literallayout>
<simpara>the different stages of that file will be "collapsed", after which
<emphasis>git diff</emphasis> will (by default) no longer show diffs for that file.</simpara>
</section>
</section>
<section id="Git User Manual_undoing-a-merge">
<title>Undoing a merge</title>
<simpara>If you get stuck and decide to just give up and throw the whole mess
away, you can always return to the pre-merge state with</simpara>
<literallayout>$ git reset --hard HEAD</literallayout>
<simpara>Or, if you've already committed the merge that you want to throw away,</simpara>
<literallayout>$ git reset --hard ORIG_HEAD</literallayout>
<simpara>However, this last command can be dangerous in some cases--never
throw away a commit you have already committed if that commit may
itself have been merged into another branch, as doing so may confuse
further merges.</simpara>
</section>
<section id="Git User Manual_fast-forwards">
<title>Fast-forward merges</title>
<simpara>There is one special case not mentioned above, which is treated
differently.  Normally, a merge results in a merge commit, with two
parents, one pointing at each of the two lines of development that
were merged.</simpara>
<simpara>However, if the current branch is an ancestor of the other--so every commit
present in the current branch is already contained in the other branch--then Git
just performs a "fast-forward"; the head of the current branch is moved forward
to point at the head of the merged-in branch, without any new commits being
created.</simpara>
</section>
<section id="Git User Manual_fixing-mistakes">
<title>Fixing mistakes</title>
<simpara>If you've messed up the working tree, but haven't yet committed your
mistake, you can return the entire working tree to the last committed
state with</simpara>
<literallayout>$ git reset --hard HEAD</literallayout>
<simpara>If you make a commit that you later wish you hadn't, there are two
fundamentally different ways to fix the problem:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
You can create a new commit that undoes whatever was done
        by the old commit.  This is the correct thing if your
        mistake has already been made public.
</simpara>
</listitem>
<listitem>
<simpara>
You can go back and modify the old commit.  You should
        never do this if you have already made the history public;
        Git does not normally expect the "history" of a project to
        change, and cannot correctly perform repeated merges from
        a branch that has had its history changed.
</simpara>
</listitem>
</orderedlist>
<section id="Git User Manual_reverting-a-commit">
<title>Fixing a mistake with a new commit</title>
<simpara>Creating a new commit that reverts an earlier change is very easy;
just pass the <xref linkend="git-revert(1)" /> command a reference to the bad
commit; for example, to revert the most recent commit:</simpara>
<literallayout>$ git revert HEAD</literallayout>
<simpara>This will create a new commit which undoes the change in HEAD.  You
will be given a chance to edit the commit message for the new commit.</simpara>
<simpara>You can also revert an earlier change, for example, the next-to-last:</simpara>
<literallayout>$ git revert HEAD^</literallayout>
<simpara>In this case Git will attempt to undo the old change while leaving
intact any changes made since then.  If more recent changes overlap
with the changes to be reverted, then you will be asked to fix
conflicts manually, just as in the case of <link linkend="Git User Manual_resolving-a-merge">resolving a merge</link>.</simpara>
</section>
<section id="Git User Manual_fixing-a-mistake-by-rewriting-history">
<title>Fixing a mistake by rewriting history</title>
<simpara>If the problematic commit is the most recent commit, and you have not
yet made that commit public, then you may just
<link linkend="Git User Manual_undoing-a-merge">destroy it using <emphasis>git reset</emphasis></link>.</simpara>
<simpara>Alternatively, you
can edit the working directory and update the index to fix your
mistake, just as if you were going to <link linkend="Git User Manual_how-to-make-a-commit">create a new commit</link>, then run</simpara>
<literallayout>$ git commit --amend</literallayout>
<simpara>which will replace the old commit by a new commit incorporating your
changes, giving you a chance to edit the old commit message first.</simpara>
<simpara>Again, you should never do this to a commit that may already have
been merged into another branch; use <xref linkend="git-revert(1)" /> instead in
that case.</simpara>
<simpara>It is also possible to replace commits further back in the history, but
this is an advanced topic to be left for
<link linkend="Git User Manual_cleaning-up-history">another chapter</link>.</simpara>
</section>
<section id="Git User Manual_checkout-of-path">
<title>Checking out an old version of a file</title>
<simpara>In the process of undoing a previous bad change, you may find it
useful to check out an older version of a particular file using
<xref linkend="git-checkout(1)" />.  We've used <emphasis>git checkout</emphasis> before to switch
branches, but it has quite different behavior if it is given a path
name: the command</simpara>
<literallayout>$ git checkout HEAD^ path/to/file</literallayout>
<simpara>replaces path/to/file by the contents it had in the commit HEAD^, and
also updates the index to match.  It does not change branches.</simpara>
<simpara>If you just want to look at an old version of the file, without
modifying the working directory, you can do that with
<xref linkend="git-show(1)" />:</simpara>
<literallayout>$ git show HEAD^:path/to/file</literallayout>
<simpara>which will display the given version of the file.</simpara>
</section>
<section id="Git User Manual_interrupted-work">
<title>Temporarily setting aside work in progress</title>
<simpara>While you are in the middle of working on something complicated, you
find an unrelated but obvious and trivial bug.  You would like to fix it
before continuing.  You can use <xref linkend="git-stash(1)" /> to save the current
state of your work, and after fixing the bug (or, optionally after doing
so on a different branch and then coming back), unstash the
work-in-progress changes.</simpara>
<literallayout>$ git stash save "work in progress for foo feature"</literallayout>
<simpara>This command will save your changes away to the <emphasis>stash</emphasis>, and
reset your working tree and the index to match the tip of your
current branch.  Then you can make your fix as usual.</simpara>
<literallayout>... edit and test ...
$ git commit -a -m "blorpl: typofix"</literallayout>
<simpara>After that, you can go back to what you were working on with
<emphasis>git stash pop</emphasis>:</simpara>
<literallayout>$ git stash pop</literallayout>
</section>
</section>
<section id="Git User Manual_ensuring-good-performance">
<title>Ensuring good performance</title>
<simpara>On large repositories, Git depends on compression to keep the history
information from taking up too much space on disk or in memory.  Some
Git commands may automatically run <xref linkend="git-gc(1)" />, so you don't
have to worry about running it manually.  However, compressing a large
repository may take a while, so you may want to call <emphasis>gc</emphasis> explicitly
to avoid automatic compression kicking in when it is not convenient.</simpara>
</section>
<section id="Git User Manual_ensuring-reliability">
<title>Ensuring reliability</title>
<section id="Git User Manual_checking-for-corruption">
<title>Checking the repository for corruption</title>
<simpara>The <xref linkend="git-fsck(1)" /> command runs a number of self-consistency checks
on the repository, and reports on any problems.  This may take some
time.</simpara>
<literallayout>$ git fsck
dangling commit 7281251ddd2a61e38657c827739c57015671a6b3
dangling commit 2706a059f258c6b245f298dc4ff2ccd30ec21a63
dangling commit 13472b7c4b80851a1bc551779171dcb03655e9b5
dangling blob 218761f9d90712d37a9c5e36f406f92202db07eb
dangling commit bf093535a34a4d35731aa2bd90fe6b176302f14f
dangling commit 8e4bec7f2ddaa268bef999853c25755452100f8e
dangling tree d50bb86186bf27b681d25af89d3b5b68382e4085
dangling tree b24c2473f1fd3d91352a624795be026d64c8841f
...</literallayout>
<simpara>You will see informational messages on dangling objects. They are objects
that still exist in the repository but are no longer referenced by any of
your branches, and can (and will) be removed after a while with <emphasis>gc</emphasis>.
You can run <emphasis>git fsck --no-dangling</emphasis> to suppress these messages, and still
view real errors.</simpara>
</section>
<section id="Git User Manual_recovering-lost-changes">
<title>Recovering lost changes</title>
<section id="Git User Manual_reflogs">
<title>Reflogs</title>
<simpara>Say you modify a branch with <link linkend="Git User Manual_fixing-mistakes"><emphasis>git reset --hard</emphasis></link>,
and then realize that the branch was the only reference you had to
that point in history.</simpara>
<simpara>Fortunately, Git also keeps a log, called a "reflog", of all the
previous values of each branch.  So in this case you can still find the
old history using, for example,</simpara>
<literallayout>$ git log master@{1}</literallayout>
<simpara>This lists the commits reachable from the previous version of the
<emphasis>master</emphasis> branch head.  This syntax can be used with any Git command
that accepts a commit, not just with <emphasis>git log</emphasis>.  Some other examples:</simpara>
<literallayout>$ git show master@{2}           # See where the branch pointed 2,
$ git show master@{3}           # 3, ... changes ago.
$ gitk master@{yesterday}       # See where it pointed yesterday,
$ gitk master@{"1 week ago"}    # ... or last week
$ git log --walk-reflogs master # show reflog entries for master</literallayout>
<simpara>A separate reflog is kept for the HEAD, so</simpara>
<literallayout>$ git show HEAD@{"1 week ago"}</literallayout>
<simpara>will show what HEAD pointed to one week ago, not what the current branch
pointed to one week ago.  This allows you to see the history of what
you've checked out.</simpara>
<simpara>The reflogs are kept by default for 30 days, after which they may be
pruned.  See <xref linkend="git-reflog(1)" /> and <xref linkend="git-gc(1)" /> to learn
how to control this pruning, and see the "SPECIFYING REVISIONS"
section of <xref linkend="gitrevisions(7)" /> for details.</simpara>
<simpara>Note that the reflog history is very different from normal Git history.
While normal history is shared by every repository that works on the
same project, the reflog history is not shared: it tells you only about
how the branches in your local repository have changed over time.</simpara>
</section>
<section id="dangling-object-recovery">
<title>Examining dangling objects</title>
<simpara>In some situations the reflog may not be able to save you.  For example,
suppose you delete a branch, then realize you need the history it
contained.  The reflog is also deleted; however, if you have not yet
pruned the repository, then you may still be able to find the lost
commits in the dangling objects that <emphasis>git fsck</emphasis> reports.  See
<xref linkend="Git User Manual_dangling-objects"/> for the details.</simpara>
<literallayout>$ git fsck
dangling commit 7281251ddd2a61e38657c827739c57015671a6b3
dangling commit 2706a059f258c6b245f298dc4ff2ccd30ec21a63
dangling commit 13472b7c4b80851a1bc551779171dcb03655e9b5
...</literallayout>
<simpara>You can examine
one of those dangling commits with, for example,</simpara>
<literallayout>$ gitk 7281251ddd --not --all</literallayout>
<simpara>which does what it sounds like: it says that you want to see the commit
history that is described by the dangling commit(s), but not the
history that is described by all your existing branches and tags.  Thus
you get exactly the history reachable from that commit that is lost.
(And notice that it might not be just one commit: we only report the
"tip of the line" as being dangling, but there might be a whole deep
and complex commit history that was dropped.)</simpara>
<simpara>If you decide you want the history back, you can always create a new
reference pointing to it, for example, a new branch:</simpara>
<literallayout>$ git branch recovered-branch 7281251ddd</literallayout>
<simpara>Other types of dangling objects (blobs and trees) are also possible, and
dangling objects can arise in other situations.</simpara>
</section>
</section>
</section>
</section>
<section id="Git User Manual_sharing-development">
<title>Sharing development with others</title>
<section id="Git User Manual_getting-updates-With-git-pull">
<title>Getting updates with git pull</title>
<simpara>After you clone a repository and commit a few changes of your own, you
may wish to check the original repository for updates and merge them
into your own work.</simpara>
<simpara>We have already seen <link linkend="Git User Manual_Updating-a-repository-With-git-fetch">how to keep remote-tracking branches up to date</link> with <xref linkend="git-fetch(1)" />,
and how to merge two branches.  So you can merge in changes from the
original repository's master branch with:</simpara>
<literallayout>$ git fetch
$ git merge origin/master</literallayout>
<simpara>However, the <xref linkend="git-pull(1)" /> command provides a way to do this in
one step:</simpara>
<literallayout>$ git pull origin master</literallayout>
<simpara>In fact, if you have <emphasis>master</emphasis> checked out, then this branch has been
configured by <emphasis>git clone</emphasis> to get changes from the HEAD branch of the
origin repository.  So often you can
accomplish the above with just a simple</simpara>
<literallayout>$ git pull</literallayout>
<simpara>This command will fetch changes from the remote branches to your
remote-tracking branches <emphasis>origin/*</emphasis>, and merge the default branch into
the current branch.</simpara>
<simpara>More generally, a branch that is created from a remote-tracking branch
will pull
by default from that branch.  See the descriptions of the
<emphasis>branch.&lt;name&gt;.remote</emphasis> and <emphasis>branch.&lt;name&gt;.merge</emphasis> options in
<xref linkend="git-config(1)" />, and the discussion of the <emphasis>--track</emphasis> option in
<xref linkend="git-checkout(1)" />, to learn how to control these defaults.</simpara>
<simpara>In addition to saving you keystrokes, <emphasis>git pull</emphasis> also helps you by
producing a default commit message documenting the branch and
repository that you pulled from.</simpara>
<simpara>(But note that no such commit will be created in the case of a
<link linkend="Git User Manual_fast-forwards">fast-forward</link>; instead, your branch will just be
updated to point to the latest commit from the upstream branch.)</simpara>
<simpara>The <emphasis>git pull</emphasis> command can also be given <emphasis>.</emphasis> as the "remote" repository,
in which case it just merges in a branch from the current repository; so
the commands</simpara>
<literallayout>$ git pull . branch
$ git merge branch</literallayout>
<simpara>are roughly equivalent.</simpara>
</section>
<section id="Git User Manual_submitting-patches">
<title>Submitting patches to a project</title>
<simpara>If you just have a few changes, the simplest way to submit them may
just be to send them as patches in email:</simpara>
<simpara>First, use <xref linkend="git-format-patch(1)" />; for example:</simpara>
<literallayout>$ git format-patch origin</literallayout>
<simpara>will produce a numbered series of files in the current directory, one
for each patch in the current branch but not in <emphasis>origin/HEAD</emphasis>.</simpara>
<simpara><emphasis>git format-patch</emphasis> can include an initial "cover letter". You can insert
commentary on individual patches after the three dash line which
<emphasis>format-patch</emphasis> places after the commit message but before the patch
itself.  If you use <emphasis>git notes</emphasis> to track your cover letter material,
<emphasis>git format-patch --notes</emphasis> will include the commit's notes in a similar
manner.</simpara>
<simpara>You can then import these into your mail client and send them by
hand.  However, if you have a lot to send at once, you may prefer to
use the <xref linkend="git-send-email(1)" /> script to automate the process.
Consult the mailing list for your project first to determine
their requirements for submitting patches.</simpara>
</section>
<section id="Git User Manual_importing-patches">
<title>Importing patches to a project</title>
<simpara>Git also provides a tool called <xref linkend="git-am(1)" /> (am stands for
"apply mailbox"), for importing such an emailed series of patches.
Just save all of the patch-containing messages, in order, into a
single mailbox file, say <emphasis>patches.mbox</emphasis>, then run</simpara>
<literallayout>$ git am -3 patches.mbox</literallayout>
<simpara>Git will apply each patch in order; if any conflicts are found, it
will stop, and you can fix the conflicts as described in
"<link linkend="Git User Manual_resolving-a-merge">Resolving a merge</link>".  (The <emphasis>-3</emphasis> option tells
Git to perform a merge; if you would prefer it just to abort and
leave your tree and index untouched, you may omit that option.)</simpara>
<simpara>Once the index is updated with the results of the conflict
resolution, instead of creating a new commit, just run</simpara>
<literallayout>$ git am --continue</literallayout>
<simpara>and Git will create the commit for you and continue applying the
remaining patches from the mailbox.</simpara>
<simpara>The final result will be a series of commits, one for each patch in
the original mailbox, with authorship and commit log message each
taken from the message containing each patch.</simpara>
</section>
<section id="Git User Manual_public-repositories">
<title>Public Git repositories</title>
<simpara>Another way to submit changes to a project is to tell the maintainer
of that project to pull the changes from your repository using
<xref linkend="git-pull(1)" />.  In the section "<link linkend="Git User Manual_getting-updates-With-git-pull">Getting updates with <emphasis>git pull</emphasis></link>" we described this as a way to get
updates from the "main" repository, but it works just as well in the
other direction.</simpara>
<simpara>If you and the maintainer both have accounts on the same machine, then
you can just pull changes from each other's repositories directly;
commands that accept repository URLs as arguments will also accept a
local directory name:</simpara>
<literallayout>$ git clone /path/to/repository
$ git pull /path/to/other/repository</literallayout>
<simpara>or an ssh URL:</simpara>
<literallayout>$ git clone ssh://yourhost/~you/repository</literallayout>
<simpara>For projects with few developers, or for synchronizing a few private
repositories, this may be all you need.</simpara>
<simpara>However, the more common way to do this is to maintain a separate public
repository (usually on a different host) for others to pull changes
from.  This is usually more convenient, and allows you to cleanly
separate private work in progress from publicly visible work.</simpara>
<simpara>You will continue to do your day-to-day work in your personal
repository, but periodically "push" changes from your personal
repository into your public repository, allowing other developers to
pull from that repository.  So the flow of changes, in a situation
where there is one other developer with a public repository, looks
like this:</simpara>
<literallayout class="monospaced">                      you push
your personal repo ------------------&gt; your public repo
      ^                                     |
      |                                     |
      | you pull                            | they pull
      |                                     |
      |                                     |
      |               they push             V
their public repo &lt;------------------- their repo</literallayout>
<simpara>We explain how to do this in the following sections.</simpara>
<section id="Git User Manual_setting-up-a-public-repository">
<title>Setting up a public repository</title>
<simpara>Assume your personal repository is in the directory <emphasis>~/proj</emphasis>.  We
first create a new clone of the repository and tell <emphasis>git daemon</emphasis> that it
is meant to be public:</simpara>
<literallayout>$ git clone --bare ~/proj proj.git
$ touch proj.git/git-daemon-export-ok</literallayout>
<simpara>The resulting directory proj.git contains a "bare" git repository--it is
just the contents of the <emphasis>.git</emphasis> directory, without any files checked out
around it.</simpara>
<simpara>Next, copy <emphasis>proj.git</emphasis> to the server where you plan to host the
public repository.  You can use scp, rsync, or whatever is most
convenient.</simpara>
</section>
<section id="Git User Manual_exporting-via-git">
<title>Exporting a Git repository via the Git protocol</title>
<simpara>This is the preferred method.</simpara>
<simpara>If someone else administers the server, they should tell you what
directory to put the repository in, and what <emphasis>git://</emphasis> URL it will
appear at.  You can then skip to the section
"<link linkend="Git User Manual_pushing-changes-to-a-public-repository">Pushing changes to a public repository</link>", below.</simpara>
<simpara>Otherwise, all you need to do is start <xref linkend="git-daemon(1)" />; it will
listen on port 9418.  By default, it will allow access to any directory
that looks like a Git directory and contains the magic file
git-daemon-export-ok.  Passing some directory paths as <emphasis>git daemon</emphasis>
arguments will further restrict the exports to those paths.</simpara>
<simpara>You can also run <emphasis>git daemon</emphasis> as an inetd service; see the
<xref linkend="git-daemon(1)" /> man page for details.  (See especially the
examples section.)</simpara>
</section>
<section id="Git User Manual_exporting-via-http">
<title>Exporting a git repository via HTTP</title>
<simpara>The Git protocol gives better performance and reliability, but on a
host with a web server set up, HTTP exports may be simpler to set up.</simpara>
<simpara>All you need to do is place the newly created bare Git repository in
a directory that is exported by the web server, and make some
adjustments to give web clients some extra information they need:</simpara>
<literallayout>$ mv proj.git /home/you/public_html/proj.git
$ cd proj.git
$ git --bare update-server-info
$ mv hooks/post-update.sample hooks/post-update</literallayout>
<simpara>(For an explanation of the last two lines, see
<xref linkend="git-update-server-info(1)" /> and <xref linkend="githooks(5)" />.)</simpara>
<simpara>Advertise the URL of <emphasis>proj.git</emphasis>.  Anybody else should then be able to
clone or pull from that URL, for example with a command line like:</simpara>
<literallayout>$ git clone http://yourserver.com/~you/proj.git</literallayout>
<simpara>(See also
link:howto/setup-git-server-over-http.html[setup-git-server-over-http]
for a slightly more sophisticated setup using WebDAV which also
allows pushing over HTTP.)</simpara>
</section>
<section id="Git User Manual_pushing-changes-to-a-public-repository">
<title>Pushing changes to a public repository</title>
<simpara>Note that the two techniques outlined above (exporting via
<link linkend="Git User Manual_exporting-via-http">http</link> or <link linkend="Git User Manual_exporting-via-git">git</link>) allow other
maintainers to fetch your latest changes, but they do not allow write
access, which you will need to update the public repository with the
latest changes created in your private repository.</simpara>
<simpara>The simplest way to do this is using <xref linkend="git-push(1)" /> and ssh; to
update the remote branch named <emphasis>master</emphasis> with the latest state of your
branch named <emphasis>master</emphasis>, run</simpara>
<literallayout>$ git push ssh://yourserver.com/~you/proj.git master:master</literallayout>
<simpara>or just</simpara>
<literallayout>$ git push ssh://yourserver.com/~you/proj.git master</literallayout>
<simpara>As with <emphasis>git fetch</emphasis>, <emphasis>git push</emphasis> will complain if this does not result in a
<link linkend="Git User Manual_fast-forwards">fast-forward</link>; see the following section for details on
handling this case.</simpara>
<simpara>Note that the target of a <emphasis>push</emphasis> is normally a
<link linkend="Git User Manual_def_bare_repository">bare</link> repository.  You can also push to a
repository that has a checked-out working tree, but a push to update the
currently checked-out branch is denied by default to prevent confusion.
See the description of the receive.denyCurrentBranch option
in <xref linkend="git-config(1)" /> for details.</simpara>
<simpara>As with <emphasis>git fetch</emphasis>, you may also set up configuration options to
save typing; so, for example:</simpara>
<literallayout>$ git remote add public-repo ssh://yourserver.com/~you/proj.git</literallayout>
<simpara>adds the following to <emphasis>.git/config</emphasis>:</simpara>
<literallayout>[remote "public-repo"]
        url = yourserver.com:proj.git
        fetch = +refs/heads/*:refs/remotes/example/*</literallayout>
<simpara>which lets you do the same push with just</simpara>
<literallayout>$ git push public-repo master</literallayout>
<simpara>See the explanations of the <emphasis>remote.&lt;name&gt;.url</emphasis>,
<emphasis>branch.&lt;name&gt;.remote</emphasis>, and <emphasis>remote.&lt;name&gt;.push</emphasis> options in
<xref linkend="git-config(1)" /> for details.</simpara>
</section>
<section id="Git User Manual_forcing-push">
<title>What to do when a push fails</title>
<simpara>If a push would not result in a <link linkend="Git User Manual_fast-forwards">fast-forward</link> of the
remote branch, then it will fail with an error like:</simpara>
<literallayout>error: remote 'refs/heads/master' is not an ancestor of
 local  'refs/heads/master'.
 Maybe you are not up-to-date and need to pull first?
error: failed to push to 'ssh://yourserver.com/~you/proj.git'</literallayout>
<simpara>This can happen, for example, if you:</simpara>
<itemizedlist>
<listitem>
<simpara>
use <emphasis>git reset --hard</emphasis> to remove already-published commits, or
</simpara>
</listitem>
<listitem>
<simpara>
use <emphasis>git commit --amend</emphasis> to replace already-published commits
          (as in <xref linkend="Git User Manual_fixing-a-mistake-by-rewriting-history"/>), or
</simpara>
</listitem>
<listitem>
<simpara>
use <emphasis>git rebase</emphasis> to rebase any already-published commits (as
          in <xref linkend="Git User Manual_using-git-rebase"/>).
</simpara>
</listitem>
</itemizedlist>
<simpara>You may force <emphasis>git push</emphasis> to perform the update anyway by preceding the
branch name with a plus sign:</simpara>
<literallayout>$ git push ssh://yourserver.com/~you/proj.git +master</literallayout>
<simpara>Note the addition of the <emphasis>+</emphasis> sign.  Alternatively, you can use the
<emphasis>-f</emphasis> flag to force the remote update, as in:</simpara>
<literallayout>$ git push -f ssh://yourserver.com/~you/proj.git master</literallayout>
<simpara>Normally whenever a branch head in a public repository is modified, it
is modified to point to a descendant of the commit that it pointed to
before.  By forcing a push in this situation, you break that convention.
(See <xref linkend="Git User Manual_problems-With-rewriting-history"/>.)</simpara>
<simpara>Nevertheless, this is a common practice for people that need a simple
way to publish a work-in-progress patch series, and it is an acceptable
compromise as long as you warn other developers that this is how you
intend to manage the branch.</simpara>
<simpara>It's also possible for a push to fail in this way when other people have
the right to push to the same repository.  In that case, the correct
solution is to retry the push after first updating your work: either by a
pull, or by a fetch followed by a rebase; see the
<link linkend="Git User Manual_setting-up-a-shared-repository">next section</link> and
<xref linkend="gitcvs-migration(7)" /> for more.</simpara>
</section>
<section id="Git User Manual_setting-up-a-shared-repository">
<title>Setting up a shared repository</title>
<simpara>Another way to collaborate is by using a model similar to that
commonly used in CVS, where several developers with special rights
all push to and pull from a single shared repository.  See
<xref linkend="gitcvs-migration(7)" /> for instructions on how to
set this up.</simpara>
<simpara>However, while there is nothing wrong with Git's support for shared
repositories, this mode of operation is not generally recommended,
simply because the mode of collaboration that Git supports--by
exchanging patches and pulling from public repositories--has so many
advantages over the central shared repository:</simpara>
<itemizedlist>
<listitem>
<simpara>
Git's ability to quickly import and merge patches allows a
          single maintainer to process incoming changes even at very
          high rates.  And when that becomes too much, <emphasis>git pull</emphasis> provides
          an easy way for that maintainer to delegate this job to other
          maintainers while still allowing optional review of incoming
          changes.
</simpara>
</listitem>
<listitem>
<simpara>
Since every developer's repository has the same complete copy
          of the project history, no repository is special, and it is
          trivial for another developer to take over maintenance of a
          project, either by mutual agreement, or because a maintainer
          becomes unresponsive or difficult to work with.
</simpara>
</listitem>
<listitem>
<simpara>
The lack of a central group of "committers" means there is
          less need for formal decisions about who is "in" and who is
          "out".
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="Git User Manual_setting-up-gitweb">
<title>Allowing web browsing of a repository</title>
<simpara>The gitweb cgi script provides users an easy way to browse your
project's revisions, file contents and logs without having to install
Git. Features like RSS/Atom feeds and blame/annotation details may
optionally be enabled.</simpara>
<simpara>The <xref linkend="git-instaweb(1)" /> command provides a simple way to start
browsing the repository using gitweb. The default server when using
instaweb is lighttpd.</simpara>
<simpara>See the file gitweb/INSTALL in the Git source tree and
<xref linkend="gitweb(1)" /> for instructions on details setting up a permanent
installation with a CGI or Perl capable server.</simpara>
</section>
</section>
<section id="Git User Manual_how-to-get-a-git-repository-with-minimal-history">
<title>How to get a Git repository with minimal history</title>
<simpara>A <link linkend="Git User Manual_def_shallow_clone">shallow clone</link>, with its truncated
history, is useful when one is interested only in recent history
of a project and getting full history from the upstream is
expensive.</simpara>
<simpara>A <link linkend="Git User Manual_def_shallow_clone">shallow clone</link> is created by specifying
the <xref linkend="git-clone(1)" /> <emphasis>--depth</emphasis> switch. The depth can later be
changed with the <xref linkend="git-fetch(1)" /> <emphasis>--depth</emphasis> switch, or full
history restored with <emphasis>--unshallow</emphasis>.</simpara>
<simpara>Merging inside a <link linkend="Git User Manual_def_shallow_clone">shallow clone</link> will work as long
as a merge base is in the recent history.
Otherwise, it will be like merging unrelated histories and may
have to result in huge conflicts.  This limitation may make such
a repository unsuitable to be used in merge based workflows.</simpara>
</section>
<section id="Git User Manual_sharing-development-examples">
<title>Examples</title>
<section id="Git User Manual_maintaining-topic-branches">
<title>Maintaining topic branches for a Linux subsystem maintainer</title>
<simpara>This describes how Tony Luck uses Git in his role as maintainer of the
IA64 architecture for the Linux kernel.</simpara>
<simpara>He uses two public branches:</simpara>
<itemizedlist>
<listitem>
<simpara>
A "test" tree into which patches are initially placed so that they
   can get some exposure when integrated with other ongoing development.
   This tree is available to Andrew for pulling into -mm whenever he
   wants.
</simpara>
</listitem>
<listitem>
<simpara>
A "release" tree into which tested patches are moved for final sanity
   checking, and as a vehicle to send them upstream to Linus (by sending
   him a "please pull" request.)
</simpara>
</listitem>
</itemizedlist>
<simpara>He also uses a set of temporary branches ("topic branches"), each
containing a logical grouping of patches.</simpara>
<simpara>To set this up, first create your work tree by cloning Linus's public
tree:</simpara>
<literallayout>$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git work
$ cd work</literallayout>
<simpara>Linus's tree will be stored in the remote-tracking branch named origin/master,
and can be updated using <xref linkend="git-fetch(1)" />; you can track other
public trees using <xref linkend="git-remote(1)" /> to set up a "remote" and
<xref linkend="git-fetch(1)" /> to keep them up-to-date; see
<xref linkend="Git User Manual_repositories-and-branches"/>.</simpara>
<simpara>Now create the branches in which you are going to work; these start out
at the current tip of origin/master branch, and should be set up (using
the <emphasis>--track</emphasis> option to <xref linkend="git-branch(1)" />) to merge changes in from
Linus by default.</simpara>
<literallayout>$ git branch --track test origin/master
$ git branch --track release origin/master</literallayout>
<simpara>These can be easily kept up to date using <xref linkend="git-pull(1)" />.</simpara>
<literallayout>$ git checkout test &amp;&amp; git pull
$ git checkout release &amp;&amp; git pull</literallayout>
<simpara>Important note!  If you have any local changes in these branches, then
this merge will create a commit object in the history (with no local
changes Git will simply do a "fast-forward" merge).  Many people dislike
the "noise" that this creates in the Linux history, so you should avoid
doing this capriciously in the <emphasis>release</emphasis> branch, as these noisy commits
will become part of the permanent history when you ask Linus to pull
from the release branch.</simpara>
<simpara>A few configuration variables (see <xref linkend="git-config(1)" />) can
make it easy to push both branches to your public tree.  (See
<xref linkend="Git User Manual_setting-up-a-public-repository"/>.)</simpara>
<literallayout>$ cat &gt;&gt; .git/config &lt;&lt;EOF
[remote "mytree"]
        url =  master.kernel.org:/pub/scm/linux/kernel/git/aegl/linux.git
        push = release
        push = test
EOF</literallayout>
<simpara>Then you can push both the test and release trees using
<xref linkend="git-push(1)" />:</simpara>
<literallayout>$ git push mytree</literallayout>
<simpara>or push just one of the test and release branches using:</simpara>
<literallayout>$ git push mytree test</literallayout>
<simpara>or</simpara>
<literallayout>$ git push mytree release</literallayout>
<simpara>Now to apply some patches from the community.  Think of a short
snappy name for a branch to hold this patch (or related group of
patches), and create a new branch from a recent stable tag of
Linus's branch. Picking a stable base for your branch will:
1) help you: by avoiding inclusion of unrelated and perhaps lightly
tested changes
2) help future bug hunters that use <emphasis>git bisect</emphasis> to find problems</simpara>
<literallayout>$ git checkout -b speed-up-spinlocks v2.6.35</literallayout>
<simpara>Now you apply the patch(es), run some tests, and commit the change(s).  If
the patch is a multi-part series, then you should apply each as a separate
commit to this branch.</simpara>
<literallayout>$ ... patch ... test  ... commit [ ... patch ... test ... commit ]*</literallayout>
<simpara>When you are happy with the state of this change, you can merge it into the
"test" branch in preparation to make it public:</simpara>
<literallayout>$ git checkout test &amp;&amp; git merge speed-up-spinlocks</literallayout>
<simpara>It is unlikely that you would have any conflicts here &#8230; but you might if you
spent a while on this step and had also pulled new versions from upstream.</simpara>
<simpara>Sometime later when enough time has passed and testing done, you can pull the
same branch into the <emphasis>release</emphasis> tree ready to go upstream.  This is where you
see the value of keeping each patch (or patch series) in its own branch.  It
means that the patches can be moved into the <emphasis>release</emphasis> tree in any order.</simpara>
<literallayout>$ git checkout release &amp;&amp; git merge speed-up-spinlocks</literallayout>
<simpara>After a while, you will have a number of branches, and despite the
well chosen names you picked for each of them, you may forget what
they are for, or what status they are in.  To get a reminder of what
changes are in a specific branch, use:</simpara>
<literallayout>$ git log linux..branchname | git shortlog</literallayout>
<simpara>To see whether it has already been merged into the test or release branches,
use:</simpara>
<literallayout>$ git log test..branchname</literallayout>
<simpara>or</simpara>
<literallayout>$ git log release..branchname</literallayout>
<simpara>(If this branch has not yet been merged, you will see some log entries.
If it has been merged, then there will be no output.)</simpara>
<simpara>Once a patch completes the great cycle (moving from test to release,
then pulled by Linus, and finally coming back into your local
<emphasis>origin/master</emphasis> branch), the branch for this change is no longer needed.
You detect this when the output from:</simpara>
<literallayout>$ git log origin..branchname</literallayout>
<simpara>is empty.  At this point the branch can be deleted:</simpara>
<literallayout>$ git branch -d branchname</literallayout>
<simpara>Some changes are so trivial that it is not necessary to create a separate
branch and then merge into each of the test and release branches.  For
these changes, just apply directly to the <emphasis>release</emphasis> branch, and then
merge that into the <emphasis>test</emphasis> branch.</simpara>
<simpara>After pushing your work to <emphasis>mytree</emphasis>, you can use
<xref linkend="git-request-pull(1)" /> to prepare a "please pull" request message
to send to Linus:</simpara>
<literallayout>$ git push mytree
$ git request-pull origin mytree release</literallayout>
<simpara>Here are some of the scripts that simplify all this even further.</simpara>
<literallayout>==== update script ====
# Update a branch in my Git tree.  If the branch to be updated
# is origin, then pull from kernel.org.  Otherwise merge
# origin/master branch into test|release branch

case "$1" in
test|release)
        git checkout $1 &amp;&amp; git pull . origin
        ;;
origin)
        before=$(git rev-parse refs/remotes/origin/master)
        git fetch origin
        after=$(git rev-parse refs/remotes/origin/master)
        if [ $before != $after ]
        then
                git log $before..$after | git shortlog
        fi
        ;;
*)
        echo "usage: $0 origin|test|release" 1&gt;&amp;2
        exit 1
        ;;
esac</literallayout>
<literallayout>==== merge script ====
# Merge a branch into either the test or release branch

pname=$0

usage()
{
        echo "usage: $pname branch test|release" 1&gt;&amp;2
        exit 1
}

git show-ref -q --verify -- refs/heads/"$1" || {
        echo "Can't see branch &lt;$1&gt;" 1&gt;&amp;2
        usage
}

case "$2" in
test|release)
        if [ $(git log $2..$1 | wc -c) -eq 0 ]
        then
                echo $1 already merged into $2 1&gt;&amp;2
                exit 1
        fi
        git checkout $2 &amp;&amp; git pull . $1
        ;;
*)
        usage
        ;;
esac</literallayout>
<literallayout>==== status script ====
# report on status of my ia64 Git tree

gb=$(tput setab 2)
rb=$(tput setab 1)
restore=$(tput setab 9)

if [ `git rev-list test..release | wc -c` -gt 0 ]
then
        echo $rb Warning: commits in release that are not in test $restore
        git log test..release
fi

for branch in `git show-ref --heads | sed 's|^.*/||'`
do
        if [ $branch = test -o $branch = release ]
        then
                continue
        fi

        echo -n $gb ======= $branch ====== $restore " "
        status=
        for ref in test release origin/master
        do
                if [ `git rev-list $ref..$branch | wc -c` -gt 0 ]
                then
                        status=$status${ref:0:1}
                fi
        done
        case $status in
        trl)
                echo $rb Need to pull into test $restore
                ;;
        rl)
                echo "In test"
                ;;
        l)
                echo "Waiting for linus"
                ;;
        "")
                echo $rb All done $restore
                ;;
        *)
                echo $rb "&lt;$status&gt;" $restore
                ;;
        esac
        git log origin/master..$branch | git shortlog
done</literallayout>
</section>
</section>
</section>
<section id="Git User Manual_cleaning-up-history">
<title>Rewriting history and maintaining patch series</title>
<simpara>Normally commits are only added to a project, never taken away or
replaced.  Git is designed with this assumption, and violating it will
cause Git's merge machinery (for example) to do the wrong thing.</simpara>
<simpara>However, there is a situation in which it can be useful to violate this
assumption.</simpara>
<section id="Git User Manual_patch-series">
<title>Creating the perfect patch series</title>
<simpara>Suppose you are a contributor to a large project, and you want to add a
complicated feature, and to present it to the other developers in a way
that makes it easy for them to read your changes, verify that they are
correct, and understand why you made each change.</simpara>
<simpara>If you present all of your changes as a single patch (or commit), they
may find that it is too much to digest all at once.</simpara>
<simpara>If you present them with the entire history of your work, complete with
mistakes, corrections, and dead ends, they may be overwhelmed.</simpara>
<simpara>So the ideal is usually to produce a series of patches such that:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Each patch can be applied in order.
</simpara>
</listitem>
<listitem>
<simpara>
Each patch includes a single logical change, together with a
           message explaining the change.
</simpara>
</listitem>
<listitem>
<simpara>
No patch introduces a regression: after applying any initial
           part of the series, the resulting project still compiles and
           works, and has no bugs that it didn't have before.
</simpara>
</listitem>
<listitem>
<simpara>
The complete series produces the same end result as your own
           (probably much messier!) development process did.
</simpara>
</listitem>
</orderedlist>
<simpara>We will introduce some tools that can help you do this, explain how to
use them, and then explain some of the problems that can arise because
you are rewriting history.</simpara>
</section>
<section id="Git User Manual_using-git-rebase">
<title>Keeping a patch series up to date using git rebase</title>
<simpara>Suppose that you create a branch <emphasis>mywork</emphasis> on a remote-tracking branch
<emphasis>origin</emphasis>, and create some commits on top of it:</simpara>
<literallayout>$ git checkout -b mywork origin
$ vi file.txt
$ git commit
$ vi otherfile.txt
$ git commit
...</literallayout>
<simpara>You have performed no merges into mywork, so it is just a simple linear
sequence of patches on top of <emphasis>origin</emphasis>:</simpara>
<literallayout class="monospaced"> o--o--O &lt;-- origin
        \
         a--b--c &lt;-- mywork</literallayout>
<simpara>Some more interesting work has been done in the upstream project, and
<emphasis>origin</emphasis> has advanced:</simpara>
<literallayout class="monospaced"> o--o--O--o--o--o &lt;-- origin
        \
         a--b--c &lt;-- mywork</literallayout>
<simpara>At this point, you could use <emphasis>pull</emphasis> to merge your changes back in;
the result would create a new merge commit, like this:</simpara>
<literallayout class="monospaced"> o--o--O--o--o--o &lt;-- origin
        \        \
         a--b--c--m &lt;-- mywork</literallayout>
<simpara>However, if you prefer to keep the history in mywork a simple series of
commits without any merges, you may instead choose to use
<xref linkend="git-rebase(1)" />:</simpara>
<literallayout>$ git checkout mywork
$ git rebase origin</literallayout>
<simpara>This will remove each of your commits from mywork, temporarily saving
them as patches (in a directory named <emphasis>.git/rebase-apply</emphasis>), update mywork to
point at the latest version of origin, then apply each of the saved
patches to the new mywork.  The result will look like:</simpara>
<literallayout class="monospaced"> o--o--O--o--o--o &lt;-- origin
                 \
                  a'--b'--c' &lt;-- mywork</literallayout>
<simpara>In the process, it may discover conflicts.  In that case it will stop
and allow you to fix the conflicts; after fixing conflicts, use <emphasis>git add</emphasis>
to update the index with those contents, and then, instead of
running <emphasis>git commit</emphasis>, just run</simpara>
<literallayout>$ git rebase --continue</literallayout>
<simpara>and Git will continue applying the rest of the patches.</simpara>
<simpara>At any point you may use the <emphasis>--abort</emphasis> option to abort this process and
return mywork to the state it had before you started the rebase:</simpara>
<literallayout>$ git rebase --abort</literallayout>
<simpara>If you need to reorder or edit a number of commits in a branch, it may
be easier to use <emphasis>git rebase -i</emphasis>, which allows you to reorder and
squash commits, as well as marking them for individual editing during
the rebase.  See <xref linkend="Git User Manual_interactive-rebase"/> for details, and
<xref linkend="Git User Manual_reordering-patch-series"/> for alternatives.</simpara>
</section>
<section id="Git User Manual_rewriting-one-commit">
<title>Rewriting a single commit</title>
<simpara>We saw in <xref linkend="Git User Manual_fixing-a-mistake-by-rewriting-history"/> that you can replace the
most recent commit using</simpara>
<literallayout>$ git commit --amend</literallayout>
<simpara>which will replace the old commit by a new commit incorporating your
changes, giving you a chance to edit the old commit message first.
This is useful for fixing typos in your last commit, or for adjusting
the patch contents of a poorly staged commit.</simpara>
<simpara>If you need to amend commits from deeper in your history, you can
use <link linkend="Git User Manual_interactive-rebase">interactive rebase's <emphasis>edit</emphasis> instruction</link>.</simpara>
</section>
<section id="Git User Manual_reordering-patch-series">
<title>Reordering or selecting from a patch series</title>
<simpara>Sometimes you want to edit a commit deeper in your history.  One
approach is to use <emphasis>git format-patch</emphasis> to create a series of patches
and then reset the state to before the patches:</simpara>
<literallayout>$ git format-patch origin
$ git reset --hard origin</literallayout>
<simpara>Then modify, reorder, or eliminate patches as needed before applying
them again with <xref linkend="git-am(1)" />:</simpara>
<literallayout>$ git am *.patch</literallayout>
</section>
<section id="Git User Manual_interactive-rebase">
<title>Using interactive rebases</title>
<simpara>You can also edit a patch series with an interactive rebase.  This is
the same as <link linkend="Git User Manual_reordering-patch-series">reordering a patch series using <emphasis>format-patch</emphasis></link>, so use whichever interface you like best.</simpara>
<simpara>Rebase your current HEAD on the last commit you want to retain as-is.
For example, if you want to reorder the last 5 commits, use:</simpara>
<literallayout>$ git rebase -i HEAD~5</literallayout>
<simpara>This will open your editor with a list of steps to be taken to perform
your rebase.</simpara>
<literallayout>pick deadbee The oneline of this commit
pick fa1afe1 The oneline of the next commit
...

# Rebase c0ffeee..deadbee onto c0ffeee
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like "squash", but discard this commit's log message
#  x, exec = run command (the rest of the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out</literallayout>
<simpara>As explained in the comments, you can reorder commits, squash them
together, edit commit messages, etc. by editing the list.  Once you
are satisfied, save the list and close your editor, and the rebase
will begin.</simpara>
<simpara>The rebase will stop where <emphasis>pick</emphasis> has been replaced with <emphasis>edit</emphasis> or
when a step in the list fails to mechanically resolve conflicts and
needs your help.  When you are done editing and/or resolving conflicts
you can continue with <emphasis>git rebase --continue</emphasis>.  If you decide that
things are getting too hairy, you can always bail out with <emphasis>git rebase
--abort</emphasis>.  Even after the rebase is complete, you can still recover
the original branch by using the <link linkend="Git User Manual_reflogs">reflog</link>.</simpara>
<simpara>For a more detailed discussion of the procedure and additional tips,
see the "INTERACTIVE MODE" section of <xref linkend="git-rebase(1)" />.</simpara>
</section>
<section id="Git User Manual_patch-series-tools">
<title>Other tools</title>
<simpara>There are numerous other tools, such as StGit, which exist for the
purpose of maintaining a patch series.  These are outside of the scope of
this manual.</simpara>
</section>
<section id="Git User Manual_problems-With-rewriting-history">
<title>Problems with rewriting history</title>
<simpara>The primary problem with rewriting the history of a branch has to do
with merging.  Suppose somebody fetches your branch and merges it into
their branch, with a result something like this:</simpara>
<literallayout class="monospaced"> o--o--O--o--o--o &lt;-- origin
        \        \
         t--t--t--m &lt;-- their branch:</literallayout>
<simpara>Then suppose you modify the last three commits:</simpara>
<literallayout class="monospaced">         o--o--o &lt;-- new head of origin
        /
 o--o--O--o--o--o &lt;-- old head of origin</literallayout>
<simpara>If we examined all this history together in one repository, it will
look like:</simpara>
<literallayout class="monospaced">         o--o--o &lt;-- new head of origin
        /
 o--o--O--o--o--o &lt;-- old head of origin
        \        \
         t--t--t--m &lt;-- their branch:</literallayout>
<simpara>Git has no way of knowing that the new head is an updated version of
the old head; it treats this situation exactly the same as it would if
two developers had independently done the work on the old and new heads
in parallel.  At this point, if someone attempts to merge the new head
in to their branch, Git will attempt to merge together the two (old and
new) lines of development, instead of trying to replace the old by the
new.  The results are likely to be unexpected.</simpara>
<simpara>You may still choose to publish branches whose history is rewritten,
and it may be useful for others to be able to fetch those branches in
order to examine or test them, but they should not attempt to pull such
branches into their own work.</simpara>
<simpara>For true distributed development that supports proper merging,
published branches should never be rewritten.</simpara>
</section>
<section id="Git User Manual_bisect-merges">
<title>Why bisecting merge commits can be harder than bisecting linear history</title>
<simpara>The <xref linkend="git-bisect(1)" /> command correctly handles history that
includes merge commits.  However, when the commit that it finds is a
merge commit, the user may need to work harder than usual to figure out
why that commit introduced a problem.</simpara>
<simpara>Imagine this history:</simpara>
<literallayout class="monospaced">      ---Z---o---X---...---o---A---C---D
          \                       /
           o---o---Y---...---o---B</literallayout>
<simpara>Suppose that on the upper line of development, the meaning of one
of the functions that exists at Z is changed at commit X.  The
commits from Z leading to A change both the function's
implementation and all calling sites that exist at Z, as well
as new calling sites they add, to be consistent.  There is no
bug at A.</simpara>
<simpara>Suppose that in the meantime on the lower line of development somebody
adds a new calling site for that function at commit Y.  The
commits from Z leading to B all assume the old semantics of that
function and the callers and the callee are consistent with each
other.  There is no bug at B, either.</simpara>
<simpara>Suppose further that the two development lines merge cleanly at C,
so no conflict resolution is required.</simpara>
<simpara>Nevertheless, the code at C is broken, because the callers added
on the lower line of development have not been converted to the new
semantics introduced on the upper line of development.  So if all
you know is that D is bad, that Z is good, and that
<xref linkend="git-bisect(1)" /> identifies C as the culprit, how will you
figure out that the problem is due to this change in semantics?</simpara>
<simpara>When the result of a <emphasis>git bisect</emphasis> is a non-merge commit, you should
normally be able to discover the problem by examining just that commit.
Developers can make this easy by breaking their changes into small
self-contained commits.  That won't help in the case above, however,
because the problem isn't obvious from examination of any single
commit; instead, a global view of the development is required.  To
make matters worse, the change in semantics in the problematic
function may be just one small part of the changes in the upper
line of development.</simpara>
<simpara>On the other hand, if instead of merging at C you had rebased the
history between Z to B on top of A, you would have gotten this
linear history:</simpara>
<literallayout class="monospaced">    ---Z---o---X--...---o---A---o---o---Y*--...---o---B*--D*</literallayout>
<simpara>Bisecting between Z and D* would hit a single culprit commit Y*,
and understanding why Y* was broken would probably be easier.</simpara>
<simpara>Partly for this reason, many experienced Git users, even when
working on an otherwise merge-heavy project, keep the history
linear by rebasing against the latest upstream version before
publishing.</simpara>
</section>
</section>
<section id="Git User Manual_advanced-branch-management">
<title>Advanced branch management</title>
<section id="Git User Manual_fetching-individual-branches">
<title>Fetching individual branches</title>
<simpara>Instead of using <xref linkend="git-remote(1)" />, you can also choose just
to update one branch at a time, and to store it locally under an
arbitrary name:</simpara>
<literallayout>$ git fetch origin todo:my-todo-work</literallayout>
<simpara>The first argument, <emphasis>origin</emphasis>, just tells Git to fetch from the
repository you originally cloned from.  The second argument tells Git
to fetch the branch named <emphasis>todo</emphasis> from the remote repository, and to
store it locally under the name <emphasis>refs/heads/my-todo-work</emphasis>.</simpara>
<simpara>You can also fetch branches from other repositories; so</simpara>
<literallayout>$ git fetch git://example.com/proj.git master:example-master</literallayout>
<simpara>will create a new branch named <emphasis>example-master</emphasis> and store in it the
branch named <emphasis>master</emphasis> from the repository at the given URL.  If you
already have a branch named example-master, it will attempt to
<link linkend="Git User Manual_fast-forwards">fast-forward</link> to the commit given by example.com's
master branch.  In more detail:</simpara>
</section>
<section id="Git User Manual_fetch-fast-forwards">
<title>git fetch and fast-forwards</title>
<simpara>In the previous example, when updating an existing branch, <emphasis>git fetch</emphasis>
checks to make sure that the most recent commit on the remote
branch is a descendant of the most recent commit on your copy of the
branch before updating your copy of the branch to point at the new
commit.  Git calls this process a <link linkend="Git User Manual_fast-forwards">fast-forward</link>.</simpara>
<simpara>A fast-forward looks something like this:</simpara>
<literallayout class="monospaced"> o--o--o--o &lt;-- old head of the branch
           \
            o--o--o &lt;-- new head of the branch</literallayout>
<simpara>In some cases it is possible that the new head will <emphasis role="strong">not</emphasis> actually be
a descendant of the old head.  For example, the developer may have
realized she made a serious mistake, and decided to backtrack,
resulting in a situation like:</simpara>
<literallayout class="monospaced"> o--o--o--o--a--b &lt;-- old head of the branch
           \
            o--o--o &lt;-- new head of the branch</literallayout>
<simpara>In this case, <emphasis>git fetch</emphasis> will fail, and print out a warning.</simpara>
<simpara>In that case, you can still force Git to update to the new head, as
described in the following section.  However, note that in the
situation above this may mean losing the commits labeled <emphasis>a</emphasis> and <emphasis>b</emphasis>,
unless you've already created a reference of your own pointing to
them.</simpara>
</section>
<section id="Git User Manual_forcing-fetch">
<title>Forcing git fetch to do non-fast-forward updates</title>
<simpara>If git fetch fails because the new head of a branch is not a
descendant of the old head, you may force the update with:</simpara>
<literallayout>$ git fetch git://example.com/proj.git +master:refs/remotes/example/master</literallayout>
<simpara>Note the addition of the <emphasis>+</emphasis> sign.  Alternatively, you can use the <emphasis>-f</emphasis>
flag to force updates of all the fetched branches, as in:</simpara>
<literallayout>$ git fetch -f origin</literallayout>
<simpara>Be aware that commits that the old version of example/master pointed at
may be lost, as we saw in the previous section.</simpara>
</section>
<section id="Git User Manual_remote-branch-configuration">
<title>Configuring remote-tracking branches</title>
<simpara>We saw above that <emphasis>origin</emphasis> is just a shortcut to refer to the
repository that you originally cloned from.  This information is
stored in Git configuration variables, which you can see using
<xref linkend="git-config(1)" />:</simpara>
<literallayout>$ git config -l
core.repositoryformatversion=0
core.filemode=true
core.logallrefupdates=true
remote.origin.url=git://git.kernel.org/pub/scm/git/git.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master</literallayout>
<simpara>If there are other repositories that you also use frequently, you can
create similar configuration options to save typing; for example,</simpara>
<literallayout>$ git remote add example git://example.com/proj.git</literallayout>
<simpara>adds the following to <emphasis>.git/config</emphasis>:</simpara>
<literallayout>[remote "example"]
        url = git://example.com/proj.git
        fetch = +refs/heads/*:refs/remotes/example/*</literallayout>
<simpara>Also note that the above configuration can be performed by directly
editing the file <emphasis>.git/config</emphasis> instead of using <xref linkend="git-remote(1)" />.</simpara>
<simpara>After configuring the remote, the following three commands will do the
same thing:</simpara>
<literallayout>$ git fetch git://example.com/proj.git +refs/heads/*:refs/remotes/example/*
$ git fetch example +refs/heads/*:refs/remotes/example/*
$ git fetch example</literallayout>
<simpara>See <xref linkend="git-config(1)" /> for more details on the configuration
options mentioned above and <xref linkend="git-fetch(1)" /> for more details on
the refspec syntax.</simpara>
</section>
</section>
<section id="Git User Manual_git-concepts">
<title>Git concepts</title>
<simpara>Git is built on a small number of simple but powerful ideas.  While it
is possible to get things done without understanding them, you will find
Git much more intuitive if you do.</simpara>
<simpara>We start with the most important, the  <link linkend="Git User Manual_def_object_database">object database</link> and the <link linkend="Git User Manual_def_index">index</link>.</simpara>
<section id="Git User Manual_the-object-database">
<title>The Object Database</title>
<simpara>We already saw in <xref linkend="Git User Manual_understanding-commits"/> that all commits are stored
under a 40-digit "object name".  In fact, all the information needed to
represent the history of a project is stored in objects with such names.
In each case the name is calculated by taking the SHA-1 hash of the
contents of the object.  The SHA-1 hash is a cryptographic hash function.
What that means to us is that it is impossible to find two different
objects with the same name.  This has a number of advantages; among
others:</simpara>
<itemizedlist>
<listitem>
<simpara>
Git can quickly determine whether two objects are identical or not,
  just by comparing names.
</simpara>
</listitem>
<listitem>
<simpara>
Since object names are computed the same way in every repository, the
  same content stored in two repositories will always be stored under
  the same name.
</simpara>
</listitem>
<listitem>
<simpara>
Git can detect errors when it reads an object, by checking that the
  object's name is still the SHA-1 hash of its contents.
</simpara>
</listitem>
</itemizedlist>
<simpara>(See <xref linkend="Git User Manual_object-details"/> for the details of the object formatting and
SHA-1 calculation.)</simpara>
<simpara>There are four different types of objects: "blob", "tree", "commit", and
"tag".</simpara>
<itemizedlist>
<listitem>
<simpara>
A <link linkend="Git User Manual_def_blob_object">"blob" object</link> is used to store file data.
</simpara>
</listitem>
<listitem>
<simpara>
A <link linkend="Git User Manual_def_tree_object">"tree" object</link> ties one or more
  "blob" objects into a directory structure. In addition, a tree object
  can refer to other tree objects, thus creating a directory hierarchy.
</simpara>
</listitem>
<listitem>
<simpara>
A <link linkend="Git User Manual_def_commit_object">"commit" object</link> ties such directory hierarchies
  together into a <link linkend="Git User Manual_def_DAG">directed acyclic graph</link> of revisions--each
  commit contains the object name of exactly one tree designating the
  directory hierarchy at the time of the commit. In addition, a commit
  refers to "parent" commit objects that describe the history of how we
  arrived at that directory hierarchy.
</simpara>
</listitem>
<listitem>
<simpara>
A <link linkend="Git User Manual_def_tag_object">"tag" object</link> symbolically identifies and can be
  used to sign other objects. It contains the object name and type of
  another object, a symbolic name (of course!) and, optionally, a
  signature.
</simpara>
</listitem>
</itemizedlist>
<simpara>The object types in some more detail:</simpara>
<section id="Git User Manual_commit-object">
<title>Commit Object</title>
<simpara>The "commit" object links a physical state of a tree with a description
of how we got there and why.  Use the <emphasis>--pretty=raw</emphasis> option to
<xref linkend="git-show(1)" /> or <xref linkend="git-log(1)" /> to examine your favorite
commit:</simpara>
<literallayout>$ git show -s --pretty=raw 2be7fcb476
commit 2be7fcb4764f2dbcee52635b91fedb1b3dcf7ab4
tree fb3a8bdd0ceddd019615af4d57a53f43d8cee2bf
parent 257a84d9d02e90447b149af58b271c19405edb6a
author Dave Watson &lt;dwatson@mimvista.com&gt; 1187576872 -0400
committer Junio C Hamano &lt;gitster@pobox.com&gt; 1187591163 -0700

    Fix misspelling of 'suppress' in docs

    Signed-off-by: Junio C Hamano &lt;gitster@pobox.com&gt;</literallayout>
<simpara>As you can see, a commit is defined by:</simpara>
<itemizedlist>
<listitem>
<simpara>
a tree: The SHA-1 name of a tree object (as defined below), representing
  the contents of a directory at a certain point in time.
</simpara>
</listitem>
<listitem>
<simpara>
parent(s): The SHA-1 name(s) of some number of commits which represent the
  immediately previous step(s) in the history of the project.  The
  example above has one parent; merge commits may have more than
  one.  A commit with no parents is called a "root" commit, and
  represents the initial revision of a project.  Each project must have
  at least one root.  A project can also have multiple roots, though
  that isn't common (or necessarily a good idea).
</simpara>
</listitem>
<listitem>
<simpara>
an author: The name of the person responsible for this change, together
  with its date.
</simpara>
</listitem>
<listitem>
<simpara>
a committer: The name of the person who actually created the commit,
  with the date it was done.  This may be different from the author, for
  example, if the author was someone who wrote a patch and emailed it
  to the person who used it to create the commit.
</simpara>
</listitem>
<listitem>
<simpara>
a comment describing this commit.
</simpara>
</listitem>
</itemizedlist>
<simpara>Note that a commit does not itself contain any information about what
actually changed; all changes are calculated by comparing the contents
of the tree referred to by this commit with the trees associated with
its parents.  In particular, Git does not attempt to record file renames
explicitly, though it can identify cases where the existence of the same
file data at changing paths suggests a rename.  (See, for example, the
<emphasis>-M</emphasis> option to <xref linkend="git-diff(1)" />).</simpara>
<simpara>A commit is usually created by <xref linkend="git-commit(1)" />, which creates a
commit whose parent is normally the current HEAD, and whose tree is
taken from the content currently stored in the index.</simpara>
</section>
<section id="Git User Manual_tree-object">
<title>Tree Object</title>
<simpara>The ever-versatile <xref linkend="git-show(1)" /> command can also be used to
examine tree objects, but <xref linkend="git-ls-tree(1)" /> will give you more
details:</simpara>
<literallayout>$ git ls-tree fb3a8bdd0ce
100644 blob 63c918c667fa005ff12ad89437f2fdc80926e21c    .gitignore
100644 blob 5529b198e8d14decbe4ad99db3f7fb632de0439d    .mailmap
100644 blob 6ff87c4664981e4397625791c8ea3bbb5f2279a3    COPYING
040000 tree 2fb783e477100ce076f6bf57e4a6f026013dc745    Documentation
100755 blob 3c0032cec592a765692234f1cba47dfdcc3a9200    GIT-VERSION-GEN
100644 blob 289b046a443c0647624607d471289b2c7dcd470b    INSTALL
100644 blob 4eb463797adc693dc168b926b6932ff53f17d0b1    Makefile
100644 blob 548142c327a6790ff8821d67c2ee1eff7a656b52    README
...</literallayout>
<simpara>As you can see, a tree object contains a list of entries, each with a
mode, object type, SHA-1 name, and name, sorted by name.  It represents
the contents of a single directory tree.</simpara>
<simpara>The object type may be a blob, representing the contents of a file, or
another tree, representing the contents of a subdirectory.  Since trees
and blobs, like all other objects, are named by the SHA-1 hash of their
contents, two trees have the same SHA-1 name if and only if their
contents (including, recursively, the contents of all subdirectories)
are identical.  This allows Git to quickly determine the differences
between two related tree objects, since it can ignore any entries with
identical object names.</simpara>
<simpara>(Note: in the presence of submodules, trees may also have commits as
entries.  See <xref linkend="Git User Manual_submodules"/> for documentation.)</simpara>
<simpara>Note that the files all have mode 644 or 755: Git actually only pays
attention to the executable bit.</simpara>
</section>
<section id="Git User Manual_blob-object">
<title>Blob Object</title>
<simpara>You can use <xref linkend="git-show(1)" /> to examine the contents of a blob; take,
for example, the blob in the entry for <emphasis>COPYING</emphasis> from the tree above:</simpara>
<literallayout>$ git show 6ff87c4664

 Note that the only valid version of the GPL as far as this project
 is concerned is _this_ particular version of the license (ie v2, not
 v2.2 or v3.x or whatever), unless explicitly otherwise stated.
...</literallayout>
<simpara>A "blob" object is nothing but a binary blob of data.  It doesn't refer
to anything else or have attributes of any kind.</simpara>
<simpara>Since the blob is entirely defined by its data, if two files in a
directory tree (or in multiple different versions of the repository)
have the same contents, they will share the same blob object. The object
is totally independent of its location in the directory tree, and
renaming a file does not change the object that file is associated with.</simpara>
<simpara>Note that any tree or blob object can be examined using
<xref linkend="git-show(1)" /> with the &lt;revision&gt;:&lt;path&gt; syntax.  This can
sometimes be useful for browsing the contents of a tree that is not
currently checked out.</simpara>
</section>
<section id="Git User Manual_trust">
<title>Trust</title>
<simpara>If you receive the SHA-1 name of a blob from one source, and its contents
from another (possibly untrusted) source, you can still trust that those
contents are correct as long as the SHA-1 name agrees.  This is because
the SHA-1 is designed so that it is infeasible to find different contents
that produce the same hash.</simpara>
<simpara>Similarly, you need only trust the SHA-1 name of a top-level tree object
to trust the contents of the entire directory that it refers to, and if
you receive the SHA-1 name of a commit from a trusted source, then you
can easily verify the entire history of commits reachable through
parents of that commit, and all of those contents of the trees referred
to by those commits.</simpara>
<simpara>So to introduce some real trust in the system, the only thing you need
to do is to digitally sign just <emphasis>one</emphasis> special note, which includes the
name of a top-level commit.  Your digital signature shows others
that you trust that commit, and the immutability of the history of
commits tells others that they can trust the whole history.</simpara>
<simpara>In other words, you can easily validate a whole archive by just
sending out a single email that tells the people the name (SHA-1 hash)
of the top commit, and digitally sign that email using something
like GPG/PGP.</simpara>
<simpara>To assist in this, Git also provides the tag object&#8230;</simpara>
</section>
<section id="Git User Manual_tag-object">
<title>Tag Object</title>
<simpara>A tag object contains an object, object type, tag name, the name of the
person ("tagger") who created the tag, and a message, which may contain
a signature, as can be seen using <xref linkend="git-cat-file(1)" />:</simpara>
<literallayout>$ git cat-file tag v1.5.0
object 437b1b20df4b356c9342dac8d38849f24ef44f27
type commit
tag v1.5.0
tagger Junio C Hamano &lt;junkio@cox.net&gt; 1171411200 +0000

GIT 1.5.0
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)

iD8DBQBF0lGqwMbZpPMRm5oRAuRiAJ9ohBLd7s2kqjkKlq1qqC57SbnmzQCdG4ui
nLE/L9aUXdWeTFPron96DLA=
=2E+0
-----END PGP SIGNATURE-----</literallayout>
<simpara>See the <xref linkend="git-tag(1)" /> command to learn how to create and verify tag
objects.  (Note that <xref linkend="git-tag(1)" /> can also be used to create
"lightweight tags", which are not tag objects at all, but just simple
references whose names begin with <emphasis>refs/tags/</emphasis>).</simpara>
</section>
<section id="Git User Manual_pack-files">
<title>How Git stores objects efficiently: pack files</title>
<simpara>Newly created objects are initially created in a file named after the
object's SHA-1 hash (stored in <emphasis>.git/objects</emphasis>).</simpara>
<simpara>Unfortunately this system becomes inefficient once a project has a
lot of objects.  Try this on an old project:</simpara>
<literallayout>$ git count-objects
6930 objects, 47620 kilobytes</literallayout>
<simpara>The first number is the number of objects which are kept in
individual files.  The second is the amount of space taken up by
those "loose" objects.</simpara>
<simpara>You can save space and make Git faster by moving these loose objects in
to a "pack file", which stores a group of objects in an efficient
compressed format; the details of how pack files are formatted can be
found in link:technical/pack-format.html[pack format].</simpara>
<simpara>To put the loose objects into a pack, just run git repack:</simpara>
<literallayout>$ git repack
Counting objects: 6020, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (6020/6020), done.
Writing objects: 100% (6020/6020), done.
Total 6020 (delta 4070), reused 0 (delta 0)</literallayout>
<simpara>This creates a single "pack file" in .git/objects/pack/
containing all currently unpacked objects.  You can then run</simpara>
<literallayout>$ git prune</literallayout>
<simpara>to remove any of the "loose" objects that are now contained in the
pack.  This will also remove any unreferenced objects (which may be
created when, for example, you use <emphasis>git reset</emphasis> to remove a commit).
You can verify that the loose objects are gone by looking at the
<emphasis>.git/objects</emphasis> directory or by running</simpara>
<literallayout>$ git count-objects
0 objects, 0 kilobytes</literallayout>
<simpara>Although the object files are gone, any commands that refer to those
objects will work exactly as they did before.</simpara>
<simpara>The <xref linkend="git-gc(1)" /> command performs packing, pruning, and more for
you, so is normally the only high-level command you need.</simpara>
</section>
<section id="Git User Manual_dangling-objects">
<title>Dangling objects</title>
<simpara>The <xref linkend="git-fsck(1)" /> command will sometimes complain about dangling
objects.  They are not a problem.</simpara>
<simpara>The most common cause of dangling objects is that you've rebased a
branch, or you have pulled from somebody else who rebased a branch--see
<xref linkend="Git User Manual_cleaning-up-history"/>.  In that case, the old head of the original
branch still exists, as does everything it pointed to. The branch
pointer itself just doesn't, since you replaced it with another one.</simpara>
<simpara>There are also other situations that cause dangling objects. For
example, a "dangling blob" may arise because you did a <emphasis>git add</emphasis> of a
file, but then, before you actually committed it and made it part of the
bigger picture, you changed something else in that file and committed
that <emphasis role="strong">updated</emphasis> thing--the old state that you added originally ends up
not being pointed to by any commit or tree, so it's now a dangling blob
object.</simpara>
<simpara>Similarly, when the "recursive" merge strategy runs, and finds that
there are criss-cross merges and thus more than one merge base (which is
fairly unusual, but it does happen), it will generate one temporary
midway tree (or possibly even more, if you had lots of criss-crossing
merges and more than two merge bases) as a temporary internal merge
base, and again, those are real objects, but the end result will not end
up pointing to them, so they end up "dangling" in your repository.</simpara>
<simpara>Generally, dangling objects aren't anything to worry about. They can
even be very useful: if you screw something up, the dangling objects can
be how you recover your old tree (say, you did a rebase, and realized
that you really didn't want to--you can look at what dangling objects
you have, and decide to reset your head to some old dangling state).</simpara>
<simpara>For commits, you can just use:</simpara>
<literallayout>$ gitk &lt;dangling-commit-sha-goes-here&gt; --not --all</literallayout>
<simpara>This asks for all the history reachable from the given commit but not
from any branch, tag, or other reference.  If you decide it's something
you want, you can always create a new reference to it, e.g.,</simpara>
<literallayout>$ git branch recovered-branch &lt;dangling-commit-sha-goes-here&gt;</literallayout>
<simpara>For blobs and trees, you can't do the same, but you can still examine
them.  You can just do</simpara>
<literallayout>$ git show &lt;dangling-blob/tree-sha-goes-here&gt;</literallayout>
<simpara>to show what the contents of the blob were (or, for a tree, basically
what the <emphasis>ls</emphasis> for that directory was), and that may give you some idea
of what the operation was that left that dangling object.</simpara>
<simpara>Usually, dangling blobs and trees aren't very interesting. They're
almost always the result of either being a half-way mergebase (the blob
will often even have the conflict markers from a merge in it, if you
have had conflicting merges that you fixed up by hand), or simply
because you interrupted a <emphasis>git fetch</emphasis> with ^C or something like that,
leaving <emphasis>some</emphasis> of the new objects in the object database, but just
dangling and useless.</simpara>
<simpara>Anyway, once you are sure that you're not interested in any dangling
state, you can just prune all unreachable objects:</simpara>
<literallayout>$ git prune</literallayout>
<simpara>and they'll be gone. (You should only run <emphasis>git prune</emphasis> on a quiescent
repository--it's kind of like doing a filesystem fsck recovery: you
don't want to do that while the filesystem is mounted.
<emphasis>git prune</emphasis> is designed not to cause any harm in such cases of concurrent
accesses to a repository but you might receive confusing or scary messages.)</simpara>
</section>
<section id="Git User Manual_recovering-from-repository-corruption">
<title>Recovering from repository corruption</title>
<simpara>By design, Git treats data trusted to it with caution.  However, even in
the absence of bugs in Git itself, it is still possible that hardware or
operating system errors could corrupt data.</simpara>
<simpara>The first defense against such problems is backups.  You can back up a
Git directory using clone, or just using cp, tar, or any other backup
mechanism.</simpara>
<simpara>As a last resort, you can search for the corrupted objects and attempt
to replace them by hand.  Back up your repository before attempting this
in case you corrupt things even more in the process.</simpara>
<simpara>We'll assume that the problem is a single missing or corrupted blob,
which is sometimes a solvable problem.  (Recovering missing trees and
especially commits is <emphasis role="strong">much</emphasis> harder).</simpara>
<simpara>Before starting, verify that there is corruption, and figure out where
it is with <xref linkend="git-fsck(1)" />; this may be time-consuming.</simpara>
<simpara>Assume the output looks like this:</simpara>
<literallayout>$ git fsck --full --no-dangling
broken link from    tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8
              to    blob 4b9458b3786228369c63936db65827de3cc06200
missing blob 4b9458b3786228369c63936db65827de3cc06200</literallayout>
<simpara>Now you know that blob 4b9458b3 is missing, and that the tree 2d9263c6
points to it.  If you could find just one copy of that missing blob
object, possibly in some other repository, you could move it into
<emphasis>.git/objects/4b/9458b3...</emphasis> and be done.  Suppose you can't.  You can
still examine the tree that pointed to it with <xref linkend="git-ls-tree(1)" />,
which might output something like:</simpara>
<literallayout>$ git ls-tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8
100644 blob 8d14531846b95bfa3564b58ccfb7913a034323b8    .gitignore
100644 blob ebf9bf84da0aab5ed944264a5db2a65fe3a3e883    .mailmap
100644 blob ca442d313d86dc67e0a2e5d584b465bd382cbf5c    COPYING
...
100644 blob 4b9458b3786228369c63936db65827de3cc06200    myfile
...</literallayout>
<simpara>So now you know that the missing blob was the data for a file named
<emphasis>myfile</emphasis>.  And chances are you can also identify the directory--let's
say it's in <emphasis>somedirectory</emphasis>.  If you're lucky the missing copy might be
the same as the copy you have checked out in your working tree at
<emphasis>somedirectory/myfile</emphasis>; you can test whether that's right with
<xref linkend="git-hash-object(1)" />:</simpara>
<literallayout>$ git hash-object -w somedirectory/myfile</literallayout>
<simpara>which will create and store a blob object with the contents of
somedirectory/myfile, and output the SHA-1 of that object.  if you're
extremely lucky it might be 4b9458b3786228369c63936db65827de3cc06200, in
which case you've guessed right, and the corruption is fixed!</simpara>
<simpara>Otherwise, you need more information.  How do you tell which version of
the file has been lost?</simpara>
<simpara>The easiest way to do this is with:</simpara>
<literallayout>$ git log --raw --all --full-history -- somedirectory/myfile</literallayout>
<simpara>Because you're asking for raw output, you'll now get something like</simpara>
<literallayout>commit abc
Author:
Date:
...
:100644 100644 4b9458b... newsha... M somedirectory/myfile


commit xyz
Author:
Date:

...
:100644 100644 oldsha... 4b9458b... M somedirectory/myfile</literallayout>
<simpara>This tells you that the immediately following version of the file was
"newsha", and that the immediately preceding version was "oldsha".
You also know the commit messages that went with the change from oldsha
to 4b9458b and with the change from 4b9458b to newsha.</simpara>
<simpara>If you've been committing small enough changes, you may now have a good
shot at reconstructing the contents of the in-between state 4b9458b.</simpara>
<simpara>If you can do that, you can now recreate the missing object with</simpara>
<literallayout>$ git hash-object -w &lt;recreated-file&gt;</literallayout>
<simpara>and your repository is good again!</simpara>
<simpara>(Btw, you could have ignored the <emphasis>fsck</emphasis>, and started with doing a</simpara>
<literallayout>$ git log --raw --all</literallayout>
<simpara>and just looked for the sha of the missing object (4b9458b..) in that
whole thing. It's up to you--Git does <emphasis role="strong">have</emphasis> a lot of information, it is
just missing one particular blob version.</simpara>
</section>
</section>
<section id="Git User Manual_the-index">
<title>The index</title>
<simpara>The index is a binary file (generally kept in <emphasis>.git/index</emphasis>) containing a
sorted list of path names, each with permissions and the SHA-1 of a blob
object; <xref linkend="git-ls-files(1)" /> can show you the contents of the index:</simpara>
<literallayout>$ git ls-files --stage
100644 63c918c667fa005ff12ad89437f2fdc80926e21c 0       .gitignore
100644 5529b198e8d14decbe4ad99db3f7fb632de0439d 0       .mailmap
100644 6ff87c4664981e4397625791c8ea3bbb5f2279a3 0       COPYING
100644 a37b2152bd26be2c2289e1f57a292534a51a93c7 0       Documentation/.gitignore
100644 fbefe9a45b00a54b58d94d06eca48b03d40a50e0 0       Documentation/Makefile
...
100644 2511aef8d89ab52be5ec6a5e46236b4b6bcd07ea 0       xdiff/xtypes.h
100644 2ade97b2574a9f77e7ae4002a4e07a6a38e46d07 0       xdiff/xutils.c
100644 d5de8292e05e7c36c4b68857c1cf9855e3d2f70a 0       xdiff/xutils.h</literallayout>
<simpara>Note that in older documentation you may see the index called the
"current directory cache" or just the "cache".  It has three important
properties:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
The index contains all the information necessary to generate a single
(uniquely determined) tree object.
</simpara>
<simpara>For example, running <xref linkend="git-commit(1)" /> generates this tree object
from the index, stores it in the object database, and uses it as the
tree object associated with the new commit.</simpara>
</listitem>
<listitem>
<simpara>
The index enables fast comparisons between the tree object it defines
and the working tree.
</simpara>
<simpara>It does this by storing some additional data for each entry (such as
the last modified time).  This data is not displayed above, and is not
stored in the created tree object, but it can be used to determine
quickly which files in the working directory differ from what was
stored in the index, and thus save Git from having to read all of the
data from such files to look for changes.</simpara>
</listitem>
<listitem>
<simpara>
It can efficiently represent information about merge conflicts
between different tree objects, allowing each pathname to be
associated with sufficient information about the trees involved that
you can create a three-way merge between them.
</simpara>
<simpara>We saw in <xref linkend="Git User Manual_conflict-resolution"/> that during a merge the index can
store multiple versions of a single file (called "stages").  The third
column in the <xref linkend="git-ls-files(1)" /> output above is the stage
number, and will take on values other than 0 for files with merge
conflicts.</simpara>
</listitem>
</orderedlist>
<simpara>The index is thus a sort of temporary staging area, which is filled with
a tree which you are in the process of working on.</simpara>
<simpara>If you blow the index away entirely, you generally haven't lost any
information as long as you have the name of the tree that it described.</simpara>
</section>
</section>
<section id="Git User Manual_submodules">
<title>Submodules</title>
<simpara>Large projects are often composed of smaller, self-contained modules.  For
example, an embedded Linux distribution's source tree would include every
piece of software in the distribution with some local modifications; a movie
player might need to build against a specific, known-working version of a
decompression library; several independent programs might all share the same
build scripts.</simpara>
<simpara>With centralized revision control systems this is often accomplished by
including every module in one single repository.  Developers can check out
all modules or only the modules they need to work with.  They can even modify
files across several modules in a single commit while moving things around
or updating APIs and translations.</simpara>
<simpara>Git does not allow partial checkouts, so duplicating this approach in Git
would force developers to keep a local copy of modules they are not
interested in touching.  Commits in an enormous checkout would be slower
than you'd expect as Git would have to scan every directory for changes.
If modules have a lot of local history, clones would take forever.</simpara>
<simpara>On the plus side, distributed revision control systems can much better
integrate with external sources.  In a centralized model, a single arbitrary
snapshot of the external project is exported from its own revision control
and then imported into the local revision control on a vendor branch.  All
the history is hidden.  With distributed revision control you can clone the
entire external history and much more easily follow development and re-merge
local changes.</simpara>
<simpara>Git's submodule support allows a repository to contain, as a subdirectory, a
checkout of an external project.  Submodules maintain their own identity;
the submodule support just stores the submodule repository location and
commit ID, so other developers who clone the containing project
("superproject") can easily clone all the submodules at the same revision.
Partial checkouts of the superproject are possible: you can tell Git to
clone none, some or all of the submodules.</simpara>
<simpara>The <xref linkend="git-submodule(1)" /> command is available since Git 1.5.3.  Users
with Git 1.5.2 can look up the submodule commits in the repository and
manually check them out; earlier versions won't recognize the submodules at
all.</simpara>
<simpara>To see how submodule support works, create four example
repositories that can be used later as a submodule:</simpara>
<literallayout>$ mkdir ~/git
$ cd ~/git
$ for i in a b c d
do
        mkdir $i
        cd $i
        git init
        echo "module $i" &gt; $i.txt
        git add $i.txt
        git commit -m "Initial commit, submodule $i"
        cd ..
done</literallayout>
<simpara>Now create the superproject and add all the submodules:</simpara>
<literallayout>$ mkdir super
$ cd super
$ git init
$ for i in a b c d
do
        git submodule add ~/git/$i $i
done</literallayout>
<note><simpara>Do not use local URLs here if you plan to publish your superproject!</simpara></note>
<simpara>See what files <emphasis>git submodule</emphasis> created:</simpara>
<literallayout>$ ls -a
.  ..  .git  .gitmodules  a  b  c  d</literallayout>
<simpara>The <emphasis>git submodule add &lt;repo&gt; &lt;path&gt;</emphasis> command does a couple of things:</simpara>
<itemizedlist>
<listitem>
<simpara>
It clones the submodule from <emphasis>&lt;repo&gt;</emphasis> to the given <emphasis>&lt;path&gt;</emphasis> under the
  current directory and by default checks out the master branch.
</simpara>
</listitem>
<listitem>
<simpara>
It adds the submodule's clone path to the <xref linkend="gitmodules(5)" /> file and
  adds this file to the index, ready to be committed.
</simpara>
</listitem>
<listitem>
<simpara>
It adds the submodule's current commit ID to the index, ready to be
  committed.
</simpara>
</listitem>
</itemizedlist>
<simpara>Commit the superproject:</simpara>
<literallayout>$ git commit -m "Add submodules a, b, c and d."</literallayout>
<simpara>Now clone the superproject:</simpara>
<literallayout>$ cd ..
$ git clone super cloned
$ cd cloned</literallayout>
<simpara>The submodule directories are there, but they're empty:</simpara>
<literallayout>$ ls -a a
.  ..
$ git submodule status
-d266b9873ad50488163457f025db7cdd9683d88b a
-e81d457da15309b4fef4249aba9b50187999670d b
-c1536a972b9affea0f16e0680ba87332dc059146 c
-d96249ff5d57de5de093e6baff9e0aafa5276a74 d</literallayout>
<note><simpara>The commit object names shown above would be different for you, but they
should match the HEAD commit object names of your repositories.  You can check
it by running <emphasis>git ls-remote ../a</emphasis>.</simpara></note>
<simpara>Pulling down the submodules is a two-step process. First run <emphasis>git submodule
init</emphasis> to add the submodule repository URLs to <emphasis>.git/config</emphasis>:</simpara>
<literallayout>$ git submodule init</literallayout>
<simpara>Now use <emphasis>git submodule update</emphasis> to clone the repositories and check out the
commits specified in the superproject:</simpara>
<literallayout>$ git submodule update
$ cd a
$ ls -a
.  ..  .git  a.txt</literallayout>
<simpara>One major difference between <emphasis>git submodule update</emphasis> and <emphasis>git submodule add</emphasis> is
that <emphasis>git submodule update</emphasis> checks out a specific commit, rather than the tip
of a branch. It's like checking out a tag: the head is detached, so you're not
working on a branch.</simpara>
<literallayout>$ git branch
* (detached from d266b98)
  master</literallayout>
<simpara>If you want to make a change within a submodule and you have a detached head,
then you should create or checkout a branch, make your changes, publish the
change within the submodule, and then update the superproject to reference the
new commit:</simpara>
<literallayout>$ git checkout master</literallayout>
<simpara>or</simpara>
<literallayout>$ git checkout -b fix-up</literallayout>
<simpara>then</simpara>
<literallayout>$ echo "adding a line again" &gt;&gt; a.txt
$ git commit -a -m "Updated the submodule from within the superproject."
$ git push
$ cd ..
$ git diff
diff --git a/a b/a
index d266b98..261dfac 160000
--- a/a
+++ b/a
@@ -1 +1 @@
-Subproject commit d266b9873ad50488163457f025db7cdd9683d88b
+Subproject commit 261dfac35cb99d380eb966e102c1197139f7fa24
$ git add a
$ git commit -m "Updated submodule a."
$ git push</literallayout>
<simpara>You have to run <emphasis>git submodule update</emphasis> after <emphasis>git pull</emphasis> if you want to update
submodules, too.</simpara>
<section id="Git User Manual__pitfalls_with_submodules">
<title>Pitfalls with submodules</title>
<simpara>Always publish the submodule change before publishing the change to the
superproject that references it. If you forget to publish the submodule change,
others won't be able to clone the repository:</simpara>
<literallayout>$ cd ~/git/super/a
$ echo i added another line to this file &gt;&gt; a.txt
$ git commit -a -m "doing it wrong this time"
$ cd ..
$ git add a
$ git commit -m "Updated submodule a again."
$ git push
$ cd ~/git/cloned
$ git pull
$ git submodule update
error: pathspec '261dfac35cb99d380eb966e102c1197139f7fa24' did not match any file(s) known to git.
Did you forget to 'git add'?
Unable to checkout '261dfac35cb99d380eb966e102c1197139f7fa24' in submodule path 'a'</literallayout>
<simpara>In older Git versions it could be easily forgotten to commit new or modified
files in a submodule, which silently leads to similar problems as not pushing
the submodule changes. Starting with Git 1.7.0 both <emphasis>git status</emphasis> and <emphasis>git diff</emphasis>
in the superproject show submodules as modified when they contain new or
modified files to protect against accidentally committing such a state. <emphasis>git
diff</emphasis> will also add a <emphasis>-dirty</emphasis> to the work tree side when generating patch
output or used with the <emphasis>--submodule</emphasis> option:</simpara>
<literallayout>$ git diff
diff --git a/sub b/sub
--- a/sub
+++ b/sub
@@ -1 +1 @@
-Subproject commit 3f356705649b5d566d97ff843cf193359229a453
+Subproject commit 3f356705649b5d566d97ff843cf193359229a453-dirty
$ git diff --submodule
Submodule sub 3f35670..3f35670-dirty:</literallayout>
<simpara>You also should not rewind branches in a submodule beyond commits that were
ever recorded in any superproject.</simpara>
<simpara>It's not safe to run <emphasis>git submodule update</emphasis> if you've made and committed
changes within a submodule without checking out a branch first. They will be
silently overwritten:</simpara>
<literallayout>$ cat a.txt
module a
$ echo line added from private2 &gt;&gt; a.txt
$ git commit -a -m "line added inside private2"
$ cd ..
$ git submodule update
Submodule path 'a': checked out 'd266b9873ad50488163457f025db7cdd9683d88b'
$ cd a
$ cat a.txt
module a</literallayout>
<note><simpara>The changes are still visible in the submodule's reflog.</simpara></note>
<simpara>If you have uncommitted changes in your submodule working tree, <emphasis>git
submodule update</emphasis> will not overwrite them.  Instead, you get the usual
warning about not being able switch from a dirty branch.</simpara>
</section>
</section>
<section id="Git User Manual_low-level-operations">
<title>Low-level Git operations</title>
<simpara>Many of the higher-level commands were originally implemented as shell
scripts using a smaller core of low-level Git commands.  These can still
be useful when doing unusual things with Git, or just as a way to
understand its inner workings.</simpara>
<section id="Git User Manual_object-manipulation">
<title>Object access and manipulation</title>
<simpara>The <xref linkend="git-cat-file(1)" /> command can show the contents of any object,
though the higher-level <xref linkend="git-show(1)" /> is usually more useful.</simpara>
<simpara>The <xref linkend="git-commit-tree(1)" /> command allows constructing commits with
arbitrary parents and trees.</simpara>
<simpara>A tree can be created with <xref linkend="git-write-tree(1)" /> and its data can be
accessed by <xref linkend="git-ls-tree(1)" />.  Two trees can be compared with
<xref linkend="git-diff-tree(1)" />.</simpara>
<simpara>A tag is created with <xref linkend="git-mktag(1)" />, and the signature can be
verified by <xref linkend="git-verify-tag(1)" />, though it is normally simpler to
use <xref linkend="git-tag(1)" /> for both.</simpara>
</section>
<section id="Git User Manual_the-workflow">
<title>The Workflow</title>
<simpara>High-level operations such as <xref linkend="git-commit(1)" />,
<xref linkend="git-checkout(1)" /> and <xref linkend="git-reset(1)" /> work by moving data
between the working tree, the index, and the object database.  Git
provides low-level operations which perform each of these steps
individually.</simpara>
<simpara>Generally, all Git operations work on the index file. Some operations
work <emphasis role="strong">purely</emphasis> on the index file (showing the current state of the
index), but most operations move data between the index file and either
the database or the working directory. Thus there are four main
combinations:</simpara>
<section id="Git User Manual_working-directory-to-index">
<title>working directory &#8594; index</title>
<simpara>The <xref linkend="git-update-index(1)" /> command updates the index with
information from the working directory.  You generally update the
index information by just specifying the filename you want to update,
like so:</simpara>
<literallayout>$ git update-index filename</literallayout>
<simpara>but to avoid common mistakes with filename globbing etc., the command
will not normally add totally new entries or remove old entries,
i.e. it will normally just update existing cache entries.</simpara>
<simpara>To tell Git that yes, you really do realize that certain files no
longer exist, or that new files should be added, you
should use the <emphasis>--remove</emphasis> and <emphasis>--add</emphasis> flags respectively.</simpara>
<simpara>NOTE! A <emphasis>--remove</emphasis> flag does <emphasis>not</emphasis> mean that subsequent filenames will
necessarily be removed: if the files still exist in your directory
structure, the index will be updated with their new status, not
removed. The only thing <emphasis>--remove</emphasis> means is that update-index will be
considering a removed file to be a valid thing, and if the file really
does not exist any more, it will update the index accordingly.</simpara>
<simpara>As a special case, you can also do <emphasis>git update-index --refresh</emphasis>, which
will refresh the "stat" information of each index to match the current
stat information. It will <emphasis>not</emphasis> update the object status itself, and
it will only update the fields that are used to quickly test whether
an object still matches its old backing store object.</simpara>
<simpara>The previously introduced <xref linkend="git-add(1)" /> is just a wrapper for
<xref linkend="git-update-index(1)" />.</simpara>
</section>
<section id="Git User Manual_index-to-object-database">
<title>index &#8594; object database</title>
<simpara>You write your current index file to a "tree" object with the program</simpara>
<literallayout>$ git write-tree</literallayout>
<simpara>that doesn't come with any options--it will just write out the
current index into the set of tree objects that describe that state,
and it will return the name of the resulting top-level tree. You can
use that tree to re-generate the index at any time by going in the
other direction:</simpara>
</section>
<section id="Git User Manual_object-database-to-index">
<title>object database &#8594; index</title>
<simpara>You read a "tree" file from the object database, and use that to
populate (and overwrite--don't do this if your index contains any
unsaved state that you might want to restore later!) your current
index.  Normal operation is just</simpara>
<literallayout>$ git read-tree &lt;SHA-1 of tree&gt;</literallayout>
<simpara>and your index file will now be equivalent to the tree that you saved
earlier. However, that is only your <emphasis>index</emphasis> file: your working
directory contents have not been modified.</simpara>
</section>
<section id="Git User Manual_index-to-working-directory">
<title>index &#8594; working directory</title>
<simpara>You update your working directory from the index by "checking out"
files. This is not a very common operation, since normally you'd just
keep your files updated, and rather than write to your working
directory, you'd tell the index files about the changes in your
working directory (i.e. <emphasis>git update-index</emphasis>).</simpara>
<simpara>However, if you decide to jump to a new version, or check out somebody
else's version, or just restore a previous tree, you'd populate your
index file with read-tree, and then you need to check out the result
with</simpara>
<literallayout>$ git checkout-index filename</literallayout>
<simpara>or, if you want to check out all of the index, use <emphasis>-a</emphasis>.</simpara>
<simpara>NOTE! <emphasis>git checkout-index</emphasis> normally refuses to overwrite old files, so
if you have an old version of the tree already checked out, you will
need to use the <emphasis>-f</emphasis> flag (<emphasis>before</emphasis> the <emphasis>-a</emphasis> flag or the filename) to
<emphasis>force</emphasis> the checkout.</simpara>
<simpara>Finally, there are a few odds and ends which are not purely moving
from one representation to the other:</simpara>
</section>
<section id="Git User Manual_tying-it-all-together">
<title>Tying it all together</title>
<simpara>To commit a tree you have instantiated with <emphasis>git write-tree</emphasis>, you'd
create a "commit" object that refers to that tree and the history
behind it--most notably the "parent" commits that preceded it in
history.</simpara>
<simpara>Normally a "commit" has one parent: the previous state of the tree
before a certain change was made. However, sometimes it can have two
or more parent commits, in which case we call it a "merge", due to the
fact that such a commit brings together ("merges") two or more
previous states represented by other commits.</simpara>
<simpara>In other words, while a "tree" represents a particular directory state
of a working directory, a "commit" represents that state in time,
and explains how we got there.</simpara>
<simpara>You create a commit object by giving it the tree that describes the
state at the time of the commit, and a list of parents:</simpara>
<literallayout>$ git commit-tree &lt;tree&gt; -p &lt;parent&gt; [(-p &lt;parent2&gt;)...]</literallayout>
<simpara>and then giving the reason for the commit on stdin (either through
redirection from a pipe or file, or by just typing it at the tty).</simpara>
<simpara><emphasis>git commit-tree</emphasis> will return the name of the object that represents
that commit, and you should save it away for later use. Normally,
you'd commit a new <emphasis>HEAD</emphasis> state, and while Git doesn't care where you
save the note about that state, in practice we tend to just write the
result to the file pointed at by <emphasis>.git/HEAD</emphasis>, so that we can always see
what the last committed state was.</simpara>
<simpara>Here is a picture that illustrates how various pieces fit together:</simpara>
<literallayout>                     commit-tree
                      commit obj
                       +----+
                       |    |
                       |    |
                       V    V
                    +-----------+
                    | Object DB |
                    |  Backing  |
                    |   Store   |
                    +-----------+
                       ^
           write-tree  |     |
             tree obj  |     |
                       |     |  read-tree
                       |     |  tree obj
                             V
                    +-----------+
                    |   Index   |
                    |  "cache"  |
                    +-----------+
         update-index  ^
             blob obj  |     |
                       |     |
    checkout-index -u  |     |  checkout-index
             stat      |     |  blob obj
                             V
                    +-----------+
                    |  Working  |
                    | Directory |
                    +-----------+</literallayout>
</section>
</section>
<section id="Git User Manual_examining-the-data">
<title>Examining the data</title>
<simpara>You can examine the data represented in the object database and the
index with various helper tools. For every object, you can use
<xref linkend="git-cat-file(1)" /> to examine details about the
object:</simpara>
<literallayout>$ git cat-file -t &lt;objectname&gt;</literallayout>
<simpara>shows the type of the object, and once you have the type (which is
usually implicit in where you find the object), you can use</simpara>
<literallayout>$ git cat-file blob|tree|commit|tag &lt;objectname&gt;</literallayout>
<simpara>to show its contents. NOTE! Trees have binary content, and as a result
there is a special helper for showing that content, called
<emphasis>git ls-tree</emphasis>, which turns the binary content into a more easily
readable form.</simpara>
<simpara>It's especially instructive to look at "commit" objects, since those
tend to be small and fairly self-explanatory. In particular, if you
follow the convention of having the top commit name in <emphasis>.git/HEAD</emphasis>,
you can do</simpara>
<literallayout>$ git cat-file commit HEAD</literallayout>
<simpara>to see what the top commit was.</simpara>
</section>
<section id="Git User Manual_merging-multiple-trees">
<title>Merging multiple trees</title>
<simpara>Git can help you perform a three-way merge, which can in turn be
used for a many-way merge by repeating the merge procedure several
times.  The usual situation is that you only do one three-way merge
(reconciling two lines of history) and commit the result, but if
you like to, you can merge several branches in one go.</simpara>
<simpara>To perform a three-way merge, you start with the two commits you
want to merge, find their closest common parent (a third commit),
and compare the trees corresponding to these three commits.</simpara>
<simpara>To get the "base" for the merge, look up the common parent of two
commits:</simpara>
<literallayout>$ git merge-base &lt;commit1&gt; &lt;commit2&gt;</literallayout>
<simpara>This prints the name of a commit they are both based on. You should
now look up the tree objects of those commits, which you can easily
do with</simpara>
<literallayout>$ git cat-file commit &lt;commitname&gt; | head -1</literallayout>
<simpara>since the tree object information is always the first line in a commit
object.</simpara>
<simpara>Once you know the three trees you are going to merge (the one "original"
tree, aka the common tree, and the two "result" trees, aka the branches
you want to merge), you do a "merge" read into the index. This will
complain if it has to throw away your old index contents, so you should
make sure that you've committed those--in fact you would normally
always do a merge against your last commit (which should thus match what
you have in your current index anyway).</simpara>
<simpara>To do the merge, do</simpara>
<literallayout>$ git read-tree -m -u &lt;origtree&gt; &lt;yourtree&gt; &lt;targettree&gt;</literallayout>
<simpara>which will do all trivial merge operations for you directly in the
index file, and you can just write the result out with
<emphasis>git write-tree</emphasis>.</simpara>
</section>
<section id="Git User Manual_merging-multiple-trees-2">
<title>Merging multiple trees, continued</title>
<simpara>Sadly, many merges aren't trivial. If there are files that have
been added, moved or removed, or if both branches have modified the
same file, you will be left with an index tree that contains "merge
entries" in it. Such an index tree can <emphasis>NOT</emphasis> be written out to a tree
object, and you will have to resolve any such merge clashes using
other tools before you can write out the result.</simpara>
<simpara>You can examine such index state with <emphasis>git ls-files --unmerged</emphasis>
command.  An example:</simpara>
<literallayout>$ git read-tree -m $orig HEAD $target
$ git ls-files --unmerged
100644 263414f423d0e4d70dae8fe53fa34614ff3e2860 1       hello.c
100644 06fa6a24256dc7e560efa5687fa84b51f0263c3a 2       hello.c
100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello.c</literallayout>
<simpara>Each line of the <emphasis>git ls-files --unmerged</emphasis> output begins with
the blob mode bits, blob SHA-1, <emphasis>stage number</emphasis>, and the
filename.  The <emphasis>stage number</emphasis> is Git's way to say which tree it
came from: stage 1 corresponds to the <emphasis>$orig</emphasis> tree, stage 2 to
the <emphasis>HEAD</emphasis> tree, and stage 3 to the <emphasis>$target</emphasis> tree.</simpara>
<simpara>Earlier we said that trivial merges are done inside
<emphasis>git read-tree -m</emphasis>.  For example, if the file did not change
from <emphasis>$orig</emphasis> to <emphasis>HEAD</emphasis> or <emphasis>$target</emphasis>, or if the file changed
from <emphasis>$orig</emphasis> to <emphasis>HEAD</emphasis> and <emphasis>$orig</emphasis> to <emphasis>$target</emphasis> the same way,
obviously the final outcome is what is in <emphasis>HEAD</emphasis>.  What the
above example shows is that file <emphasis>hello.c</emphasis> was changed from
<emphasis>$orig</emphasis> to <emphasis>HEAD</emphasis> and <emphasis>$orig</emphasis> to <emphasis>$target</emphasis> in a different way.
You could resolve this by running your favorite 3-way merge
program, e.g.  <emphasis>diff3</emphasis>, <emphasis>merge</emphasis>, or Git's own merge-file, on
the blob objects from these three stages yourself, like this:</simpara>
<literallayout>$ git cat-file blob 263414f... &gt;hello.c~1
$ git cat-file blob 06fa6a2... &gt;hello.c~2
$ git cat-file blob cc44c73... &gt;hello.c~3
$ git merge-file hello.c~2 hello.c~1 hello.c~3</literallayout>
<simpara>This would leave the merge result in <emphasis>hello.c~2</emphasis> file, along
with conflict markers if there are conflicts.  After verifying
the merge result makes sense, you can tell Git what the final
merge result for this file is by:</simpara>
<literallayout>$ mv -f hello.c~2 hello.c
$ git update-index hello.c</literallayout>
<simpara>When a path is in the "unmerged" state, running <emphasis>git update-index</emphasis> for
that path tells Git to mark the path resolved.</simpara>
<simpara>The above is the description of a Git merge at the lowest level,
to help you understand what conceptually happens under the hood.
In practice, nobody, not even Git itself, runs <emphasis>git cat-file</emphasis> three times
for this.  There is a <emphasis>git merge-index</emphasis> program that extracts the
stages to temporary files and calls a "merge" script on it:</simpara>
<literallayout>$ git merge-index git-merge-one-file hello.c</literallayout>
<simpara>and that is what higher level <emphasis>git merge -s resolve</emphasis> is implemented with.</simpara>
</section>
</section>
<section id="Git User Manual_hacking-git">
<title>Hacking Git</title>
<simpara>This chapter covers internal details of the Git implementation which
probably only Git developers need to understand.</simpara>
<section id="Git User Manual_object-details">
<title>Object storage format</title>
<simpara>All objects have a statically determined "type" which identifies the
format of the object (i.e. how it is used, and how it can refer to other
objects).  There are currently four different object types: "blob",
"tree", "commit", and "tag".</simpara>
<simpara>Regardless of object type, all objects share the following
characteristics: they are all deflated with zlib, and have a header
that not only specifies their type, but also provides size information
about the data in the object.  It's worth noting that the SHA-1 hash
that is used to name the object is the hash of the original data
plus this header, so <emphasis>sha1sum</emphasis> <emphasis>file</emphasis> does not match the object name
for <emphasis>file</emphasis>.</simpara>
<simpara>As a result, the general consistency of an object can always be tested
independently of the contents or the type of the object: all objects can
be validated by verifying that (a) their hashes match the content of the
file and (b) the object successfully inflates to a stream of bytes that
forms a sequence of
<emphasis>&lt;ascii type without space&gt; + &lt;space&gt; + &lt;ascii decimal size&gt; +
&lt;byte\0&gt; + &lt;binary object data&gt;</emphasis>.</simpara>
<simpara>The structured objects can further have their structure and
connectivity to other objects verified. This is generally done with
the <emphasis>git fsck</emphasis> program, which generates a full dependency graph
of all objects, and verifies their internal consistency (in addition
to just verifying their superficial consistency through the hash).</simpara>
</section>
<section id="Git User Manual_birdview-on-the-source-code">
<title>A birds-eye view of Git's source code</title>
<simpara>It is not always easy for new developers to find their way through Git's
source code.  This section gives you a little guidance to show where to
start.</simpara>
<simpara>A good place to start is with the contents of the initial commit, with:</simpara>
<literallayout>$ git checkout e83c5163</literallayout>
<simpara>The initial revision lays the foundation for almost everything Git has
today, but is small enough to read in one sitting.</simpara>
<simpara>Note that terminology has changed since that revision.  For example, the
README in that revision uses the word "changeset" to describe what we
now call a <link linkend="Git User Manual_def_commit_object">commit</link>.</simpara>
<simpara>Also, we do not call it "cache" any more, but rather "index"; however, the
file is still called <emphasis>cache.h</emphasis>.  Remark: Not much reason to change it now,
especially since there is no good single name for it anyway, because it is
basically <emphasis>the</emphasis> header file which is included by <emphasis>all</emphasis> of Git's C sources.</simpara>
<simpara>If you grasp the ideas in that initial commit, you should check out a
more recent version and skim <emphasis>cache.h</emphasis>, <emphasis>object.h</emphasis> and <emphasis>commit.h</emphasis>.</simpara>
<simpara>In the early days, Git (in the tradition of UNIX) was a bunch of programs
which were extremely simple, and which you used in scripts, piping the
output of one into another. This turned out to be good for initial
development, since it was easier to test new things.  However, recently
many of these parts have become builtins, and some of the core has been
"libified", i.e. put into libgit.a for performance, portability reasons,
and to avoid code duplication.</simpara>
<simpara>By now, you know what the index is (and find the corresponding data
structures in <emphasis>cache.h</emphasis>), and that there are just a couple of object types
(blobs, trees, commits and tags) which inherit their common structure from
<emphasis>struct object</emphasis>, which is their first member (and thus, you can cast e.g.
<emphasis>(struct object *)commit</emphasis> to achieve the <emphasis>same</emphasis> as <emphasis>&amp;commit-&gt;object</emphasis>, i.e.
get at the object name and flags).</simpara>
<simpara>Now is a good point to take a break to let this information sink in.</simpara>
<simpara>Next step: get familiar with the object naming.  Read <xref linkend="Git User Manual_naming-commits"/>.
There are quite a few ways to name an object (and not only revisions!).
All of these are handled in <emphasis>sha1_name.c</emphasis>. Just have a quick look at
the function <emphasis>get_sha1()</emphasis>. A lot of the special handling is done by
functions like <emphasis>get_sha1_basic()</emphasis> or the likes.</simpara>
<simpara>This is just to get you into the groove for the most libified part of Git:
the revision walker.</simpara>
<simpara>Basically, the initial version of <emphasis>git log</emphasis> was a shell script:</simpara>
<literallayout>$ git-rev-list --pretty $(git-rev-parse --default HEAD "$@") | \
        LESS=-S ${PAGER:-less}</literallayout>
<simpara>What does this mean?</simpara>
<simpara><emphasis>git rev-list</emphasis> is the original version of the revision walker, which
<emphasis>always</emphasis> printed a list of revisions to stdout.  It is still functional,
and needs to, since most new Git commands start out as scripts using
<emphasis>git rev-list</emphasis>.</simpara>
<simpara><emphasis>git rev-parse</emphasis> is not as important any more; it was only used to filter out
options that were relevant for the different plumbing commands that were
called by the script.</simpara>
<simpara>Most of what <emphasis>git rev-list</emphasis> did is contained in <emphasis>revision.c</emphasis> and
<emphasis>revision.h</emphasis>.  It wraps the options in a struct named <emphasis>rev_info</emphasis>, which
controls how and what revisions are walked, and more.</simpara>
<simpara>The original job of <emphasis>git rev-parse</emphasis> is now taken by the function
<emphasis>setup_revisions()</emphasis>, which parses the revisions and the common command-line
options for the revision walker. This information is stored in the struct
<emphasis>rev_info</emphasis> for later consumption. You can do your own command-line option
parsing after calling <emphasis>setup_revisions()</emphasis>. After that, you have to call
<emphasis>prepare_revision_walk()</emphasis> for initialization, and then you can get the
commits one by one with the function <emphasis>get_revision()</emphasis>.</simpara>
<simpara>If you are interested in more details of the revision walking process,
just have a look at the first implementation of <emphasis>cmd_log()</emphasis>; call
<emphasis>git show v1.3.0~155^2~4</emphasis> and scroll down to that function (note that you
no longer need to call <emphasis>setup_pager()</emphasis> directly).</simpara>
<simpara>Nowadays, <emphasis>git log</emphasis> is a builtin, which means that it is <emphasis>contained</emphasis> in the
command <emphasis>git</emphasis>.  The source side of a builtin is</simpara>
<itemizedlist>
<listitem>
<simpara>
a function called <emphasis>cmd_&lt;bla&gt;</emphasis>, typically defined in <emphasis>builtin/&lt;bla.c&gt;</emphasis>
  (note that older versions of Git used to have it in <emphasis>builtin-&lt;bla&gt;.c</emphasis>
  instead), and declared in <emphasis>builtin.h</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
an entry in the <emphasis>commands[]</emphasis> array in <emphasis>git.c</emphasis>, and
</simpara>
</listitem>
<listitem>
<simpara>
an entry in <emphasis>BUILTIN_OBJECTS</emphasis> in the <emphasis>Makefile</emphasis>.
</simpara>
</listitem>
</itemizedlist>
<simpara>Sometimes, more than one builtin is contained in one source file.  For
example, <emphasis>cmd_whatchanged()</emphasis> and <emphasis>cmd_log()</emphasis> both reside in <emphasis>builtin/log.c</emphasis>,
since they share quite a bit of code.  In that case, the commands which are
<emphasis>not</emphasis> named like the <emphasis>.c</emphasis> file in which they live have to be listed in
<emphasis>BUILT_INS</emphasis> in the <emphasis>Makefile</emphasis>.</simpara>
<simpara><emphasis>git log</emphasis> looks more complicated in C than it does in the original script,
but that allows for a much greater flexibility and performance.</simpara>
<simpara>Here again it is a good point to take a pause.</simpara>
<simpara>Lesson three is: study the code.  Really, it is the best way to learn about
the organization of Git (after you know the basic concepts).</simpara>
<simpara>So, think about something which you are interested in, say, "how can I
access a blob just knowing the object name of it?".  The first step is to
find a Git command with which you can do it.  In this example, it is either
<emphasis>git show</emphasis> or <emphasis>git cat-file</emphasis>.</simpara>
<simpara>For the sake of clarity, let's stay with <emphasis>git cat-file</emphasis>, because it</simpara>
<itemizedlist>
<listitem>
<simpara>
is plumbing, and
</simpara>
</listitem>
<listitem>
<simpara>
was around even in the initial commit (it literally went only through
  some 20 revisions as <emphasis>cat-file.c</emphasis>, was renamed to <emphasis>builtin/cat-file.c</emphasis>
  when made a builtin, and then saw less than 10 versions).
</simpara>
</listitem>
</itemizedlist>
<simpara>So, look into <emphasis>builtin/cat-file.c</emphasis>, search for <emphasis>cmd_cat_file()</emphasis> and look what
it does.</simpara>
<literallayout>        git_config(git_default_config);
        if (argc != 3)
                usage("git cat-file [-t|-s|-e|-p|&lt;type&gt;] &lt;sha1&gt;");
        if (get_sha1(argv[2], sha1))
                die("Not a valid object name %s", argv[2]);</literallayout>
<simpara>Let's skip over the obvious details; the only really interesting part
here is the call to <emphasis>get_sha1()</emphasis>.  It tries to interpret <emphasis>argv[2]</emphasis> as an
object name, and if it refers to an object which is present in the current
repository, it writes the resulting SHA-1 into the variable <emphasis>sha1</emphasis>.</simpara>
<simpara>Two things are interesting here:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>get_sha1()</emphasis> returns 0 on <emphasis>success</emphasis>.  This might surprise some new
  Git hackers, but there is a long tradition in UNIX to return different
  negative numbers in case of different errors--and 0 on success.
</simpara>
</listitem>
<listitem>
<simpara>
the variable <emphasis>sha1</emphasis> in the function signature of <emphasis>get_sha1()</emphasis> is <emphasis>unsigned
  char *</emphasis>, but is actually expected to be a pointer to <emphasis>unsigned
  char[20]</emphasis>.  This variable will contain the 160-bit SHA-1 of the given
  commit.  Note that whenever a SHA-1 is passed as <emphasis>unsigned char *</emphasis>, it
  is the binary representation, as opposed to the ASCII representation in
  hex characters, which is passed as <emphasis>char *</emphasis>.
</simpara>
</listitem>
</itemizedlist>
<simpara>You will see both of these things throughout the code.</simpara>
<simpara>Now, for the meat:</simpara>
<literallayout>        case 0:
                buf = read_object_with_reference(sha1, argv[1], &amp;size, NULL);</literallayout>
<simpara>This is how you read a blob (actually, not only a blob, but any type of
object).  To know how the function <emphasis>read_object_with_reference()</emphasis> actually
works, find the source code for it (something like <emphasis>git grep
read_object_with | grep ":[a-z]"</emphasis> in the Git repository), and read
the source.</simpara>
<simpara>To find out how the result can be used, just read on in <emphasis>cmd_cat_file()</emphasis>:</simpara>
<literallayout>        write_or_die(1, buf, size);</literallayout>
<simpara>Sometimes, you do not know where to look for a feature.  In many such cases,
it helps to search through the output of <emphasis>git log</emphasis>, and then <emphasis>git show</emphasis> the
corresponding commit.</simpara>
<simpara>Example: If you know that there was some test case for <emphasis>git bundle</emphasis>, but
do not remember where it was (yes, you <emphasis>could</emphasis> <emphasis>git grep bundle t/</emphasis>, but that
does not illustrate the point!):</simpara>
<literallayout>$ git log --no-merges t/</literallayout>
<simpara>In the pager (<emphasis>less</emphasis>), just search for "bundle", go a few lines back,
and see that it is in commit 18449ab0&#8230;  Now just copy this object name,
and paste it into the command line</simpara>
<literallayout>$ git show 18449ab0</literallayout>
<simpara>Voila.</simpara>
<simpara>Another example: Find out what to do in order to make some script a
builtin:</simpara>
<literallayout>$ git log --no-merges --diff-filter=A builtin/*.c</literallayout>
<simpara>You see, Git is actually the best tool to find out about the source of Git
itself!</simpara>
</section>
</section>
<section id="Git User Manual_glossary">
<title>Git Glossary</title>
<variablelist>
<varlistentry>
<term>
<anchor id="Git User Manual_def_alternate_object_database" xreflabel="[def_alternate_object_database]"/>alternate object database
</term>
<listitem>
<simpara>
        Via the alternates mechanism, a <link linkend="Git User Manual_def_repository">repository</link>
        can inherit part of its <link linkend="Git User Manual_def_object_database">object database</link>
        from another object database, which is called an "alternate".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_bare_repository" xreflabel="[def_bare_repository]"/>bare repository
</term>
<listitem>
<simpara>
        A bare repository is normally an appropriately
        named <link linkend="Git User Manual_def_directory">directory</link> with a <emphasis>.git</emphasis> suffix that does not
        have a locally checked-out copy of any of the files under
        revision control. That is, all of the Git
        administrative and control files that would normally be present in the
        hidden <emphasis>.git</emphasis> sub-directory are directly present in the
        <emphasis>repository.git</emphasis> directory instead,
        and no other files are present and checked out. Usually publishers of
        public repositories make bare repositories available.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_blob_object" xreflabel="[def_blob_object]"/>blob object
</term>
<listitem>
<simpara>
        Untyped <link linkend="Git User Manual_def_object">object</link>, e.g. the contents of a file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_branch" xreflabel="[def_branch]"/>branch
</term>
<listitem>
<simpara>
        A "branch" is an active line of development.  The most recent
        <link linkend="Git User Manual_def_commit">commit</link> on a branch is referred to as the tip of
        that branch.  The tip of the branch is referenced by a branch
        <link linkend="Git User Manual_def_head">head</link>, which moves forward as additional development
        is done on the branch.  A single Git
        <link linkend="Git User Manual_def_repository">repository</link> can track an arbitrary number of
        branches, but your <link linkend="Git User Manual_def_working_tree">working tree</link> is
        associated with just one of them (the "current" or "checked out"
        branch), and <link linkend="Git User Manual_def_HEAD">HEAD</link> points to that branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_cache" xreflabel="[def_cache]"/>cache
</term>
<listitem>
<simpara>
        Obsolete for: <link linkend="Git User Manual_def_index">index</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_chain" xreflabel="[def_chain]"/>chain
</term>
<listitem>
<simpara>
        A list of objects, where each <link linkend="Git User Manual_def_object">object</link> in the list contains
        a reference to its successor (for example, the successor of a
        <link linkend="Git User Manual_def_commit">commit</link> could be one of its <link linkend="Git User Manual_def_parent">parents</link>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_changeset" xreflabel="[def_changeset]"/>changeset
</term>
<listitem>
<simpara>
        BitKeeper/cvsps speak for "<link linkend="Git User Manual_def_commit">commit</link>". Since Git does not
        store changes, but states, it really does not make sense to use the term
        "changesets" with Git.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_checkout" xreflabel="[def_checkout]"/>checkout
</term>
<listitem>
<simpara>
        The action of updating all or part of the
        <link linkend="Git User Manual_def_working_tree">working tree</link> with a <link linkend="Git User Manual_def_tree_object">tree object</link>
        or <link linkend="Git User Manual_def_blob_object">blob</link> from the
        <link linkend="Git User Manual_def_object_database">object database</link>, and updating the
        <link linkend="Git User Manual_def_index">index</link> and <link linkend="Git User Manual_def_HEAD">HEAD</link> if the whole working tree has
        been pointed at a new <link linkend="Git User Manual_def_branch">branch</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_cherry-picking" xreflabel="[def_cherry-picking]"/>cherry-picking
</term>
<listitem>
<simpara>
        In <link linkend="Git User Manual_def_SCM">SCM</link> jargon, "cherry pick" means to choose a subset of
        changes out of a series of changes (typically commits) and record them
        as a new series of changes on top of a different codebase. In Git, this is
        performed by the "git cherry-pick" command to extract the change introduced
        by an existing <link linkend="Git User Manual_def_commit">commit</link> and to record it based on the tip
        of the current <link linkend="Git User Manual_def_branch">branch</link> as a new commit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_clean" xreflabel="[def_clean]"/>clean
</term>
<listitem>
<simpara>
        A <link linkend="Git User Manual_def_working_tree">working tree</link> is clean, if it
        corresponds to the <link linkend="Git User Manual_def_revision">revision</link> referenced by the current
        <link linkend="Git User Manual_def_head">head</link>. Also see "<link linkend="Git User Manual_def_dirty">dirty</link>".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_commit" xreflabel="[def_commit]"/>commit
</term>
<listitem>
<simpara>
        As a noun: A single point in the
        Git history; the entire history of a project is represented as a
        set of interrelated commits.  The word "commit" is often
        used by Git in the same places other revision control systems
        use the words "revision" or "version".  Also used as a short
        hand for <link linkend="Git User Manual_def_commit_object">commit object</link>.
</simpara>
<simpara>As a verb: The action of storing a new snapshot of the project's
state in the Git history, by creating a new commit representing the current
state of the <link linkend="Git User Manual_def_index">index</link> and advancing <link linkend="Git User Manual_def_HEAD">HEAD</link>
to point at the new commit.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_commit_object" xreflabel="[def_commit_object]"/>commit object
</term>
<listitem>
<simpara>
        An <link linkend="Git User Manual_def_object">object</link> which contains the information about a
        particular <link linkend="Git User Manual_def_revision">revision</link>, such as <link linkend="Git User Manual_def_parent">parents</link>, committer,
        author, date and the <link linkend="Git User Manual_def_tree_object">tree object</link> which corresponds
        to the top <link linkend="Git User Manual_def_directory">directory</link> of the stored
        revision.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_commit-ish" xreflabel="[def_commit-ish]"/>commit-ish (also committish)
</term>
<listitem>
<simpara>
        A <link linkend="Git User Manual_def_commit_object">commit object</link> or an
        <link linkend="Git User Manual_def_object">object</link> that can be recursively dereferenced to
        a commit object.
        The following are all commit-ishes:
        a commit object,
        a <link linkend="Git User Manual_def_tag_object">tag object</link> that points to a commit
        object,
        a tag object that points to a tag object that points to a
        commit object,
        etc.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_core_git" xreflabel="[def_core_git]"/>core Git
</term>
<listitem>
<simpara>
        Fundamental data structures and utilities of Git. Exposes only limited
        source code management tools.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_DAG" xreflabel="[def_DAG]"/>DAG
</term>
<listitem>
<simpara>
        Directed acyclic graph. The <link linkend="Git User Manual_def_commit_object">commit objects</link> form a
        directed acyclic graph, because they have parents (directed), and the
        graph of commit objects is acyclic (there is no <link linkend="Git User Manual_def_chain">chain</link>
        which begins and ends with the same <link linkend="Git User Manual_def_object">object</link>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_dangling_object" xreflabel="[def_dangling_object]"/>dangling object
</term>
<listitem>
<simpara>
        An <link linkend="Git User Manual_def_unreachable_object">unreachable object</link> which is not
        <link linkend="Git User Manual_def_reachable">reachable</link> even from other unreachable objects; a
        dangling object has no references to it from any
        reference or <link linkend="Git User Manual_def_object">object</link> in the <link linkend="Git User Manual_def_repository">repository</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_detached_HEAD" xreflabel="[def_detached_HEAD]"/>detached HEAD
</term>
<listitem>
<simpara>
        Normally the <link linkend="Git User Manual_def_HEAD">HEAD</link> stores the name of a
        <link linkend="Git User Manual_def_branch">branch</link>, and commands that operate on the
        history HEAD represents operate on the history leading to the
        tip of the branch the HEAD points at.  However, Git also
        allows you to <link linkend="Git User Manual_def_checkout">check out</link> an arbitrary
        <link linkend="Git User Manual_def_commit">commit</link> that isn't necessarily the tip of any
        particular branch.  The HEAD in such a state is called
        "detached".
</simpara>
<simpara>Note that commands that operate on the history of the current branch
(e.g. <emphasis>git commit</emphasis> to build a new history on top of it) still work
while the HEAD is detached. They update the HEAD to point at the tip
of the updated history without affecting any branch.  Commands that
update or inquire information <emphasis>about</emphasis> the current branch (e.g. <emphasis>git
branch --set-upstream-to</emphasis> that sets what remote-tracking branch the
current branch integrates with) obviously do not work, as there is no
(real) current branch to ask about in this state.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_directory" xreflabel="[def_directory]"/>directory
</term>
<listitem>
<simpara>
        The list you get with "ls" :-)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_dirty" xreflabel="[def_dirty]"/>dirty
</term>
<listitem>
<simpara>
        A <link linkend="Git User Manual_def_working_tree">working tree</link> is said to be "dirty" if
        it contains modifications which have not been <link linkend="Git User Manual_def_commit">committed</link> to the current
        <link linkend="Git User Manual_def_branch">branch</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_evil_merge" xreflabel="[def_evil_merge]"/>evil merge
</term>
<listitem>
<simpara>
        An evil merge is a <link linkend="Git User Manual_def_merge">merge</link> that introduces changes that
        do not appear in any <link linkend="Git User Manual_def_parent">parent</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_fast_forward" xreflabel="[def_fast_forward]"/>fast-forward
</term>
<listitem>
<simpara>
        A fast-forward is a special type of <link linkend="Git User Manual_def_merge">merge</link> where you have a
        <link linkend="Git User Manual_def_revision">revision</link> and you are "merging" another
        <link linkend="Git User Manual_def_branch">branch</link>'s changes that happen to be a descendant of what
        you have. In such these cases, you do not make a new <link linkend="Git User Manual_def_merge">merge</link>
        <link linkend="Git User Manual_def_commit">commit</link> but instead just update to his
        revision. This will happen frequently on a
        <link linkend="Git User Manual_def_remote_tracking_branch">remote-tracking branch</link> of a remote
        <link linkend="Git User Manual_def_repository">repository</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_fetch" xreflabel="[def_fetch]"/>fetch
</term>
<listitem>
<simpara>
        Fetching a <link linkend="Git User Manual_def_branch">branch</link> means to get the
        branch's <link linkend="Git User Manual_def_head_ref">head ref</link> from a remote
        <link linkend="Git User Manual_def_repository">repository</link>, to find out which objects are
        missing from the local <link linkend="Git User Manual_def_object_database">object database</link>,
        and to get them, too.  See also <xref linkend="git-fetch(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_file_system" xreflabel="[def_file_system]"/>file system
</term>
<listitem>
<simpara>
        Linus Torvalds originally designed Git to be a user space file system,
        i.e. the infrastructure to hold files and directories. That ensured the
        efficiency and speed of Git.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_git_archive" xreflabel="[def_git_archive]"/>Git archive
</term>
<listitem>
<simpara>
        Synonym for <link linkend="Git User Manual_def_repository">repository</link> (for arch people).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_gitfile" xreflabel="[def_gitfile]"/>gitfile
</term>
<listitem>
<simpara>
        A plain file <emphasis>.git</emphasis> at the root of a working tree that
        points at the directory that is the real repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_grafts" xreflabel="[def_grafts]"/>grafts
</term>
<listitem>
<simpara>
        Grafts enables two otherwise different lines of development to be joined
        together by recording fake ancestry information for commits. This way
        you can make Git pretend the set of <link linkend="Git User Manual_def_parent">parents</link> a <link linkend="Git User Manual_def_commit">commit</link> has
        is different from what was recorded when the commit was
        created. Configured via the <emphasis>.git/info/grafts</emphasis> file.
</simpara>
<simpara>Note that the grafts mechanism is outdated and can lead to problems
transferring objects between repositories; see <xref linkend="git-replace(1)" />
for a more flexible and robust system to do the same thing.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_hash" xreflabel="[def_hash]"/>hash
</term>
<listitem>
<simpara>
        In Git's context, synonym for <link linkend="Git User Manual_def_object_name">object name</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_head" xreflabel="[def_head]"/>head
</term>
<listitem>
<simpara>
        A <link linkend="Git User Manual_def_ref">named reference</link> to the <link linkend="Git User Manual_def_commit">commit</link> at the tip of a
        <link linkend="Git User Manual_def_branch">branch</link>.  Heads are stored in a file in
        <emphasis>$GIT_DIR/refs/heads/</emphasis> directory, except when using packed refs. (See
        <xref linkend="git-pack-refs(1)" />.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_HEAD" xreflabel="[def_HEAD]"/>HEAD
</term>
<listitem>
<simpara>
        The current <link linkend="Git User Manual_def_branch">branch</link>.  In more detail: Your <link linkend="Git User Manual_def_working_tree">working tree</link> is normally derived from the state of the tree
        referred to by HEAD.  HEAD is a reference to one of the
        <link linkend="Git User Manual_def_head">heads</link> in your repository, except when using a
        <link linkend="Git User Manual_def_detached_HEAD">detached HEAD</link>, in which case it directly
        references an arbitrary commit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_head_ref" xreflabel="[def_head_ref]"/>head ref
</term>
<listitem>
<simpara>
        A synonym for <link linkend="Git User Manual_def_head">head</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_hook" xreflabel="[def_hook]"/>hook
</term>
<listitem>
<simpara>
        During the normal execution of several Git commands, call-outs are made
        to optional scripts that allow a developer to add functionality or
        checking. Typically, the hooks allow for a command to be pre-verified
        and potentially aborted, and allow for a post-notification after the
        operation is done. The hook scripts are found in the
        <emphasis>$GIT_DIR/hooks/</emphasis> directory, and are enabled by simply
        removing the <emphasis>.sample</emphasis> suffix from the filename. In earlier versions
        of Git you had to make them executable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_index" xreflabel="[def_index]"/>index
</term>
<listitem>
<simpara>
        A collection of files with stat information, whose contents are stored
        as objects. The index is a stored version of your
        <link linkend="Git User Manual_def_working_tree">working tree</link>. Truth be told, it can also contain a second, and even
        a third version of a working tree, which are used
        when <link linkend="Git User Manual_def_merge">merging</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_index_entry" xreflabel="[def_index_entry]"/>index entry
</term>
<listitem>
<simpara>
        The information regarding a particular file, stored in the
        <link linkend="Git User Manual_def_index">index</link>. An index entry can be unmerged, if a
        <link linkend="Git User Manual_def_merge">merge</link> was started, but not yet finished (i.e. if
        the index contains multiple versions of that file).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_master" xreflabel="[def_master]"/>master
</term>
<listitem>
<simpara>
        The default development <link linkend="Git User Manual_def_branch">branch</link>. Whenever you
        create a Git <link linkend="Git User Manual_def_repository">repository</link>, a branch named
        "master" is created, and becomes the active branch. In most
        cases, this contains the local development, though that is
        purely by convention and is not required.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_merge" xreflabel="[def_merge]"/>merge
</term>
<listitem>
<simpara>
        As a verb: To bring the contents of another
        <link linkend="Git User Manual_def_branch">branch</link> (possibly from an external
        <link linkend="Git User Manual_def_repository">repository</link>) into the current branch.  In the
        case where the merged-in branch is from a different repository,
        this is done by first <link linkend="Git User Manual_def_fetch">fetching</link> the remote branch
        and then merging the result into the current branch.  This
        combination of fetch and merge operations is called a
        <link linkend="Git User Manual_def_pull">pull</link>.  Merging is performed by an automatic process
        that identifies changes made since the branches diverged, and
        then applies all those changes together.  In cases where changes
        conflict, manual intervention may be required to complete the
        merge.
</simpara>
<simpara>As a noun: unless it is a <link linkend="Git User Manual_def_fast_forward">fast-forward</link>, a
successful merge results in the creation of a new <link linkend="Git User Manual_def_commit">commit</link>
representing the result of the merge, and having as
<link linkend="Git User Manual_def_parent">parents</link> the tips of the merged <link linkend="Git User Manual_def_branch">branches</link>.
This commit is referred to as a "merge commit", or sometimes just a
"merge".</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_object" xreflabel="[def_object]"/>object
</term>
<listitem>
<simpara>
        The unit of storage in Git. It is uniquely identified by the
        <link linkend="Git User Manual_def_SHA1">SHA-1</link> of its contents. Consequently, an
        object can not be changed.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_object_database" xreflabel="[def_object_database]"/>object database
</term>
<listitem>
<simpara>
        Stores a set of "objects", and an individual <link linkend="Git User Manual_def_object">object</link> is
        identified by its <link linkend="Git User Manual_def_object_name">object name</link>. The objects usually
        live in <emphasis>$GIT_DIR/objects/</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_object_identifier" xreflabel="[def_object_identifier]"/>object identifier
</term>
<listitem>
<simpara>
        Synonym for <link linkend="Git User Manual_def_object_name">object name</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_object_name" xreflabel="[def_object_name]"/>object name
</term>
<listitem>
<simpara>
        The unique identifier of an <link linkend="Git User Manual_def_object">object</link>.  The
        object name is usually represented by a 40 character
        hexadecimal string.  Also colloquially called <link linkend="Git User Manual_def_SHA1">SHA-1</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_object_type" xreflabel="[def_object_type]"/>object type
</term>
<listitem>
<simpara>
        One of the identifiers "<link linkend="Git User Manual_def_commit_object">commit</link>",
        "<link linkend="Git User Manual_def_tree_object">tree</link>", "<link linkend="Git User Manual_def_tag_object">tag</link>" or
        "<link linkend="Git User Manual_def_blob_object">blob</link>" describing the type of an
        <link linkend="Git User Manual_def_object">object</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_octopus" xreflabel="[def_octopus]"/>octopus
</term>
<listitem>
<simpara>
        To <link linkend="Git User Manual_def_merge">merge</link> more than two <link linkend="Git User Manual_def_branch">branches</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_origin" xreflabel="[def_origin]"/>origin
</term>
<listitem>
<simpara>
        The default upstream <link linkend="Git User Manual_def_repository">repository</link>. Most projects have
        at least one upstream project which they track. By default
        <emphasis>origin</emphasis> is used for that purpose. New upstream updates
        will be fetched into <link linkend="Git User Manual_def_remote_tracking_branch">remote-tracking branches</link> named
        origin/name-of-upstream-branch, which you can see using
        <emphasis>git branch -r</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_pack" xreflabel="[def_pack]"/>pack
</term>
<listitem>
<simpara>
        A set of objects which have been compressed into one file (to save space
        or to transmit them efficiently).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_pack_index" xreflabel="[def_pack_index]"/>pack index
</term>
<listitem>
<simpara>
        The list of identifiers, and other information, of the objects in a
        <link linkend="Git User Manual_def_pack">pack</link>, to assist in efficiently accessing the contents of a
        pack.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_pathspec" xreflabel="[def_pathspec]"/>pathspec
</term>
<listitem>
<simpara>
        Pattern used to limit paths in Git commands.
</simpara>
<simpara>Pathspecs are used on the command line of "git ls-files", "git
ls-tree", "git add", "git grep", "git diff", "git checkout",
and many other commands to
limit the scope of operations to some subset of the tree or
worktree.  See the documentation of each command for whether
paths are relative to the current directory or toplevel.  The
pathspec syntax is as follows:</simpara>
<itemizedlist>
<listitem>
<simpara>
any path matches itself
</simpara>
</listitem>
<listitem>
<simpara>
the pathspec up to the last slash represents a
  directory prefix.  The scope of that pathspec is
  limited to that subtree.
</simpara>
</listitem>
<listitem>
<simpara>
the rest of the pathspec is a pattern for the remainder
  of the pathname.  Paths relative to the directory
  prefix will be matched against that pattern using fnmatch(3);
  in particular, <emphasis>*</emphasis> and <emphasis>?</emphasis> <emphasis>can</emphasis> match directory separators.
</simpara>
</listitem>
</itemizedlist>
<simpara>For example, Documentation/*.jpg will match all .jpg files
in the Documentation subtree,
including Documentation/chapter_1/figure_1.jpg.</simpara>
<simpara>A pathspec that begins with a colon <emphasis>:</emphasis> has special meaning.  In the
short form, the leading colon <emphasis>:</emphasis> is followed by zero or more "magic
signature" letters (which optionally is terminated by another colon <emphasis>:</emphasis>),
and the remainder is the pattern to match against the path.
The "magic signature" consists of ASCII symbols that are neither
alphanumeric, glob, regex special characters nor colon.
The optional colon that terminates the "magic signature" can be
omitted if the pattern begins with a character that does not belong to
"magic signature" symbol set and is not a colon.</simpara>
<simpara>In the long form, the leading colon <emphasis>:</emphasis> is followed by a open
parenthesis <emphasis>(</emphasis>, a comma-separated list of zero or more "magic words",
and a close parentheses <emphasis>)</emphasis>, and the remainder is the pattern to match
against the path.</simpara>
<simpara>A pathspec with only a colon means "there is no pathspec". This form
should not be combined with other pathspec.</simpara>
<variablelist>
<varlistentry>
<term>
top
</term>
<listitem>
<simpara>
        The magic word <emphasis>top</emphasis> (magic signature: <emphasis>/</emphasis>) makes the pattern
        match from the root of the working tree, even when you are
        running the command from inside a subdirectory.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
literal
</term>
<listitem>
<simpara>
        Wildcards in the pattern such as <emphasis>*</emphasis> or <emphasis>?</emphasis> are treated
        as literal characters.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
icase
</term>
<listitem>
<simpara>
        Case insensitive match.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
glob
</term>
<listitem>
<simpara>
        Git treats the pattern as a shell glob suitable for
        consumption by fnmatch(3) with the FNM_PATHNAME flag:
        wildcards in the pattern will not match a / in the pathname.
        For example, "Documentation/&#42;.html" matches
        "Documentation/git.html" but not "Documentation/ppc/ppc.html"
        or "tools/perf/Documentation/perf.html".
</simpara>
<simpara>Two consecutive asterisks ("<emphasis>**</emphasis>") in patterns matched against
full pathname may have special meaning:</simpara>
<itemizedlist>
<listitem>
<simpara>
A leading "<emphasis>**</emphasis>" followed by a slash means match in all
   directories. For example, "<emphasis>**/foo</emphasis>" matches file or directory
   "<emphasis>foo</emphasis>" anywhere, the same as pattern "<emphasis>foo</emphasis>". "<emphasis>**/foo/bar</emphasis>"
   matches file or directory "<emphasis>bar</emphasis>" anywhere that is directly
   under directory "<emphasis>foo</emphasis>".
</simpara>
</listitem>
<listitem>
<simpara>
A trailing "<emphasis>/**</emphasis>" matches everything inside. For example,
   "<emphasis>abc/**</emphasis>" matches all files inside directory "abc", relative
   to the location of the <emphasis>.gitignore</emphasis> file, with infinite depth.
</simpara>
</listitem>
<listitem>
<simpara>
A slash followed by two consecutive asterisks then a slash
   matches zero or more directories. For example, "<emphasis>a/**/b</emphasis>"
   matches "<emphasis>a/b</emphasis>", "<emphasis>a/x/b</emphasis>", "<emphasis>a/x/y/b</emphasis>" and so on.
</simpara>
</listitem>
<listitem>
<simpara>
Other consecutive asterisks are considered invalid.
</simpara>
<simpara>Glob magic is incompatible with literal magic.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
exclude
</term>
<listitem>
<simpara>
        After a path matches any non-exclude pathspec, it will be run
        through all exclude pathspec (magic signature: <emphasis>!</emphasis>). If it
        matches, the path is ignored.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_parent" xreflabel="[def_parent]"/>parent
</term>
<listitem>
<simpara>
        A <link linkend="Git User Manual_def_commit_object">commit object</link> contains a (possibly empty) list
        of the logical predecessor(s) in the line of development, i.e. its
        parents.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_pickaxe" xreflabel="[def_pickaxe]"/>pickaxe
</term>
<listitem>
<simpara>
        The term <link linkend="Git User Manual_def_pickaxe">pickaxe</link> refers to an option to the diffcore
        routines that help select changes that add or delete a given text
        string. With the <emphasis>--pickaxe-all</emphasis> option, it can be used to view the full
        <link linkend="Git User Manual_def_changeset">changeset</link> that introduced or removed, say, a
        particular line of text. See <xref linkend="git-diff(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_plumbing" xreflabel="[def_plumbing]"/>plumbing
</term>
<listitem>
<simpara>
        Cute name for <link linkend="Git User Manual_def_core_git">core Git</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_porcelain" xreflabel="[def_porcelain]"/>porcelain
</term>
<listitem>
<simpara>
        Cute name for programs and program suites depending on
        <link linkend="Git User Manual_def_core_git">core Git</link>, presenting a high level access to
        core Git. Porcelains expose more of a <link linkend="Git User Manual_def_SCM">SCM</link>
        interface than the <link linkend="Git User Manual_def_plumbing">plumbing</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_per_worktree_ref" xreflabel="[def_per_worktree_ref]"/>per-worktree ref
</term>
<listitem>
<simpara>
        Refs that are per-<link linkend="Git User Manual_def_working_tree">worktree</link>, rather than
        global.  This is presently only <link linkend="Git User Manual_def_HEAD">HEAD</link> and any refs
        that start with <emphasis>refs/bisect/</emphasis>, but might later include other
        unusual refs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_pseudoref" xreflabel="[def_pseudoref]"/>pseudoref
</term>
<listitem>
<simpara>
        Pseudorefs are a class of files under <emphasis>$GIT_DIR</emphasis> which behave
        like refs for the purposes of rev-parse, but which are treated
        specially by git.  Pseudorefs both have names that are all-caps,
        and always start with a line consisting of a
        <link linkend="Git User Manual_def_SHA1">SHA-1</link> followed by whitespace.  So, HEAD is not a
        pseudoref, because it is sometimes a symbolic ref.  They might
        optionally contain some additional data.  <emphasis>MERGE_HEAD</emphasis> and
        <emphasis>CHERRY_PICK_HEAD</emphasis> are examples.  Unlike
        <link linkend="Git User Manual_def_per_worktree_ref">per-worktree refs</link>, these files cannot
        be symbolic refs, and never have reflogs.  They also cannot be
        updated through the normal ref update machinery.  Instead,
        they are updated by directly writing to the files.  However,
        they can be read as if they were refs, so <emphasis>git rev-parse
        MERGE_HEAD</emphasis> will work.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_pull" xreflabel="[def_pull]"/>pull
</term>
<listitem>
<simpara>
        Pulling a <link linkend="Git User Manual_def_branch">branch</link> means to <link linkend="Git User Manual_def_fetch">fetch</link> it and
        <link linkend="Git User Manual_def_merge">merge</link> it.  See also <xref linkend="git-pull(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_push" xreflabel="[def_push]"/>push
</term>
<listitem>
<simpara>
        Pushing a <link linkend="Git User Manual_def_branch">branch</link> means to get the branch's
        <link linkend="Git User Manual_def_head_ref">head ref</link> from a remote <link linkend="Git User Manual_def_repository">repository</link>,
        find out if it is a direct ancestor to the branch's local
        head ref, and in that case, putting all
        objects, which are <link linkend="Git User Manual_def_reachable">reachable</link> from the local
        head ref, and which are missing from the remote
        repository, into the remote
        <link linkend="Git User Manual_def_object_database">object database</link>, and updating the remote
        head ref. If the remote <link linkend="Git User Manual_def_head">head</link> is not an
        ancestor to the local head, the push fails.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_reachable" xreflabel="[def_reachable]"/>reachable
</term>
<listitem>
<simpara>
        All of the ancestors of a given <link linkend="Git User Manual_def_commit">commit</link> are said to be
        "reachable" from that commit. More
        generally, one <link linkend="Git User Manual_def_object">object</link> is reachable from
        another if we can reach the one from the other by a <link linkend="Git User Manual_def_chain">chain</link>
        that follows <link linkend="Git User Manual_def_tag">tags</link> to whatever they tag,
        <link linkend="Git User Manual_def_commit_object">commits</link> to their parents or trees, and
        <link linkend="Git User Manual_def_tree_object">trees</link> to the trees or <link linkend="Git User Manual_def_blob_object">blobs</link>
        that they contain.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_rebase" xreflabel="[def_rebase]"/>rebase
</term>
<listitem>
<simpara>
        To reapply a series of changes from a <link linkend="Git User Manual_def_branch">branch</link> to a
        different base, and reset the <link linkend="Git User Manual_def_head">head</link> of that branch
        to the result.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_ref" xreflabel="[def_ref]"/>ref
</term>
<listitem>
<simpara>
        A name that begins with <emphasis>refs/</emphasis> (e.g. <emphasis>refs/heads/master</emphasis>)
        that points to an <link linkend="Git User Manual_def_object_name">object name</link> or another
        ref (the latter is called a <link linkend="Git User Manual_def_symref">symbolic ref</link>).
        For convenience, a ref can sometimes be abbreviated when used
        as an argument to a Git command; see <xref linkend="gitrevisions(7)" />
        for details.
        Refs are stored in the <link linkend="Git User Manual_def_repository">repository</link>.
</simpara>
<simpara>The ref namespace is hierarchical.
Different subhierarchies are used for different purposes (e.g. the
<emphasis>refs/heads/</emphasis> hierarchy is used to represent local branches).</simpara>
<simpara>There are a few special-purpose refs that do not begin with <emphasis>refs/</emphasis>.
The most notable example is <emphasis>HEAD</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_reflog" xreflabel="[def_reflog]"/>reflog
</term>
<listitem>
<simpara>
        A reflog shows the local "history" of a ref.  In other words,
        it can tell you what the 3rd last revision in <emphasis>this</emphasis> repository
        was, and what was the current state in <emphasis>this</emphasis> repository,
        yesterday 9:14pm.  See <xref linkend="git-reflog(1)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_refspec" xreflabel="[def_refspec]"/>refspec
</term>
<listitem>
<simpara>
        A "refspec" is used by <link linkend="Git User Manual_def_fetch">fetch</link> and
        <link linkend="Git User Manual_def_push">push</link> to describe the mapping between remote
        <link linkend="Git User Manual_def_ref">ref</link> and local ref.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_remote" xreflabel="[def_remote]"/>remote repository
</term>
<listitem>
<simpara>
        A <link linkend="Git User Manual_def_repository">repository</link> which is used to track the same
        project but resides somewhere else. To communicate with remotes,
        see <link linkend="Git User Manual_def_fetch">fetch</link> or <link linkend="Git User Manual_def_push">push</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_remote_tracking_branch" xreflabel="[def_remote_tracking_branch]"/>remote-tracking branch
</term>
<listitem>
<simpara>
        A <link linkend="Git User Manual_def_ref">ref</link> that is used to follow changes from another
        <link linkend="Git User Manual_def_repository">repository</link>. It typically looks like
        <emphasis>refs/remotes/foo/bar</emphasis> (indicating that it tracks a branch named
        <emphasis>bar</emphasis> in a remote named <emphasis>foo</emphasis>), and matches the right-hand-side of
        a configured fetch <link linkend="Git User Manual_def_refspec">refspec</link>. A remote-tracking
        branch should not contain direct modifications or have local
        commits made to it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_repository" xreflabel="[def_repository]"/>repository
</term>
<listitem>
<simpara>
        A collection of <link linkend="Git User Manual_def_ref">refs</link> together with an
        <link linkend="Git User Manual_def_object_database">object database</link> containing all objects
        which are <link linkend="Git User Manual_def_reachable">reachable</link> from the refs, possibly
        accompanied by meta data from one or more <link linkend="Git User Manual_def_porcelain">porcelains</link>. A
        repository can share an object database with other repositories
        via <link linkend="Git User Manual_def_alternate_object_database">alternates mechanism</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_resolve" xreflabel="[def_resolve]"/>resolve
</term>
<listitem>
<simpara>
        The action of fixing up manually what a failed automatic
        <link linkend="Git User Manual_def_merge">merge</link> left behind.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_revision" xreflabel="[def_revision]"/>revision
</term>
<listitem>
<simpara>
        Synonym for <link linkend="Git User Manual_def_commit">commit</link> (the noun).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_rewind" xreflabel="[def_rewind]"/>rewind
</term>
<listitem>
<simpara>
        To throw away part of the development, i.e. to assign the
        <link linkend="Git User Manual_def_head">head</link> to an earlier <link linkend="Git User Manual_def_revision">revision</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_SCM" xreflabel="[def_SCM]"/>SCM
</term>
<listitem>
<simpara>
        Source code management (tool).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_SHA1" xreflabel="[def_SHA1]"/>SHA-1
</term>
<listitem>
<simpara>
        "Secure Hash Algorithm 1"; a cryptographic hash function.
        In the context of Git used as a synonym for <link linkend="Git User Manual_def_object_name">object name</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_shallow_clone" xreflabel="[def_shallow_clone]"/>shallow clone
</term>
<listitem>
<simpara>
        Mostly a synonym to <link linkend="Git User Manual_def_shallow_repository">shallow repository</link>
        but the phrase makes it more explicit that it was created by
        running <emphasis>git clone --depth=...</emphasis> command.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_shallow_repository" xreflabel="[def_shallow_repository]"/>shallow repository
</term>
<listitem>
<simpara>
        A shallow <link linkend="Git User Manual_def_repository">repository</link> has an incomplete
        history some of whose <link linkend="Git User Manual_def_commit">commits</link> have <link linkend="Git User Manual_def_parent">parents</link> cauterized away (in other
        words, Git is told to pretend that these commits do not have the
        parents, even though they are recorded in the <link linkend="Git User Manual_def_commit_object">commit         object</link>). This is sometimes useful when you are interested only in the
        recent history of a project even though the real history recorded in the
        upstream is much larger. A shallow repository
        is created by giving the <emphasis>--depth</emphasis> option to <xref linkend="git-clone(1)" />, and
        its history can be later deepened with <xref linkend="git-fetch(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_submodule" xreflabel="[def_submodule]"/>submodule
</term>
<listitem>
<simpara>
        A <link linkend="Git User Manual_def_repository">repository</link> that holds the history of a
        separate project inside another repository (the latter of
        which is called <link linkend="Git User Manual_def_superproject">superproject</link>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_superproject" xreflabel="[def_superproject]"/>superproject
</term>
<listitem>
<simpara>
        A <link linkend="Git User Manual_def_repository">repository</link> that references repositories
        of other projects in its working tree as <link linkend="Git User Manual_def_submodule">submodules</link>.
        The superproject knows about the names of (but does not hold
        copies of) commit objects of the contained submodules.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_symref" xreflabel="[def_symref]"/>symref
</term>
<listitem>
<simpara>
        Symbolic reference: instead of containing the <link linkend="Git User Manual_def_SHA1">SHA-1</link>
        id itself, it is of the format <emphasis>ref: refs/some/thing</emphasis> and when
        referenced, it recursively dereferences to this reference.
        <emphasis><link linkend="Git User Manual_def_HEAD">HEAD</link></emphasis> is a prime example of a symref. Symbolic
        references are manipulated with the <xref linkend="git-symbolic-ref(1)" />
        command.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_tag" xreflabel="[def_tag]"/>tag
</term>
<listitem>
<simpara>
        A <link linkend="Git User Manual_def_ref">ref</link> under <emphasis>refs/tags/</emphasis> namespace that points to an
        object of an arbitrary type (typically a tag points to either a
        <link linkend="Git User Manual_def_tag_object">tag</link> or a <link linkend="Git User Manual_def_commit_object">commit object</link>).
        In contrast to a <link linkend="Git User Manual_def_head">head</link>, a tag is not updated by
        the <emphasis>commit</emphasis> command. A Git tag has nothing to do with a Lisp
        tag (which would be called an <link linkend="Git User Manual_def_object_type">object type</link>
        in Git's context). A tag is most typically used to mark a particular
        point in the commit ancestry <link linkend="Git User Manual_def_chain">chain</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_tag_object" xreflabel="[def_tag_object]"/>tag object
</term>
<listitem>
<simpara>
        An <link linkend="Git User Manual_def_object">object</link> containing a <link linkend="Git User Manual_def_ref">ref</link> pointing to
        another object, which can contain a message just like a
        <link linkend="Git User Manual_def_commit_object">commit object</link>. It can also contain a (PGP)
        signature, in which case it is called a "signed tag object".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_topic_branch" xreflabel="[def_topic_branch]"/>topic branch
</term>
<listitem>
<simpara>
        A regular Git <link linkend="Git User Manual_def_branch">branch</link> that is used by a developer to
        identify a conceptual line of development. Since branches are very easy
        and inexpensive, it is often desirable to have several small branches
        that each contain very well defined concepts or small incremental yet
        related changes.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_tree" xreflabel="[def_tree]"/>tree
</term>
<listitem>
<simpara>
        Either a <link linkend="Git User Manual_def_working_tree">working tree</link>, or a <link linkend="Git User Manual_def_tree_object">tree         object</link> together with the dependent <link linkend="Git User Manual_def_blob_object">blob</link> and tree objects
        (i.e. a stored representation of a working tree).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_tree_object" xreflabel="[def_tree_object]"/>tree object
</term>
<listitem>
<simpara>
        An <link linkend="Git User Manual_def_object">object</link> containing a list of file names and modes along
        with refs to the associated blob and/or tree objects. A
        <link linkend="Git User Manual_def_tree">tree</link> is equivalent to a <link linkend="Git User Manual_def_directory">directory</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_tree-ish" xreflabel="[def_tree-ish]"/>tree-ish (also treeish)
</term>
<listitem>
<simpara>
        A <link linkend="Git User Manual_def_tree_object">tree object</link> or an <link linkend="Git User Manual_def_object">object</link>
        that can be recursively dereferenced to a tree object.
        Dereferencing a <link linkend="Git User Manual_def_commit_object">commit object</link> yields the
        tree object corresponding to the <link linkend="Git User Manual_def_revision">revision</link>'s
        top <link linkend="Git User Manual_def_directory">directory</link>.
        The following are all tree-ishes:
        a <link linkend="Git User Manual_def_commit-ish">commit-ish</link>,
        a tree object,
        a <link linkend="Git User Manual_def_tag_object">tag object</link> that points to a tree object,
        a tag object that points to a tag object that points to a tree
        object,
        etc.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_unmerged_index" xreflabel="[def_unmerged_index]"/>unmerged index
</term>
<listitem>
<simpara>
        An <link linkend="Git User Manual_def_index">index</link> which contains unmerged
        <link linkend="Git User Manual_def_index_entry">index entries</link>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_unreachable_object" xreflabel="[def_unreachable_object]"/>unreachable object
</term>
<listitem>
<simpara>
        An <link linkend="Git User Manual_def_object">object</link> which is not <link linkend="Git User Manual_def_reachable">reachable</link> from a
        <link linkend="Git User Manual_def_branch">branch</link>, <link linkend="Git User Manual_def_tag">tag</link>, or any other reference.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_upstream_branch" xreflabel="[def_upstream_branch]"/>upstream branch
</term>
<listitem>
<simpara>
        The default <link linkend="Git User Manual_def_branch">branch</link> that is merged into the branch in
        question (or the branch in question is rebased onto). It is configured
        via branch.&lt;name&gt;.remote and branch.&lt;name&gt;.merge. If the upstream branch
        of <emphasis>A</emphasis> is <emphasis>origin/B</emphasis> sometimes we say "<emphasis>A</emphasis> is tracking <emphasis>origin/B</emphasis>".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<anchor id="Git User Manual_def_working_tree" xreflabel="[def_working_tree]"/>working tree
</term>
<listitem>
<simpara>
        The tree of actual checked out files.  The working tree normally
        contains the contents of the <link linkend="Git User Manual_def_HEAD">HEAD</link> commit's tree,
        plus any local changes that you have made but not yet committed.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<sect3 id="Git User Manual_git-quick-start">
<title>Git Quick Reference</title>
<simpara>This is a quick summary of the major commands; the previous chapters
explain how these work in more detail.</simpara>
<section id="Git User Manual_quick-creating-a-new-repository">
<title>Creating a new repository</title>
<simpara>From a tarball:</simpara>
<literallayout>$ tar xzf project.tar.gz
$ cd project
$ git init
Initialized empty Git repository in .git/
$ git add .
$ git commit</literallayout>
<simpara>From a remote repository:</simpara>
<literallayout>$ git clone git://example.com/pub/project.git
$ cd project</literallayout>
</section>
<section id="Git User Manual_managing-branches">
<title>Managing branches</title>
<literallayout>$ git branch         # list all local branches in this repo
$ git checkout test  # switch working directory to branch "test"
$ git branch new     # create branch "new" starting at current HEAD
$ git branch -d new  # delete branch "new"</literallayout>
<simpara>Instead of basing a new branch on current HEAD (the default), use:</simpara>
<literallayout>$ git branch new test    # branch named "test"
$ git branch new v2.6.15 # tag named v2.6.15
$ git branch new HEAD^   # commit before the most recent
$ git branch new HEAD^^  # commit before that
$ git branch new test~10 # ten commits before tip of branch "test"</literallayout>
<simpara>Create and switch to a new branch at the same time:</simpara>
<literallayout>$ git checkout -b new v2.6.15</literallayout>
<simpara>Update and examine branches from the repository you cloned from:</simpara>
<literallayout>$ git fetch             # update
$ git branch -r         # list
  origin/master
  origin/next
  ...
$ git checkout -b masterwork origin/master</literallayout>
<simpara>Fetch a branch from a different repository, and give it a new
name in your repository:</simpara>
<literallayout>$ git fetch git://example.com/project.git theirbranch:mybranch
$ git fetch git://example.com/project.git v2.6.15:mybranch</literallayout>
<simpara>Keep a list of repositories you work with regularly:</simpara>
<literallayout>$ git remote add example git://example.com/project.git
$ git remote                    # list remote repositories
example
origin
$ git remote show example       # get details
* remote example
  URL: git://example.com/project.git
  Tracked remote branches
    master
    next
    ...
$ git fetch example             # update branches from example
$ git branch -r                 # list all remote branches</literallayout>
</section>
<section id="Git User Manual_exploring-history">
<title>Exploring history</title>
<literallayout>$ gitk                      # visualize and browse history
$ git log                   # list all commits
$ git log src/              # ...modifying src/
$ git log v2.6.15..v2.6.16  # ...in v2.6.16, not in v2.6.15
$ git log master..test      # ...in branch test, not in branch master
$ git log test..master      # ...in branch master, but not in test
$ git log test...master     # ...in one branch, not in both
$ git log -S'foo()'         # ...where difference contain "foo()"
$ git log --since="2 weeks ago"
$ git log -p                # show patches as well
$ git show                  # most recent commit
$ git diff v2.6.15..v2.6.16 # diff between two tagged versions
$ git diff v2.6.15..HEAD    # diff with current head
$ git grep "foo()"          # search working directory for "foo()"
$ git grep v2.6.15 "foo()"  # search old tree for "foo()"
$ git show v2.6.15:a.txt    # look at old version of a.txt</literallayout>
<simpara>Search for regressions:</simpara>
<literallayout>$ git bisect start
$ git bisect bad                # current version is bad
$ git bisect good v2.6.13-rc2   # last known good revision
Bisecting: 675 revisions left to test after this
                                # test here, then:
$ git bisect good               # if this revision is good, or
$ git bisect bad                # if this revision is bad.
                                # repeat until done.</literallayout>
</section>
<section id="Git User Manual_making-changes">
<title>Making changes</title>
<simpara>Make sure Git knows who to blame:</simpara>
<literallayout>$ cat &gt;&gt;~/.gitconfig &lt;&lt;\EOF
[user]
        name = Your Name Comes Here
        email = you@yourdomain.example.com
EOF</literallayout>
<simpara>Select file contents to include in the next commit, then make the
commit:</simpara>
<literallayout>$ git add a.txt    # updated file
$ git add b.txt    # new file
$ git rm c.txt     # old file
$ git commit</literallayout>
<simpara>Or, prepare and create the commit in one step:</simpara>
<literallayout>$ git commit d.txt # use latest content only of d.txt
$ git commit -a    # use latest content of all tracked files</literallayout>
</section>
<section id="Git User Manual_merging">
<title>Merging</title>
<literallayout>$ git merge test   # merge branch "test" into the current branch
$ git pull git://example.com/project.git master
                   # fetch and merge in remote branch
$ git pull . test  # equivalent to git merge test</literallayout>
</section>
<section id="Git User Manual_sharing-your-changes">
<title>Sharing your changes</title>
<simpara>Importing or exporting patches:</simpara>
<literallayout>$ git format-patch origin..HEAD # format a patch for each commit
                                # in HEAD but not in origin
$ git am mbox # import patches from the mailbox "mbox"</literallayout>
<simpara>Fetch a branch in a different Git repository, then merge into the
current branch:</simpara>
<literallayout>$ git pull git://example.com/project.git theirbranch</literallayout>
<simpara>Store the fetched branch into a local branch before merging into the
current branch:</simpara>
<literallayout>$ git pull git://example.com/project.git theirbranch:mybranch</literallayout>
<simpara>After creating commits on a local branch, update the remote
branch with your commits:</simpara>
<literallayout>$ git push ssh://example.com/project.git mybranch:theirbranch</literallayout>
<simpara>When remote and local branch are both named "test":</simpara>
<literallayout>$ git push ssh://example.com/project.git test</literallayout>
<simpara>Shortcut version for a frequently used remote repository:</simpara>
<literallayout>$ git remote add example ssh://example.com/project.git
$ git push example test</literallayout>
</section>
<section id="Git User Manual_repository-maintenance">
<title>Repository maintenance</title>
<simpara>Check for corruption:</simpara>
<literallayout>$ git fsck</literallayout>
<simpara>Recompress, remove unused cruft:</simpara>
<literallayout>$ git gc</literallayout>
</section>
</sect3>
<sect3 id="Git User Manual_todo">
<title>Notes and todo list for this manual</title>
<simpara>This is a work in progress.</simpara>
<simpara>The basic requirements:</simpara>
<itemizedlist>
<listitem>
<simpara>
It must be readable in order, from beginning to end, by someone
  intelligent with a basic grasp of the UNIX command line, but without
  any special knowledge of Git.  If necessary, any other prerequisites
  should be specifically mentioned as they arise.
</simpara>
</listitem>
<listitem>
<simpara>
Whenever possible, section headings should clearly describe the task
  they explain how to do, in language that requires no more knowledge
  than necessary: for example, "importing patches into a project" rather
  than "the <emphasis>git am</emphasis> command"
</simpara>
</listitem>
</itemizedlist>
<simpara>Think about how to create a clear chapter dependency graph that will
allow people to get to important topics without necessarily reading
everything in between.</simpara>
<simpara>Scan <emphasis>Documentation/</emphasis> for other stuff left out; in particular:</simpara>
<itemizedlist>
<listitem>
<simpara>
howto's
</simpara>
</listitem>
<listitem>
<simpara>
some of <emphasis>technical/</emphasis>?
</simpara>
</listitem>
<listitem>
<simpara>
hooks
</simpara>
</listitem>
<listitem>
<simpara>
list of commands in <xref linkend="git(1)" />
</simpara>
</listitem>
</itemizedlist>
<simpara>Scan email archives for other stuff left out</simpara>
<simpara>Scan man pages to see if any assume more background than this manual
provides.</simpara>
<simpara>Add more good examples.  Entire sections of just cookbook examples
might be a good idea; maybe make an "advanced examples" section a
standard end-of-chapter section?</simpara>
<simpara>Include cross-references to the glossary, where appropriate.</simpara>
<simpara>Add a section on working with other version control systems, including
CVS, Subversion, and just imports of series of release tarballs.</simpara>
<simpara>Write a chapter on using plumbing and writing scripts.</simpara>
<simpara>Alternates, clone -reference, etc.</simpara>
<simpara>More on recovery from repository corruption.  See:
        <ulink url="http://marc.info/?l=git&amp;m=117263864820799&amp;w=2">http://marc.info/?l=git&amp;m=117263864820799&amp;w=2</ulink>
        <ulink url="http://marc.info/?l=git&amp;m=117147855503798&amp;w=2">http://marc.info/?l=git&amp;m=117147855503798&amp;w=2</ulink></simpara>
</sect3>
</sect2>
