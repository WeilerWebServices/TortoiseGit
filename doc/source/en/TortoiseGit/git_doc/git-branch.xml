<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect2 lang="en" id="git-branch(1)">
    <title>git-branch(1)</title>
<indexterm>
<primary>git-branch(1)</primary>
</indexterm>
<simplesect id="git-branch(1)__name">
<title>NAME</title>
<simpara>git-branch - List, create, or delete branches</simpara>
</simplesect>
<simplesect id="git-branch(1)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>git branch</emphasis> [--color[=&lt;when&gt;] | --no-color] [-r | -a]
        [--list] [-v [--abbrev=&lt;length&gt; | --no-abbrev]]
        [--column[=&lt;options&gt;] | --no-column]
        [(--merged | --no-merged | --contains) [&lt;commit&gt;]] [--sort=&lt;key&gt;]
        [--points-at &lt;object&gt;] [&lt;pattern&gt;&#8230;]
<emphasis>git branch</emphasis> [--set-upstream | --track | --no-track] [-l] [-f] &lt;branchname&gt; [&lt;start-point&gt;]
<emphasis>git branch</emphasis> (--set-upstream-to=&lt;upstream&gt; | -u &lt;upstream&gt;) [&lt;branchname&gt;]
<emphasis>git branch</emphasis> --unset-upstream [&lt;branchname&gt;]
<emphasis>git branch</emphasis> (-m | -M) [&lt;oldbranch&gt;] &lt;newbranch&gt;
<emphasis>git branch</emphasis> (-d | -D) [-r] &lt;branchname&gt;&#8230;
<emphasis>git branch</emphasis> --edit-description [&lt;branchname&gt;]</literallayout>
</blockquote>
</simplesect>
<simplesect id="git-branch(1)__description">
<title>DESCRIPTION</title>
<simpara>If <emphasis>--list</emphasis> is given, or if there are no non-option arguments, existing
branches are listed; the current branch will be highlighted with an
asterisk.  Option <emphasis>-r</emphasis> causes the remote-tracking branches to be listed,
and option <emphasis>-a</emphasis> shows both local and remote branches. If a <emphasis>&lt;pattern&gt;</emphasis>
is given, it is used as a shell wildcard to restrict the output to
matching branches. If multiple patterns are given, a branch is shown if
it matches any of the patterns.  Note that when providing a
<emphasis>&lt;pattern&gt;</emphasis>, you must use <emphasis>--list</emphasis>; otherwise the command is interpreted
as branch creation.</simpara>
<simpara>With <emphasis>--contains</emphasis>, shows only the branches that contain the named commit
(in other words, the branches whose tip commits are descendants of the
named commit).  With <emphasis>--merged</emphasis>, only branches merged into the named
commit (i.e. the branches whose tip commits are reachable from the named
commit) will be listed.  With <emphasis>--no-merged</emphasis> only branches not merged into
the named commit will be listed.  If the &lt;commit&gt; argument is missing it
defaults to <emphasis>HEAD</emphasis> (i.e. the tip of the current branch).</simpara>
<simpara>The command's second form creates a new branch head named &lt;branchname&gt;
which points to the current <emphasis>HEAD</emphasis>, or &lt;start-point&gt; if given.</simpara>
<simpara>Note that this will create the new branch, but it will not switch the
working tree to it; use "git checkout &lt;newbranch&gt;" to switch to the
new branch.</simpara>
<simpara>When a local branch is started off a remote-tracking branch, Git sets up the
branch (specifically the <emphasis>branch.&lt;name&gt;.remote</emphasis> and <emphasis>branch.&lt;name&gt;.merge</emphasis>
configuration entries) so that <emphasis>git pull</emphasis> will appropriately merge from
the remote-tracking branch. This behavior may be changed via the global
<emphasis>branch.autoSetupMerge</emphasis> configuration flag. That setting can be
overridden by using the <emphasis>--track</emphasis> and <emphasis>--no-track</emphasis> options, and
changed later using <emphasis>git branch --set-upstream-to</emphasis>.</simpara>
<simpara>With a <emphasis>-m</emphasis> or <emphasis>-M</emphasis> option, &lt;oldbranch&gt; will be renamed to &lt;newbranch&gt;.
If &lt;oldbranch&gt; had a corresponding reflog, it is renamed to match
&lt;newbranch&gt;, and a reflog entry is created to remember the branch
renaming. If &lt;newbranch&gt; exists, -M must be used to force the rename
to happen.</simpara>
<simpara>With a <emphasis>-d</emphasis> or <emphasis>-D</emphasis> option, <emphasis>&lt;branchname&gt;</emphasis> will be deleted.  You may
specify more than one branch for deletion.  If the branch currently
has a reflog then the reflog will also be deleted.</simpara>
<simpara>Use <emphasis>-r</emphasis> together with <emphasis>-d</emphasis> to delete remote-tracking branches. Note, that it
only makes sense to delete remote-tracking branches if they no longer exist
in the remote repository or if <emphasis>git fetch</emphasis> was configured not to fetch
them again. See also the <emphasis>prune</emphasis> subcommand of <xref linkend="git-remote(1)" /> for a
way to clean up all obsolete remote-tracking branches.</simpara>
</simplesect>
<simplesect id="git-branch(1)__options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-d
</term>
<term>
--delete
</term>
<listitem>
<simpara>
        Delete a branch. The branch must be fully merged in its
        upstream branch, or in <emphasis>HEAD</emphasis> if no upstream was set with
        <emphasis>--track</emphasis> or <emphasis>--set-upstream</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-D
</term>
<listitem>
<simpara>
        Shortcut for <emphasis>--delete --force</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-l
</term>
<term>
--create-reflog
</term>
<listitem>
<simpara>
        Create the branch's reflog.  This activates recording of
        all changes made to the branch ref, enabling use of date
        based sha1 expressions such as "&lt;branchname&gt;@{yesterday}".
        Note that in non-bare repositories, reflogs are usually
        enabled by default by the <emphasis>core.logallrefupdates</emphasis> config option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-f
</term>
<term>
--force
</term>
<listitem>
<simpara>
        Reset &lt;branchname&gt; to &lt;startpoint&gt; if &lt;branchname&gt; exists
        already. Without <emphasis>-f</emphasis> <emphasis>git branch</emphasis> refuses to change an existing branch.
        In combination with <emphasis>-d</emphasis> (or <emphasis>--delete</emphasis>), allow deleting the
        branch irrespective of its merged status. In combination with
        <emphasis>-m</emphasis> (or <emphasis>--move</emphasis>), allow renaming the branch even if the new
        branch name already exists.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-m
</term>
<term>
--move
</term>
<listitem>
<simpara>
        Move/rename a branch and the corresponding reflog.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-M
</term>
<listitem>
<simpara>
        Shortcut for <emphasis>--move --force</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--color[=&lt;when&gt;]
</term>
<listitem>
<simpara>
        Color branches to highlight current, local, and
        remote-tracking branches.
        The value must be always (the default), never, or auto.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-color
</term>
<listitem>
<simpara>
        Turn off branch colors, even when the configuration file gives the
        default to color output.
        Same as <emphasis>--color=never</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--column[=&lt;options&gt;]
</term>
<term>
--no-column
</term>
<listitem>
<simpara>
        Display branch listing in columns. See configuration variable
        column.branch for option syntax.<emphasis>--column</emphasis> and <emphasis>--no-column</emphasis>
        without options are equivalent to <emphasis>always</emphasis> and <emphasis>never</emphasis> respectively.
</simpara>
<simpara>This option is only applicable in non-verbose mode.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-r
</term>
<term>
--remotes
</term>
<listitem>
<simpara>
        List or delete (if used with -d) the remote-tracking branches.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-a
</term>
<term>
--all
</term>
<listitem>
<simpara>
        List both remote-tracking branches and local branches.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--list
</term>
<listitem>
<simpara>
        Activate the list mode. <emphasis>git branch &lt;pattern&gt;</emphasis> would try to create a branch,
        use <emphasis>git branch --list &lt;pattern&gt;</emphasis> to list matching branches.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
-vv
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        When in list mode,
        show sha1 and commit subject line for each head, along with
        relationship to upstream branch (if any). If given twice, print
        the name of the upstream branch, as well (see also <emphasis>git remote
        show &lt;remote&gt;</emphasis>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-q
</term>
<term>
--quiet
</term>
<listitem>
<simpara>
        Be more quiet when creating or deleting a branch, suppressing
        non-error messages.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--abbrev=&lt;length&gt;
</term>
<listitem>
<simpara>
        Alter the sha1's minimum display length in the output listing.
        The default value is 7 and can be overridden by the <emphasis>core.abbrev</emphasis>
        config option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-abbrev
</term>
<listitem>
<simpara>
        Display the full sha1s in the output listing rather than abbreviating them.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-t
</term>
<term>
--track
</term>
<listitem>
<simpara>
        When creating a new branch, set up <emphasis>branch.&lt;name&gt;.remote</emphasis> and
        <emphasis>branch.&lt;name&gt;.merge</emphasis> configuration entries to mark the
        start-point branch as "upstream" from the new branch. This
        configuration will tell git to show the relationship between the
        two branches in <emphasis>git status</emphasis> and <emphasis>git branch -v</emphasis>. Furthermore,
        it directs <emphasis>git pull</emphasis> without arguments to pull from the
        upstream when the new branch is checked out.
</simpara>
<simpara>This behavior is the default when the start point is a remote-tracking branch.
Set the branch.autoSetupMerge configuration variable to <emphasis>false</emphasis> if you
want <emphasis>git checkout</emphasis> and <emphasis>git branch</emphasis> to always behave as if <emphasis>--no-track</emphasis>
were given. Set it to <emphasis>always</emphasis> if you want this behavior when the
start-point is either a local or remote-tracking branch.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-track
</term>
<listitem>
<simpara>
        Do not set up "upstream" configuration, even if the
        branch.autoSetupMerge configuration variable is true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--set-upstream
</term>
<listitem>
<simpara>
        If specified branch does not exist yet or if <emphasis>--force</emphasis> has been
        given, acts exactly like <emphasis>--track</emphasis>. Otherwise sets up configuration
        like <emphasis>--track</emphasis> would when creating the branch, except that where
        branch points to is not changed.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-u &lt;upstream&gt;
</term>
<term>
--set-upstream-to=&lt;upstream&gt;
</term>
<listitem>
<simpara>
        Set up &lt;branchname&gt;'s tracking information so &lt;upstream&gt; is
        considered &lt;branchname&gt;'s upstream branch. If no &lt;branchname&gt;
        is specified, then it defaults to the current branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--unset-upstream
</term>
<listitem>
<simpara>
        Remove the upstream information for &lt;branchname&gt;. If no branch
        is specified it defaults to the current branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--edit-description
</term>
<listitem>
<simpara>
        Open an editor and edit the text to explain what the branch is
        for, to be used by various other commands (e.g. <emphasis>format-patch</emphasis>,
        <emphasis>request-pull</emphasis>, and <emphasis>merge</emphasis> (if enabled)). Multi-line explanations
        may be used.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--contains [&lt;commit&gt;]
</term>
<listitem>
<simpara>
        Only list branches which contain the specified commit (HEAD
        if not specified). Implies <emphasis>--list</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--merged [&lt;commit&gt;]
</term>
<listitem>
<simpara>
        Only list branches whose tips are reachable from the
        specified commit (HEAD if not specified). Implies <emphasis>--list</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-merged [&lt;commit&gt;]
</term>
<listitem>
<simpara>
        Only list branches whose tips are not reachable from the
        specified commit (HEAD if not specified). Implies <emphasis>--list</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;branchname&gt;
</term>
<listitem>
<simpara>
        The name of the branch to create or delete.
        The new branch name must pass all checks defined by
        <xref linkend="git-check-ref-format(1)" />.  Some of these checks
        may restrict the characters allowed in a branch name.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;start-point&gt;
</term>
<listitem>
<simpara>
        The new branch head will point to this commit.  It may be
        given as a branch name, a commit-id, or a tag.  If this
        option is omitted, the current HEAD will be used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;oldbranch&gt;
</term>
<listitem>
<simpara>
        The name of an existing branch to rename.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;newbranch&gt;
</term>
<listitem>
<simpara>
        The new name for an existing branch. The same restrictions as for
        &lt;branchname&gt; apply.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--sort=&lt;key&gt;
</term>
<listitem>
<simpara>
        Sort based on the key given. Prefix <emphasis>-</emphasis> to sort in descending
        order of the value. You may use the --sort=&lt;key&gt; option
        multiple times, in which case the last key becomes the primary
        key. The keys supported are the same as those in <emphasis>git
        for-each-ref</emphasis>. Sort order defaults to sorting based on the
        full refname (including <emphasis>refs/...</emphasis> prefix). This lists
        detached HEAD (if present) first, then local branches and
        finally remote-tracking branches.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--points-at &lt;object&gt;
</term>
<listitem>
<simpara>
        Only list branches of the given object.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-branch(1)__examples">
<title>Examples</title>
<variablelist>
<varlistentry>
<term>
Start development from a known tag
</term>
<listitem>
<screen>$ git clone git://git.kernel.org/pub/scm/.../linux-2.6 my2.6
$ cd my2.6
$ git branch my2.6.14 v2.6.14   <co id="git-branch_CO1-1"/>
$ git checkout my2.6.14</screen>
<calloutlist>
<callout arearefs="git-branch_CO1-1">
<para>
This step and the next one could be combined into a single step with
"checkout -b my2.6.14 v2.6.14".
</para>
</callout>
</calloutlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
Delete an unneeded branch
</term>
<listitem>
<screen>$ git clone git://git.kernel.org/.../git.git my.git
$ cd my.git
$ git branch -d -r origin/todo origin/html origin/man   <co id="git-branch_CO2-1"/>
$ git branch -D test                                    <co id="git-branch_CO2-2"/></screen>
<calloutlist>
<callout arearefs="git-branch_CO2-1">
<para>
Delete the remote-tracking branches "todo", "html" and "man". The next
<emphasis>fetch</emphasis> or <emphasis>pull</emphasis> will create them again unless you configure them not to.
See <xref linkend="git-fetch(1)" />.
</para>
</callout>
<callout arearefs="git-branch_CO2-2">
<para>
Delete the "test" branch even if the "master" branch (or whichever branch
is currently checked out) does not have all commits from the test branch.
</para>
</callout>
</calloutlist>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-branch(1)__notes">
<title>Notes</title>
<simpara>If you are creating a branch that you want to checkout immediately, it is
easier to use the git checkout command with its <emphasis>-b</emphasis> option to create
a branch and check it out with a single command.</simpara>
<simpara>The options <emphasis>--contains</emphasis>, <emphasis>--merged</emphasis> and <emphasis>--no-merged</emphasis> serve three related
but different purposes:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>--contains &lt;commit&gt;</emphasis> is used to find all branches which will need
  special attention if &lt;commit&gt; were to be rebased or amended, since those
  branches contain the specified &lt;commit&gt;.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>--merged</emphasis> is used to find all branches which can be safely deleted,
  since those branches are fully contained by HEAD.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>--no-merged</emphasis> is used to find branches which are candidates for merging
  into HEAD, since those branches are not fully contained by HEAD.
</simpara>
</listitem>
</itemizedlist>
</simplesect>
<simplesect id="git-branch(1)__see_also">
<title>SEE ALSO</title>
<simpara><xref linkend="git-check-ref-format(1)" />,
<xref linkend="git-fetch(1)" />,
<xref linkend="git-remote(1)" />,
<ulink url="https://www.kernel.org/pub/software/scm/git/docs/user-manual.html#what-is-a-branch"><citetitle>Understanding history: What is
a branch?</citetitle></ulink> in the Git User's Manual.</simpara>
</simplesect>
<simplesect id="git-branch(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
