<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect2 lang="en" id="git-name-rev(1)">
    <title>git-name-rev(1)</title>
<indexterm>
<primary>git-name-rev(1)</primary>
</indexterm>
<simplesect id="git-name-rev(1)__name">
<title>NAME</title>
<simpara>git-name-rev - Find symbolic names for given revs</simpara>
</simplesect>
<simplesect id="git-name-rev(1)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>git name-rev</emphasis> [--tags] [--refs=&lt;pattern&gt;]
               ( --all | --stdin | &lt;commit-ish&gt;&#8230; )</literallayout>
</blockquote>
</simplesect>
<simplesect id="git-name-rev(1)__description">
<title>DESCRIPTION</title>
<simpara>Finds symbolic names suitable for human digestion for revisions given in any
format parsable by <emphasis>git rev-parse</emphasis>.</simpara>
</simplesect>
<simplesect id="git-name-rev(1)__options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
--tags
</term>
<listitem>
<simpara>
        Do not use branch names, but only tags to name the commits
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--refs=&lt;pattern&gt;
</term>
<listitem>
<simpara>
        Only use refs whose names match a given shell pattern.  The pattern
        can be one of branch name, tag name or fully qualified ref name.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--all
</term>
<listitem>
<simpara>
        List all commits reachable from all refs
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--stdin
</term>
<listitem>
<simpara>
        Transform stdin by substituting all the 40-character SHA-1
        hexes (say $hex) with "$hex ($rev_name)".  When used with
        --name-only, substitute with "$rev_name", omitting $hex
        altogether.  Intended for the scripter's use.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--name-only
</term>
<listitem>
<simpara>
        Instead of printing both the SHA-1 and the name, print only
        the name.  If given with --tags the usual tag prefix of
        "tags/" is also omitted from the name, matching the output
        of <emphasis>git-describe</emphasis> more closely.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-undefined
</term>
<listitem>
<simpara>
        Die with error code != 0 when a reference is undefined,
        instead of printing <emphasis>undefined</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--always
</term>
<listitem>
<simpara>
        Show uniquely abbreviated commit object as fallback.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-name-rev(1)__example">
<title>EXAMPLE</title>
<simpara>Given a commit, find out where it is relative to the local refs. Say somebody
wrote you about that fantastic commit 33db5f4d9027a10e477ccf054b2c1ab94f74c85a.
Of course, you look into the commit, but that only tells you what happened, but
not the context.</simpara>
<simpara>Enter <emphasis>git name-rev</emphasis>:</simpara>
<screen>% git name-rev 33db5f4d9027a10e477ccf054b2c1ab94f74c85a
33db5f4d9027a10e477ccf054b2c1ab94f74c85a tags/v0.99~940</screen>
<simpara>Now you are wiser, because you know that it happened 940 revisions before v0.99.</simpara>
<simpara>Another nice thing you can do is:</simpara>
<screen>% git log | git name-rev --stdin</screen>
</simplesect>
<simplesect id="git-name-rev(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
