<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect2 lang="en" id="git-credential-store(1)">
    <title>git-credential-store(1)</title>
<indexterm>
<primary>git-credential-store(1)</primary>
</indexterm>
<simplesect id="git-credential-store(1)__name">
<title>NAME</title>
<simpara>git-credential-store - Helper to store credentials on disk</simpara>
</simplesect>
<simplesect id="git-credential-store(1)__synopsis">
<title>SYNOPSIS</title>
<screen>git config credential.helper 'store [options]'</screen>
</simplesect>
<simplesect id="git-credential-store(1)__description">
<title>DESCRIPTION</title>
<note><simpara>Using this helper will store your passwords unencrypted on disk,
protected only by filesystem permissions. If this is not an acceptable
security tradeoff, try <xref linkend="git-credential-cache(1)" />, or find a helper
that integrates with secure storage provided by your operating system.</simpara></note>
<simpara>This command stores credentials indefinitely on disk for use by future
Git programs.</simpara>
<simpara>You probably don't want to invoke this command directly; it is meant to
be used as a credential helper by other parts of git. See
<xref linkend="gitcredentials(7)" /> or <emphasis>EXAMPLES</emphasis> below.</simpara>
</simplesect>
<simplesect id="git-credential-store(1)__options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
--file=&lt;path&gt;
</term>
<listitem>
<simpara>
        Use <emphasis>&lt;path&gt;</emphasis> to lookup and store credentials. The file will have its
        filesystem permissions set to prevent other users on the system
        from reading it, but will not be encrypted or otherwise
        protected. If not specified, credentials will be searched for from
        <emphasis>~/.git-credentials</emphasis> and <emphasis>$XDG_CONFIG_HOME/git/credentials</emphasis>, and
        credentials will be written to <emphasis>~/.git-credentials</emphasis> if it exists, or
        <emphasis>$XDG_CONFIG_HOME/git/credentials</emphasis> if it exists and the former does
        not. See also <xref linkend="git-credential-store(1)_FILES"/>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-credential-store(1)_FILES">
<title>FILES</title>
<simpara>If not set explicitly with <emphasis>--file</emphasis>, there are two files where
git-credential-store will search for credentials in order of precedence:</simpara>
<variablelist>
<varlistentry>
<term>
~/.git-credentials
</term>
<listitem>
<simpara>
        User-specific credentials file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
$XDG_CONFIG_HOME/git/credentials
</term>
<listitem>
<simpara>
        Second user-specific credentials file. If <emphasis>$XDG_CONFIG_HOME</emphasis> is not set
        or empty, <emphasis>$HOME/.config/git/credentials</emphasis> will be used. Any credentials
        stored in this file will not be used if <emphasis>~/.git-credentials</emphasis> has a
        matching credential as well. It is a good idea not to create this file
        if you sometimes use older versions of Git that do not support it.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>For credential lookups, the files are read in the order given above, with the
first matching credential found taking precedence over credentials found in
files further down the list.</simpara>
<simpara>Credential storage will by default write to the first existing file in the
list. If none of these files exist, <emphasis>~/.git-credentials</emphasis> will be created and
written to.</simpara>
<simpara>When erasing credentials, matching credentials will be erased from all files.</simpara>
</simplesect>
<simplesect id="git-credential-store(1)__examples">
<title>EXAMPLES</title>
<simpara>The point of this helper is to reduce the number of times you must type
your username or password. For example:</simpara>
<screen>$ git config credential.helper store
$ git push http://example.com/repo.git
Username: &lt;type your username&gt;
Password: &lt;type your password&gt;

[several days later]
$ git push http://example.com/repo.git
[your credentials are used automatically]</screen>
</simplesect>
<simplesect id="git-credential-store(1)__storage_format">
<title>STORAGE FORMAT</title>
<simpara>The <emphasis>.git-credentials</emphasis> file is stored in plaintext. Each credential is
stored on its own line as a URL like:</simpara>
<screen>https://user:pass@example.com</screen>
<simpara>When Git needs authentication for a particular URL context,
credential-store will consider that context a pattern to match against
each entry in the credentials file.  If the protocol, hostname, and
username (if we already have one) match, then the password is returned
to Git. See the discussion of configuration in <xref linkend="gitcredentials(7)" />
for more information.</simpara>
</simplesect>
<simplesect id="git-credential-store(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
