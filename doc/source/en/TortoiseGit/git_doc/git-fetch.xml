<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect2 lang="en" id="git-fetch(1)">
    <title>git-fetch(1)</title>
<indexterm>
<primary>git-fetch(1)</primary>
</indexterm>
<simplesect id="git-fetch(1)__name">
<title>NAME</title>
<simpara>git-fetch - Download objects and refs from another repository</simpara>
</simplesect>
<simplesect id="git-fetch(1)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>git fetch</emphasis> [&lt;options&gt;] [&lt;repository&gt; [&lt;refspec&gt;&#8230;]]
<emphasis>git fetch</emphasis> [&lt;options&gt;] &lt;group&gt;
<emphasis>git fetch</emphasis> --multiple [&lt;options&gt;] [(&lt;repository&gt; | &lt;group&gt;)&#8230;]
<emphasis>git fetch</emphasis> --all [&lt;options&gt;]</literallayout>
</blockquote>
</simplesect>
<simplesect id="git-fetch(1)__description">
<title>DESCRIPTION</title>
<simpara>Fetch branches and/or tags (collectively, "refs") from one or more
other repositories, along with the objects necessary to complete their
histories.  Remote-tracking branches are updated (see the description
of &lt;refspec&gt; below for ways to control this behavior).</simpara>
<simpara>By default, any tag that points into the histories being fetched is
also fetched; the effect is to fetch tags that
point at branches that you are interested in.  This default behavior
can be changed by using the --tags or --no-tags options or by
configuring remote.&lt;name&gt;.tagOpt.  By using a refspec that fetches tags
explicitly, you can fetch tags that do not point into branches you
are interested in as well.</simpara>
<simpara><emphasis>git fetch</emphasis> can fetch from either a single named repository or URL,
or from several repositories at once if &lt;group&gt; is given and
there is a remotes.&lt;group&gt; entry in the configuration file.
(See <xref linkend="git-config(1)" />).</simpara>
<simpara>When no remote is specified, by default the <emphasis>origin</emphasis> remote will be used,
unless there's an upstream branch configured for the current branch.</simpara>
<simpara>The names of refs that are fetched, together with the object names
they point at, are written to <emphasis>.git/FETCH_HEAD</emphasis>.  This information
may be used by scripts or other git commands, such as <xref linkend="git-pull(1)" />.</simpara>
</simplesect>
<simplesect id="git-fetch(1)__options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
--all
</term>
<listitem>
<simpara>
        Fetch all remotes.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-a
</term>
<term>
--append
</term>
<listitem>
<simpara>
        Append ref names and object names of fetched refs to the
        existing contents of <emphasis>.git/FETCH_HEAD</emphasis>.  Without this
        option old data in <emphasis>.git/FETCH_HEAD</emphasis> will be overwritten.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--depth=&lt;depth&gt;
</term>
<listitem>
<simpara>
        Limit fetching to the specified number of commits from the tip of
        each remote branch history. If fetching to a <emphasis>shallow</emphasis> repository
        created by <emphasis>git clone</emphasis> with <emphasis>--depth=&lt;depth&gt;</emphasis> option (see
        <xref linkend="git-clone(1)" />), deepen or shorten the history to the specified
        number of commits. Tags for the deepened commits are not fetched.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--unshallow
</term>
<listitem>
<simpara>
        If the source repository is complete, convert a shallow
        repository to a complete one, removing all the limitations
        imposed by shallow repositories.
</simpara>
<simpara>If the source repository is shallow, fetch as much as possible so that
the current repository has the same history as the source repository.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--update-shallow
</term>
<listitem>
<simpara>
        By default when fetching from a shallow repository,
        <emphasis>git fetch</emphasis> refuses refs that require updating
        .git/shallow. This option updates .git/shallow and accept such
        refs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--dry-run
</term>
<listitem>
<simpara>
        Show what would be done, without making any changes.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-f
</term>
<term>
--force
</term>
<listitem>
<simpara>
        When <emphasis>git fetch</emphasis> is used with <emphasis>&lt;rbranch&gt;:&lt;lbranch&gt;</emphasis>
        refspec, it refuses to update the local branch
        <emphasis>&lt;lbranch&gt;</emphasis> unless the remote branch <emphasis>&lt;rbranch&gt;</emphasis> it
        fetches is a descendant of <emphasis>&lt;lbranch&gt;</emphasis>.  This option
        overrides that check.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-k
</term>
<term>
--keep
</term>
<listitem>
<simpara>
        Keep downloaded pack.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--multiple
</term>
<listitem>
<simpara>
        Allow several &lt;repository&gt; and &lt;group&gt; arguments to be
        specified. No &lt;refspec&gt;s may be specified.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-p
</term>
<term>
--prune
</term>
<listitem>
<simpara>
        After fetching, remove any remote-tracking references that no
        longer exist on the remote.  Tags are not subject to pruning
        if they are fetched only because of the default tag
        auto-following or due to a --tags option.  However, if tags
        are fetched due to an explicit refspec (either on the command
        line or in the remote configuration, for example if the remote
        was cloned with the --mirror option), then they are also
        subject to pruning.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-n
</term>
<term>
--no-tags
</term>
<listitem>
<simpara>
        By default, tags that point at objects that are downloaded
        from the remote repository are fetched and stored locally.
        This option disables this automatic tag following. The default
        behavior for a remote may be specified with the remote.&lt;name&gt;.tagOpt
        setting. See <xref linkend="git-config(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--refmap=&lt;refspec&gt;
</term>
<listitem>
<simpara>
        When fetching refs listed on the command line, use the
        specified refspec (can be given more than once) to map the
        refs to remote-tracking branches, instead of the values of
        <emphasis>remote.*.fetch</emphasis> configuration variables for the remote
        repository.  See section on "Configured Remote-tracking
        Branches" for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-t
</term>
<term>
--tags
</term>
<listitem>
<simpara>
        Fetch all tags from the remote (i.e., fetch remote tags
        <emphasis>refs/tags/*</emphasis> into local tags with the same name), in addition
        to whatever else would otherwise be fetched.  Using this
        option alone does not subject tags to pruning, even if --prune
        is used (though tags may be pruned anyway if they are also the
        destination of an explicit refspec; see <emphasis>--prune</emphasis>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--recurse-submodules[=yes|on-demand|no]
</term>
<listitem>
<simpara>
        This option controls if and under what conditions new commits of
        populated submodules should be fetched too. It can be used as a
        boolean option to completely disable recursion when set to <emphasis>no</emphasis> or to
        unconditionally recurse into all populated submodules when set to
        <emphasis>yes</emphasis>, which is the default when this option is used without any
        value. Use <emphasis>on-demand</emphasis> to only recurse into a populated submodule
        when the superproject retrieves a commit that updates the submodule's
        reference to a commit that isn't already in the local submodule
        clone.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-j
</term>
<term>
--jobs=&lt;n&gt;
</term>
<listitem>
<simpara>
        Number of parallel children to be used for fetching submodules.
        Each will fetch from different submodules, such that fetching many
        submodules will be faster. By default submodules will be fetched
        one at a time.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-recurse-submodules
</term>
<listitem>
<simpara>
        Disable recursive fetching of submodules (this has the same effect as
        using the <emphasis>--recurse-submodules=no</emphasis> option).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--submodule-prefix=&lt;path&gt;
</term>
<listitem>
<simpara>
        Prepend &lt;path&gt; to paths printed in informative messages
        such as "Fetching submodule foo".  This option is used
        internally when recursing over submodules.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--recurse-submodules-default=[yes|on-demand]
</term>
<listitem>
<simpara>
        This option is used internally to temporarily provide a
        non-negative default value for the --recurse-submodules
        option.  All other methods of configuring fetch's submodule
        recursion (such as settings in <xref linkend="gitmodules(5)" /> and
        <xref linkend="git-config(1)" />) override this option, as does
        specifying --[no-]recurse-submodules directly.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-u
</term>
<term>
--update-head-ok
</term>
<listitem>
<simpara>
        By default <emphasis>git fetch</emphasis> refuses to update the head which
        corresponds to the current branch.  This flag disables the
        check.  This is purely for the internal use for <emphasis>git pull</emphasis>
        to communicate with <emphasis>git fetch</emphasis>, and unless you are
        implementing your own Porcelain you are not supposed to
        use it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--upload-pack &lt;upload-pack&gt;
</term>
<listitem>
<simpara>
        When given, and the repository to fetch from is handled
        by <emphasis>git fetch-pack</emphasis>, <emphasis>--exec=&lt;upload-pack&gt;</emphasis> is passed to
        the command to specify non-default path for the command
        run on the other end.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-q
</term>
<term>
--quiet
</term>
<listitem>
<simpara>
        Pass --quiet to git-fetch-pack and silence any other internally
        used git commands. Progress is not reported to the standard error
        stream.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        Be verbose.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--progress
</term>
<listitem>
<simpara>
        Progress status is reported on the standard error stream
        by default when it is attached to a terminal, unless -q
        is specified. This flag forces progress status even if the
        standard error stream is not directed to a terminal.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-4
</term>
<term>
--ipv4
</term>
<listitem>
<simpara>
        Use IPv4 addresses only, ignoring IPv6 addresses.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-6
</term>
<term>
--ipv6
</term>
<listitem>
<simpara>
        Use IPv6 addresses only, ignoring IPv4 addresses.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;repository&gt;
</term>
<listitem>
<simpara>
        The "remote" repository that is the source of a fetch
        or pull operation.  This parameter can be either a URL
        (see the section <link linkend="git-fetch(1)_URLS">GIT URLS</link> below) or the name
        of a remote (see the section <link linkend="git-fetch(1)_REMOTES">REMOTES</link> below).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;group&gt;
</term>
<listitem>
<simpara>
        A name referring to a list of repositories as the value
        of remotes.&lt;group&gt; in the configuration file.
        (See <xref linkend="git-config(1)" />).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;refspec&gt;
</term>
<listitem>
<simpara>
        Specifies which refs to fetch and which local refs to update.
        When no &lt;refspec&gt;s appear on the command line, the refs to fetch
        are read from <emphasis>remote.&lt;repository&gt;.fetch</emphasis> variables instead
        (see <link linkend="git-fetch(1)_CRTB">CONFIGURED REMOTE-TRACKING BRANCHES</link> below).
</simpara>
<simpara>The format of a &lt;refspec&gt; parameter is an optional plus
<emphasis>+</emphasis>, followed by the source ref &lt;src&gt;, followed
by a colon <emphasis>:</emphasis>, followed by the destination ref &lt;dst&gt;.
The colon can be omitted when &lt;dst&gt; is empty.</simpara>
<simpara><emphasis>tag &lt;tag&gt;</emphasis> means the same as <emphasis>refs/tags/&lt;tag&gt;:refs/tags/&lt;tag&gt;</emphasis>;
it requests fetching everything up to the given tag.</simpara>
<simpara>The remote ref that matches &lt;src&gt;
is fetched, and if &lt;dst&gt; is not empty string, the local
ref that matches it is fast-forwarded using &lt;src&gt;.
If the optional plus <emphasis>+</emphasis> is used, the local ref
is updated even if it does not result in a fast-forward
update.</simpara>
<note><simpara>When the remote branch you want to fetch is known to
be rewound and rebased regularly, it is expected that
its new tip will not be descendant of its previous tip
(as stored in your remote-tracking branch the last time
you fetched).  You would want
to use the <emphasis>+</emphasis> sign to indicate non-fast-forward updates
will be needed for such branches.  There is no way to
determine or declare that a branch will be made available
in a repository with this behavior; the pulling user simply
must know this is the expected usage pattern for a branch.</simpara></note>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-fetch(1)__git_urls_anchor_id_git_fetch_1__urls_xreflabel_urls">
<title>GIT URLS<anchor id="git-fetch(1)_URLS" xreflabel="[URLS]"/></title>
<simpara>In general, URLs contain information about the transport protocol, the
address of the remote server, and the path to the repository.
Depending on the transport protocol, some of this information may be
absent.</simpara>
<simpara>Git supports ssh, git, http, and https protocols (in addition, ftp,
and ftps can be used for fetching, but this is inefficient and
deprecated; do not use it).</simpara>
<simpara>The native transport (i.e. git:// URL) does no authentication and
should be used with caution on unsecured networks.</simpara>
<simpara>The following syntaxes may be used with them:</simpara>
<itemizedlist>
<listitem>
<simpara>
ssh://&#91;user@&#93;host.xz&#91;:port&#93;/path/to/repo.git/
</simpara>
</listitem>
<listitem>
<simpara>
git://host.xz&#91;:port&#93;/path/to/repo.git/
</simpara>
</listitem>
<listitem>
<simpara>
http&#91;s&#93;://host.xz&#91;:port&#93;/path/to/repo.git/
</simpara>
</listitem>
<listitem>
<simpara>
ftp&#91;s&#93;://host.xz&#91;:port&#93;/path/to/repo.git/
</simpara>
</listitem>
</itemizedlist>
<simpara>An alternative scp-like syntax may also be used with the ssh protocol:</simpara>
<itemizedlist>
<listitem>
<simpara>
&#91;user@&#93;host.xz:path/to/repo.git/
</simpara>
</listitem>
</itemizedlist>
<simpara>This syntax is only recognized if there are no slashes before the
first colon. This helps differentiate a local path that contains a
colon. For example the local path <emphasis>foo:bar</emphasis> could be specified as an
absolute path or <emphasis>./foo:bar</emphasis> to avoid being misinterpreted as an ssh
url.</simpara>
<simpara>The ssh and git protocols additionally support ~username expansion:</simpara>
<itemizedlist>
<listitem>
<simpara>
ssh://&#91;user@&#93;host.xz&#91;:port&#93;/~&#91;user&#93;/path/to/repo.git/
</simpara>
</listitem>
<listitem>
<simpara>
git://host.xz&#91;:port&#93;/~&#91;user&#93;/path/to/repo.git/
</simpara>
</listitem>
<listitem>
<simpara>
&#91;user@&#93;host.xz:/~&#91;user&#93;/path/to/repo.git/
</simpara>
</listitem>
</itemizedlist>
<simpara>For local repositories, also supported by Git natively, the following
syntaxes may be used:</simpara>
<itemizedlist>
<listitem>
<simpara>
/path/to/repo.git/
</simpara>
</listitem>
<listitem>
<simpara>
file:///path/to/repo.git/
</simpara>
</listitem>
</itemizedlist>
<simpara>These two syntaxes are mostly equivalent, except when cloning, when
the former implies --local option. See <xref linkend="git-clone(1)" /> for
details.</simpara>
<simpara>When Git doesn't know how to handle a certain transport protocol, it
attempts to use the <emphasis>remote-&lt;transport&gt;</emphasis> remote helper, if one
exists. To explicitly request a remote helper, the following syntax
may be used:</simpara>
<itemizedlist>
<listitem>
<simpara>
&lt;transport&gt;::&lt;address&gt;
</simpara>
</listitem>
</itemizedlist>
<simpara>where &lt;address&gt; may be a path, a server and path, or an arbitrary
URL-like string recognized by the specific remote helper being
invoked. See <xref linkend="gitremote-helpers(1)" /> for details.</simpara>
<simpara>If there are a large number of similarly-named remote repositories and
you want to use a different format for them (such that the URLs you
use will be rewritten into URLs that work), you can create a
configuration section of the form:</simpara>
<screen>        [url "&lt;actual url base&gt;"]
                insteadOf = &lt;other url base&gt;</screen>
<simpara>For example, with this:</simpara>
<screen>        [url "git://git.host.xz/"]
                insteadOf = host.xz:/path/to/
                insteadOf = work:</screen>
<simpara>a URL like "work:repo.git" or like "host.xz:/path/to/repo.git" will be
rewritten in any context that takes a URL to be "git://git.host.xz/repo.git".</simpara>
<simpara>If you want to rewrite URLs for push only, you can create a
configuration section of the form:</simpara>
<screen>        [url "&lt;actual url base&gt;"]
                pushInsteadOf = &lt;other url base&gt;</screen>
<simpara>For example, with this:</simpara>
<screen>        [url "ssh://example.org/"]
                pushInsteadOf = git://example.org/</screen>
<simpara>a URL like "git://example.org/path/to/repo.git" will be rewritten to
"ssh://example.org/path/to/repo.git" for pushes, but pulls will still
use the original URL.</simpara>
</simplesect>
<simplesect id="git-fetch(1)__remotes_anchor_id_git_fetch_1__remotes_xreflabel_remotes">
<title>REMOTES<anchor id="git-fetch(1)_REMOTES" xreflabel="[REMOTES]"/></title>
<simpara>The name of one of the following can be used instead
of a URL as <emphasis>&lt;repository&gt;</emphasis> argument:</simpara>
<itemizedlist>
<listitem>
<simpara>
a remote in the Git configuration file: <emphasis>$GIT_DIR/config</emphasis>,
</simpara>
</listitem>
<listitem>
<simpara>
a file in the <emphasis>$GIT_DIR/remotes</emphasis> directory, or
</simpara>
</listitem>
<listitem>
<simpara>
a file in the <emphasis>$GIT_DIR/branches</emphasis> directory.
</simpara>
</listitem>
</itemizedlist>
<simpara>All of these also allow you to omit the refspec from the command line
because they each contain a refspec which git will use by default.</simpara>
<section id="git-fetch(1)__named_remote_in_configuration_file">
<title>Named remote in configuration file</title>
<simpara>You can choose to provide the name of a remote which you had previously
configured using <xref linkend="git-remote(1)" />, <xref linkend="git-config(1)" />
or even by a manual edit to the <emphasis>$GIT_DIR/config</emphasis> file.  The URL of
this remote will be used to access the repository.  The refspec
of this remote will be used by default when you do
not provide a refspec on the command line.  The entry in the
config file would appear like this:</simpara>
<screen>        [remote "&lt;name&gt;"]
                url = &lt;url&gt;
                pushurl = &lt;pushurl&gt;
                push = &lt;refspec&gt;
                fetch = &lt;refspec&gt;</screen>
<simpara>The <emphasis>&lt;pushurl&gt;</emphasis> is used for pushes only. It is optional and defaults
to <emphasis>&lt;url&gt;</emphasis>.</simpara>
</section>
<section id="git-fetch(1)__named_file_in_emphasis_git_dir_remotes_emphasis">
<title>Named file in <emphasis>$GIT_DIR/remotes</emphasis></title>
<simpara>You can choose to provide the name of a
file in <emphasis>$GIT_DIR/remotes</emphasis>.  The URL
in this file will be used to access the repository.  The refspec
in this file will be used as default when you do not
provide a refspec on the command line.  This file should have the
following format:</simpara>
<screen>        URL: one of the above URL format
        Push: &lt;refspec&gt;
        Pull: &lt;refspec&gt;</screen>
<simpara><emphasis>Push:</emphasis> lines are used by <emphasis>git push</emphasis> and
<emphasis>Pull:</emphasis> lines are used by <emphasis>git pull</emphasis> and <emphasis>git fetch</emphasis>.
Multiple <emphasis>Push:</emphasis> and <emphasis>Pull:</emphasis> lines may
be specified for additional branch mappings.</simpara>
</section>
<section id="git-fetch(1)__named_file_in_emphasis_git_dir_branches_emphasis">
<title>Named file in <emphasis>$GIT_DIR/branches</emphasis></title>
<simpara>You can choose to provide the name of a
file in <emphasis>$GIT_DIR/branches</emphasis>.
The URL in this file will be used to access the repository.
This file should have the following format:</simpara>
<screen>        &lt;url&gt;#&lt;head&gt;</screen>
<simpara><emphasis>&lt;url&gt;</emphasis> is required; <emphasis>#&lt;head&gt;</emphasis> is optional.</simpara>
<simpara>Depending on the operation, git will use one of the following
refspecs, if you don't provide one on the command line.
<emphasis>&lt;branch&gt;</emphasis> is the name of this file in <emphasis>$GIT_DIR/branches</emphasis> and
<emphasis>&lt;head&gt;</emphasis> defaults to <emphasis>master</emphasis>.</simpara>
<simpara>git fetch uses:</simpara>
<screen>        refs/heads/&lt;head&gt;:refs/heads/&lt;branch&gt;</screen>
<simpara>git push uses:</simpara>
<screen>        HEAD:refs/heads/&lt;head&gt;</screen>
</section>
</simplesect>
<simplesect id="git-fetch(1)__configured_remote_tracking_branches_anchor_id_git_fetch_1__crtb_xreflabel_crtb">
<title>CONFIGURED REMOTE-TRACKING BRANCHES<anchor id="git-fetch(1)_CRTB" xreflabel="[CRTB]"/></title>
<simpara>You often interact with the same remote repository by
regularly and repeatedly fetching from it.  In order to keep track
of the progress of such a remote repository, <emphasis>git fetch</emphasis> allows you
to configure <emphasis>remote.&lt;repository&gt;.fetch</emphasis> configuration variables.</simpara>
<simpara>Typically such a variable may look like this:</simpara>
<screen>[remote "origin"]
        fetch = +refs/heads/*:refs/remotes/origin/*</screen>
<simpara>This configuration is used in two ways:</simpara>
<itemizedlist>
<listitem>
<simpara>
When <emphasis>git fetch</emphasis> is run without specifying what branches
  and/or tags to fetch on the command line, e.g. <emphasis>git fetch origin</emphasis>
  or <emphasis>git fetch</emphasis>, <emphasis>remote.&lt;repository&gt;.fetch</emphasis> values are used as
  the refspecs--they specify which refs to fetch and which local refs
  to update.  The example above will fetch
  all branches that exist in the <emphasis>origin</emphasis> (i.e. any ref that matches
  the left-hand side of the value, <emphasis>refs/heads/*</emphasis>) and update the
  corresponding remote-tracking branches in the <emphasis>refs/remotes/origin/*</emphasis>
  hierarchy.
</simpara>
</listitem>
<listitem>
<simpara>
When <emphasis>git fetch</emphasis> is run with explicit branches and/or tags
  to fetch on the command line, e.g. <emphasis>git fetch origin master</emphasis>, the
  &lt;refspec&gt;s given on the command line determine what are to be
  fetched (e.g. <emphasis>master</emphasis> in the example,
  which is a short-hand for <emphasis>master:</emphasis>, which in turn means
  "fetch the <emphasis>master</emphasis> branch but I do not explicitly say what
  remote-tracking branch to update with it from the command line"),
  and the example command will
  fetch <emphasis>only</emphasis> the <emphasis>master</emphasis> branch.  The <emphasis>remote.&lt;repository&gt;.fetch</emphasis>
  values determine which
  remote-tracking branch, if any, is updated.  When used in this
  way, the <emphasis>remote.&lt;repository&gt;.fetch</emphasis> values do not have any
  effect in deciding <emphasis>what</emphasis> gets fetched (i.e. the values are not
  used as refspecs when the command-line lists refspecs); they are
  only used to decide <emphasis>where</emphasis> the refs that are fetched are stored
  by acting as a mapping.
</simpara>
</listitem>
</itemizedlist>
<simpara>The latter use of the <emphasis>remote.&lt;repository&gt;.fetch</emphasis> values can be
overridden by giving the <emphasis>--refmap=&lt;refspec&gt;</emphasis> parameter(s) on the
command line.</simpara>
</simplesect>
<simplesect id="git-fetch(1)__examples">
<title>EXAMPLES</title>
<itemizedlist>
<listitem>
<simpara>
Update the remote-tracking branches:
</simpara>
<screen>$ git fetch origin</screen>
<simpara>The above command copies all branches from the remote refs/heads/
namespace and stores them to the local refs/remotes/origin/ namespace,
unless the branch.&lt;name&gt;.fetch option is used to specify a non-default
refspec.</simpara>
</listitem>
<listitem>
<simpara>
Using refspecs explicitly:
</simpara>
<screen>$ git fetch origin +pu:pu maint:tmp</screen>
<simpara>This updates (or creates, as necessary) branches <emphasis>pu</emphasis> and <emphasis>tmp</emphasis> in
the local repository by fetching from the branches (respectively)
<emphasis>pu</emphasis> and <emphasis>maint</emphasis> from the remote repository.</simpara>
<simpara>The <emphasis>pu</emphasis> branch will be updated even if it is does not fast-forward,
because it is prefixed with a plus sign; <emphasis>tmp</emphasis> will not be.</simpara>
</listitem>
<listitem>
<simpara>
Peek at a remote's branch, without configuring the remote in your local
repository:
</simpara>
<screen>$ git fetch git://git.kernel.org/pub/scm/git/git.git maint
$ git log FETCH_HEAD</screen>
<simpara>The first command fetches the <emphasis>maint</emphasis> branch from the repository at
<emphasis>git://git.kernel.org/pub/scm/git/git.git</emphasis> and the second command uses
<emphasis>FETCH_HEAD</emphasis> to examine the branch with <xref linkend="git-log(1)" />.  The fetched
objects will eventually be removed by git's built-in housekeeping (see
<xref linkend="git-gc(1)" />).</simpara>
</listitem>
</itemizedlist>
</simplesect>
<simplesect id="git-fetch(1)__bugs">
<title>BUGS</title>
<simpara>Using --recurse-submodules can only fetch new commits in already checked
out submodules right now. When e.g. upstream added a new submodule in the
just fetched commits of the superproject the submodule itself can not be
fetched, making it impossible to check out that submodule later without
having to do a fetch again. This is expected to be fixed in a future Git
version.</simpara>
</simplesect>
<simplesect id="git-fetch(1)__see_also">
<title>SEE ALSO</title>
<simpara><xref linkend="git-pull(1)" /></simpara>
</simplesect>
<simplesect id="git-fetch(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
